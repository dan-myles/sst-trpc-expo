{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":330,"column":0,"index":12578}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":330,"column":0,"index":12578}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":330,"column":0,"index":12578}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":330,"column":0,"index":12578}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"@trpc/server/observable","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":70,"index":70}}],"key":"I122979nMYhHcuaUZWanjRGzbec="}},{"name":"@trpc/server/unstable-core-do-not-import","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":71},"end":{"line":2,"column":87,"index":158}}],"key":"v6RfOz0FhqfBuoZo5CXmYCfVJms="}},{"name":"../../../TRPCClientError.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":159},"end":{"line":3,"column":63,"index":222}}],"key":"PMyOI6B0kdaqAiEZnkBjbmZlQP8="}},{"name":"./options.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":0,"index":223},"end":{"line":4,"column":84,"index":307}}],"key":"wDfzwNz/X/LBD/gVAOsq4k0NAk0="}},{"name":"./requestManager.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":0,"index":308},"end":{"line":5,"column":54,"index":362}}],"key":"O0r/9fXxPg5NpH0c4Zcpyje3bhU="}},{"name":"./utils.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":0,"index":363},"end":{"line":6,"column":98,"index":461}}],"key":"XZqiGndSzUFgS+0ABF5nOFWZJRU="}},{"name":"./wsConnection.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":7,"column":0,"index":462},"end":{"line":7,"column":73,"index":535}}],"key":"XBsuP+xqYGuMu5yh1G1aNcz8x3w="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.WsClient = void 0;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n  var _observable = require(_dependencyMap[4], \"@trpc/server/observable\");\n  var _unstableCoreDoNotImport = require(_dependencyMap[5], \"@trpc/server/unstable-core-do-not-import\");\n  var _TRPCClientError = require(_dependencyMap[6], \"../../../TRPCClientError.mjs\");\n  var _options = require(_dependencyMap[7], \"./options.mjs\");\n  var _requestManager = require(_dependencyMap[8], \"./requestManager.mjs\");\n  var _utils = require(_dependencyMap[9], \"./utils.mjs\");\n  var _wsConnection = require(_dependencyMap[10], \"./wsConnection.mjs\");\n  function _define_property(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n  /**\n   * A WebSocket client for managing TRPC operations, supporting lazy initialization,\n   * reconnection, keep-alive, and request management.\n   */\n  var WsClient = exports.WsClient = /*#__PURE__*/function () {\n    function WsClient(opts) {\n      (0, _classCallCheck2.default)(this, WsClient);\n      /**\n      * Observable tracking the current connection state, including errors.\n      */\n      _define_property(this, \"connectionState\", void 0);\n      _define_property(this, \"allowReconnect\", false);\n      _define_property(this, \"requestManager\", new _requestManager.RequestManager());\n      _define_property(this, \"activeConnection\", void 0);\n      _define_property(this, \"reconnectRetryDelay\", void 0);\n      _define_property(this, \"inactivityTimeout\", void 0);\n      _define_property(this, \"callbacks\", void 0);\n      _define_property(this, \"connectionParams\", void 0);\n      _define_property(this, \"lazyMode\", void 0);\n      /**\n      * Manages the reconnection process for the WebSocket using retry logic.\n      * Ensures that only one reconnection attempt is active at a time by tracking the current\n      * reconnection state in the `reconnecting` promise.\n      */\n      _define_property(this, \"reconnecting\", null);\n      // Initialize callbacks, connection parameters, and options.\n      this.callbacks = {\n        onOpen: opts.onOpen,\n        onClose: opts.onClose,\n        onError: opts.onError\n      };\n      this.connectionParams = opts.connectionParams;\n      var lazyOptions = {\n        ..._options.lazyDefaults,\n        ...opts.lazy\n      };\n      // Set up inactivity timeout for lazy connections.\n      this.inactivityTimeout = new _utils.ResettableTimeout(() => {\n        if (this.requestManager.hasOutgoingRequests() || this.requestManager.hasPendingRequests()) {\n          this.inactivityTimeout.reset();\n          return;\n        }\n        this.close().catch(() => null);\n      }, lazyOptions.closeMs);\n      // Initialize the WebSocket connection.\n      this.activeConnection = new _wsConnection.WsConnection({\n        WebSocketPonyfill: opts.WebSocket,\n        urlOptions: opts,\n        keepAlive: {\n          ..._options.keepAliveDefaults,\n          ...opts.keepAlive\n        }\n      });\n      this.activeConnection.wsObservable.subscribe({\n        next: ws => {\n          if (!ws) return;\n          this.setupWebSocketListeners(ws);\n        }\n      });\n      this.reconnectRetryDelay = opts.retryDelayMs ?? _options.exponentialBackoff;\n      this.lazyMode = lazyOptions.enabled;\n      this.connectionState = (0, _observable.behaviorSubject)({\n        type: 'state',\n        state: lazyOptions.enabled ? 'idle' : 'connecting',\n        error: null\n      });\n      // Automatically open the connection if lazy mode is disabled.\n      if (!this.lazyMode) {\n        this.open().catch(() => null);\n      }\n    }\n    return (0, _createClass2.default)(WsClient, [{\n      key: \"open\",\n      value: (\n      /**\n      * Opens the WebSocket connection. Handles reconnection attempts and updates\n      * the connection state accordingly.\n      */\n      function () {\n        var _open = (0, _asyncToGenerator2.default)(function* () {\n          this.allowReconnect = true;\n          if (this.connectionState.get().state !== 'connecting') {\n            this.connectionState.next({\n              type: 'state',\n              state: 'connecting',\n              error: null\n            });\n          }\n          try {\n            yield this.activeConnection.open();\n          } catch (error) {\n            this.reconnect(new _utils.TRPCWebSocketClosedError({\n              message: 'Initialization error',\n              cause: error\n            }));\n            return this.reconnecting;\n          }\n        });\n        function open() {\n          return _open.apply(this, arguments);\n        }\n        return open;\n      }()\n      /**\n      * Closes the WebSocket connection and stops managing requests.\n      * Ensures all outgoing and pending requests are properly finalized.\n      */\n      )\n    }, {\n      key: \"close\",\n      value: (function () {\n        var _close = (0, _asyncToGenerator2.default)(function* () {\n          this.allowReconnect = false;\n          this.inactivityTimeout.stop();\n          var requestsToAwait = [];\n          for (var request of this.requestManager.getRequests()) {\n            if (request.message.method === 'subscription') {\n              request.callbacks.complete();\n            } else if (request.state === 'outgoing') {\n              request.callbacks.error(_TRPCClientError.TRPCClientError.from(new _utils.TRPCWebSocketClosedError({\n                message: 'Closed before connection was established'\n              })));\n            } else {\n              requestsToAwait.push(request.end);\n            }\n          }\n          yield Promise.all(requestsToAwait).catch(() => null);\n          yield this.activeConnection.close().catch(() => null);\n          this.connectionState.next({\n            type: 'state',\n            state: 'idle',\n            error: null\n          });\n        });\n        function close() {\n          return _close.apply(this, arguments);\n        }\n        return close;\n      }()\n      /**\n      * Method to request the server.\n      * Handles data transformation, batching of requests, and subscription lifecycle.\n      *\n      * @param op - The operation details including id, type, path, input and signal\n      * @param transformer - Data transformer for serializing requests and deserializing responses\n      * @param lastEventId - Optional ID of the last received event for subscriptions\n      *\n      * @returns An observable that emits operation results and handles cleanup\n      */\n      )\n    }, {\n      key: \"request\",\n      value: function request(_ref) {\n        var _ref$op = _ref.op,\n          id = _ref$op.id,\n          type = _ref$op.type,\n          path = _ref$op.path,\n          input = _ref$op.input,\n          signal = _ref$op.signal,\n          transformer = _ref.transformer,\n          lastEventId = _ref.lastEventId;\n        return (0, _observable.observable)(observer => {\n          var abort = this.batchSend({\n            id,\n            method: type,\n            params: {\n              input: transformer.input.serialize(input),\n              path,\n              lastEventId\n            }\n          }, {\n            ...observer,\n            next(event) {\n              var transformed = (0, _unstableCoreDoNotImport.transformResult)(event, transformer.output);\n              if (!transformed.ok) {\n                observer.error(_TRPCClientError.TRPCClientError.from(transformed.error));\n                return;\n              }\n              observer.next({\n                result: transformed.result\n              });\n            }\n          });\n          return () => {\n            abort();\n            if (type === 'subscription' && this.activeConnection.isOpen()) {\n              this.send({\n                id,\n                method: 'subscription.stop'\n              });\n            }\n            signal?.removeEventListener('abort', abort);\n          };\n        });\n      }\n    }, {\n      key: \"connection\",\n      get: function () {\n        return (0, _wsConnection.backwardCompatibility)(this.activeConnection);\n      }\n    }, {\n      key: \"reconnect\",\n      value: function reconnect(closedError) {\n        var _this = this;\n        this.connectionState.next({\n          type: 'state',\n          state: 'connecting',\n          error: _TRPCClientError.TRPCClientError.from(closedError)\n        });\n        if (this.reconnecting) return;\n        var _tryReconnect = /*#__PURE__*/function () {\n          var _ref2 = (0, _asyncToGenerator2.default)(function* (attemptIndex) {\n            try {\n              yield (0, _unstableCoreDoNotImport.sleep)(_this.reconnectRetryDelay(attemptIndex));\n              if (_this.allowReconnect) {\n                yield _this.activeConnection.close();\n                yield _this.activeConnection.open();\n              }\n              _this.reconnecting = null;\n            } catch {\n              yield _tryReconnect(attemptIndex + 1);\n            }\n          });\n          return function tryReconnect(_x) {\n            return _ref2.apply(this, arguments);\n          };\n        }();\n        this.reconnecting = _tryReconnect(0);\n      }\n    }, {\n      key: \"setupWebSocketListeners\",\n      value: function setupWebSocketListeners(ws) {\n        var _this2 = this;\n        var handleCloseOrError = cause => {\n          var reqs = this.requestManager.getPendingRequests();\n          for (var _ref3 of reqs) {\n            var message = _ref3.message;\n            var callbacks = _ref3.callbacks;\n            if (message.method === 'subscription') continue;\n            callbacks.error(_TRPCClientError.TRPCClientError.from(cause ?? new _utils.TRPCWebSocketClosedError({\n              message: 'WebSocket closed',\n              cause\n            })));\n            this.requestManager.delete(message.id);\n          }\n        };\n        ws.addEventListener('open', () => {\n          (0, _unstableCoreDoNotImport.run)(/*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n            if (_this2.lazyMode) {\n              _this2.inactivityTimeout.start();\n            }\n            if (_this2.connectionParams) {\n              ws.send(yield (0, _utils.buildConnectionMessage)(_this2.connectionParams));\n            }\n            _this2.callbacks.onOpen?.();\n            _this2.connectionState.next({\n              type: 'state',\n              state: 'pending',\n              error: null\n            });\n            var messages = _this2.requestManager.getPendingRequests().map(_ref5 => {\n              var message = _ref5.message;\n              return message;\n            });\n            if (messages.length) {\n              ws.send(JSON.stringify(messages));\n            }\n          })).catch(error => {\n            ws.close(3000);\n            handleCloseOrError(error);\n          });\n        });\n        ws.addEventListener('message', _ref6 => {\n          var data = _ref6.data;\n          this.inactivityTimeout.reset();\n          if (typeof data !== 'string' || ['PING', 'PONG'].includes(data)) return;\n          var incomingMessage = JSON.parse(data);\n          if ('method' in incomingMessage) {\n            this.handleIncomingRequest(incomingMessage);\n            return;\n          }\n          this.handleResponseMessage(incomingMessage);\n        });\n        ws.addEventListener('close', event => {\n          handleCloseOrError(event);\n          this.callbacks.onClose?.(event);\n          if (!this.lazyMode) {\n            this.reconnect(new _utils.TRPCWebSocketClosedError({\n              message: 'WebSocket closed',\n              cause: event\n            }));\n          }\n        });\n        ws.addEventListener('error', event => {\n          handleCloseOrError(event);\n          this.callbacks.onError?.(event);\n          this.reconnect(new _utils.TRPCWebSocketClosedError({\n            message: 'WebSocket closed',\n            cause: event\n          }));\n        });\n      }\n    }, {\n      key: \"handleResponseMessage\",\n      value: function handleResponseMessage(message) {\n        var request = this.requestManager.getPendingRequest(message.id);\n        if (!request) return;\n        request.callbacks.next(message);\n        var completed = true;\n        if ('result' in message && request.message.method === 'subscription') {\n          if (message.result.type === 'data') {\n            request.message.params.lastEventId = message.result.id;\n          }\n          if (message.result.type !== 'stopped') {\n            completed = false;\n          }\n        }\n        if (completed) {\n          request.callbacks.complete();\n          this.requestManager.delete(message.id);\n        }\n      }\n    }, {\n      key: \"handleIncomingRequest\",\n      value: function handleIncomingRequest(message) {\n        if (message.method === 'reconnect') {\n          this.reconnect(new _utils.TRPCWebSocketClosedError({\n            message: 'Server requested reconnect'\n          }));\n        }\n      }\n      /**\n      * Sends a message or batch of messages directly to the server.\n      */\n    }, {\n      key: \"send\",\n      value: function send(messageOrMessages) {\n        if (!this.activeConnection.isOpen()) {\n          throw new Error('Active connection is not open');\n        }\n        var messages = messageOrMessages instanceof Array ? messageOrMessages : [messageOrMessages];\n        this.activeConnection.ws.send(JSON.stringify(messages.length === 1 ? messages[0] : messages));\n      }\n      /**\n      * Groups requests for batch sending.\n      *\n      * @returns A function to abort the batched request.\n      */\n    }, {\n      key: \"batchSend\",\n      value: function batchSend(message, callbacks) {\n        var _this3 = this;\n        this.inactivityTimeout.reset();\n        (0, _unstableCoreDoNotImport.run)(/*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n          if (!_this3.activeConnection.isOpen()) {\n            yield _this3.open();\n          }\n          yield (0, _unstableCoreDoNotImport.sleep)(0);\n          if (!_this3.requestManager.hasOutgoingRequests()) return;\n          _this3.send(_this3.requestManager.flush().map(_ref8 => {\n            var message = _ref8.message;\n            return message;\n          }));\n        })).catch(err => {\n          this.requestManager.delete(message.id);\n          callbacks.error(_TRPCClientError.TRPCClientError.from(err));\n        });\n        return this.requestManager.register(message, callbacks);\n      }\n    }]);\n  }();\n});","lineCount":401,"map":[[10,2,1,0],[10,6,1,0,"_observable"],[10,17,1,0],[10,20,1,0,"require"],[10,27,1,0],[10,28,1,0,"_dependencyMap"],[10,42,1,0],[11,2,2,0],[11,6,2,0,"_unstableCoreDoNotImport"],[11,30,2,0],[11,33,2,0,"require"],[11,40,2,0],[11,41,2,0,"_dependencyMap"],[11,55,2,0],[12,2,3,0],[12,6,3,0,"_TRPCClientError"],[12,22,3,0],[12,25,3,0,"require"],[12,32,3,0],[12,33,3,0,"_dependencyMap"],[12,47,3,0],[13,2,4,0],[13,6,4,0,"_options"],[13,14,4,0],[13,17,4,0,"require"],[13,24,4,0],[13,25,4,0,"_dependencyMap"],[13,39,4,0],[14,2,5,0],[14,6,5,0,"_requestManager"],[14,21,5,0],[14,24,5,0,"require"],[14,31,5,0],[14,32,5,0,"_dependencyMap"],[14,46,5,0],[15,2,6,0],[15,6,6,0,"_utils"],[15,12,6,0],[15,15,6,0,"require"],[15,22,6,0],[15,23,6,0,"_dependencyMap"],[15,37,6,0],[16,2,7,0],[16,6,7,0,"_wsConnection"],[16,19,7,0],[16,22,7,0,"require"],[16,29,7,0],[16,30,7,0,"_dependencyMap"],[16,44,7,0],[17,2,9,0],[17,11,9,9,"_define_property"],[17,27,9,25,"_define_property"],[17,28,9,26,"obj"],[17,31,9,29],[17,33,9,31,"key"],[17,36,9,34],[17,38,9,36,"value"],[17,43,9,41],[17,45,9,43],[18,4,10,4],[18,8,10,8,"key"],[18,11,10,11],[18,15,10,15,"obj"],[18,18,10,18],[18,20,10,20],[19,6,11,8,"Object"],[19,12,11,14],[19,13,11,15,"defineProperty"],[19,27,11,29],[19,28,11,30,"obj"],[19,31,11,33],[19,33,11,35,"key"],[19,36,11,38],[19,38,11,40],[20,8,12,12,"value"],[20,13,12,17],[20,15,12,19,"value"],[20,20,12,24],[21,8,13,12,"enumerable"],[21,18,13,22],[21,20,13,24],[21,24,13,28],[22,8,14,12,"configurable"],[22,20,14,24],[22,22,14,26],[22,26,14,30],[23,8,15,12,"writable"],[23,16,15,20],[23,18,15,22],[24,6,16,8],[24,7,16,9],[24,8,16,10],[25,4,17,4],[25,5,17,5],[25,11,17,11],[26,6,18,8,"obj"],[26,9,18,11],[26,10,18,12,"key"],[26,13,18,15],[26,14,18,16],[26,17,18,19,"value"],[26,22,18,24],[27,4,19,4],[28,4,20,4],[28,11,20,11,"obj"],[28,14,20,14],[29,2,21,0],[30,2,22,0],[31,0,23,0],[32,0,24,0],[33,0,25,0],[34,2,22,0],[34,6,25,10,"WsClient"],[34,14,25,18],[34,17,25,18,"exports"],[34,24,25,18],[34,25,25,18,"WsClient"],[34,33,25,18],[35,4,264,4],[35,13,264,4,"WsClient"],[35,22,264,16,"opts"],[35,26,264,20],[35,28,264,21],[36,6,264,21],[36,10,264,21,"_classCallCheck2"],[36,26,264,21],[36,27,264,21,"default"],[36,34,264,21],[36,42,264,21,"WsClient"],[36,50,264,21],[37,6,265,8],[38,0,266,0],[39,0,267,0],[40,6,267,6,"_define_property"],[40,22,267,22],[40,23,267,23],[40,27,267,27],[40,29,267,29],[40,46,267,46],[40,48,267,48],[40,53,267,53],[40,54,267,54],[40,55,267,55],[41,6,268,8,"_define_property"],[41,22,268,24],[41,23,268,25],[41,27,268,29],[41,29,268,31],[41,45,268,47],[41,47,268,49],[41,52,268,54],[41,53,268,55],[42,6,269,8,"_define_property"],[42,22,269,24],[42,23,269,25],[42,27,269,29],[42,29,269,31],[42,45,269,47],[42,47,269,49],[42,51,269,53,"RequestManager"],[42,81,269,67],[42,82,269,68],[42,83,269,69],[42,84,269,70],[43,6,270,8,"_define_property"],[43,22,270,24],[43,23,270,25],[43,27,270,29],[43,29,270,31],[43,47,270,49],[43,49,270,51],[43,54,270,56],[43,55,270,57],[43,56,270,58],[44,6,271,8,"_define_property"],[44,22,271,24],[44,23,271,25],[44,27,271,29],[44,29,271,31],[44,50,271,52],[44,52,271,54],[44,57,271,59],[44,58,271,60],[44,59,271,61],[45,6,272,8,"_define_property"],[45,22,272,24],[45,23,272,25],[45,27,272,29],[45,29,272,31],[45,48,272,50],[45,50,272,52],[45,55,272,57],[45,56,272,58],[45,57,272,59],[46,6,273,8,"_define_property"],[46,22,273,24],[46,23,273,25],[46,27,273,29],[46,29,273,31],[46,40,273,42],[46,42,273,44],[46,47,273,49],[46,48,273,50],[46,49,273,51],[47,6,274,8,"_define_property"],[47,22,274,24],[47,23,274,25],[47,27,274,29],[47,29,274,31],[47,47,274,49],[47,49,274,51],[47,54,274,56],[47,55,274,57],[47,56,274,58],[48,6,275,8,"_define_property"],[48,22,275,24],[48,23,275,25],[48,27,275,29],[48,29,275,31],[48,39,275,41],[48,41,275,43],[48,46,275,48],[48,47,275,49],[48,48,275,50],[49,6,276,8],[50,0,277,0],[51,0,278,0],[52,0,279,0],[53,0,280,0],[54,6,280,6,"_define_property"],[54,22,280,22],[54,23,280,23],[54,27,280,27],[54,29,280,29],[54,43,280,43],[54,45,280,45],[54,49,280,49],[54,50,280,50],[55,6,281,8],[56,6,282,8],[56,10,282,12],[56,11,282,13,"callbacks"],[56,20,282,22],[56,23,282,25],[57,8,283,12,"onOpen"],[57,14,283,18],[57,16,283,20,"opts"],[57,20,283,24],[57,21,283,25,"onOpen"],[57,27,283,31],[58,8,284,12,"onClose"],[58,15,284,19],[58,17,284,21,"opts"],[58,21,284,25],[58,22,284,26,"onClose"],[58,29,284,33],[59,8,285,12,"onError"],[59,15,285,19],[59,17,285,21,"opts"],[59,21,285,25],[59,22,285,26,"onError"],[60,6,286,8],[60,7,286,9],[61,6,287,8],[61,10,287,12],[61,11,287,13,"connectionParams"],[61,27,287,29],[61,30,287,32,"opts"],[61,34,287,36],[61,35,287,37,"connectionParams"],[61,51,287,53],[62,6,288,8],[62,10,288,14,"lazyOptions"],[62,21,288,25],[62,24,288,28],[63,8,289,12],[63,11,289,15,"lazyDefaults"],[63,32,289,27],[64,8,290,12],[64,11,290,15,"opts"],[64,15,290,19],[64,16,290,20,"lazy"],[65,6,291,8],[65,7,291,9],[66,6,292,8],[67,6,293,8],[67,10,293,12],[67,11,293,13,"inactivityTimeout"],[67,28,293,30],[67,31,293,33],[67,35,293,37,"ResettableTimeout"],[67,59,293,54],[67,60,293,55],[67,66,293,59],[68,8,294,12],[68,12,294,16],[68,16,294,20],[68,17,294,21,"requestManager"],[68,31,294,35],[68,32,294,36,"hasOutgoingRequests"],[68,51,294,55],[68,52,294,56],[68,53,294,57],[68,57,294,61],[68,61,294,65],[68,62,294,66,"requestManager"],[68,76,294,80],[68,77,294,81,"hasPendingRequests"],[68,95,294,99],[68,96,294,100],[68,97,294,101],[68,99,294,103],[69,10,295,16],[69,14,295,20],[69,15,295,21,"inactivityTimeout"],[69,32,295,38],[69,33,295,39,"reset"],[69,38,295,44],[69,39,295,45],[69,40,295,46],[70,10,296,16],[71,8,297,12],[72,8,298,12],[72,12,298,16],[72,13,298,17,"close"],[72,18,298,22],[72,19,298,23],[72,20,298,24],[72,21,298,25,"catch"],[72,26,298,30],[72,27,298,31],[72,33,298,35],[72,37,298,39],[72,38,298,40],[73,6,299,8],[73,7,299,9],[73,9,299,11,"lazyOptions"],[73,20,299,22],[73,21,299,23,"closeMs"],[73,28,299,30],[73,29,299,31],[74,6,300,8],[75,6,301,8],[75,10,301,12],[75,11,301,13,"activeConnection"],[75,27,301,29],[75,30,301,32],[75,34,301,36,"WsConnection"],[75,60,301,48],[75,61,301,49],[76,8,302,12,"WebSocketPonyfill"],[76,25,302,29],[76,27,302,31,"opts"],[76,31,302,35],[76,32,302,36,"WebSocket"],[76,41,302,45],[77,8,303,12,"urlOptions"],[77,18,303,22],[77,20,303,24,"opts"],[77,24,303,28],[78,8,304,12,"keepAlive"],[78,17,304,21],[78,19,304,23],[79,10,305,16],[79,13,305,19,"keepAliveDefaults"],[79,39,305,36],[80,10,306,16],[80,13,306,19,"opts"],[80,17,306,23],[80,18,306,24,"keepAlive"],[81,8,307,12],[82,6,308,8],[82,7,308,9],[82,8,308,10],[83,6,309,8],[83,10,309,12],[83,11,309,13,"activeConnection"],[83,27,309,29],[83,28,309,30,"wsObservable"],[83,40,309,42],[83,41,309,43,"subscribe"],[83,50,309,52],[83,51,309,53],[84,8,310,12,"next"],[84,12,310,16],[84,14,310,19,"ws"],[84,16,310,21],[84,20,310,24],[85,10,311,16],[85,14,311,20],[85,15,311,21,"ws"],[85,17,311,23],[85,19,311,25],[86,10,312,16],[86,14,312,20],[86,15,312,21,"setupWebSocketListeners"],[86,38,312,44],[86,39,312,45,"ws"],[86,41,312,47],[86,42,312,48],[87,8,313,12],[88,6,314,8],[88,7,314,9],[88,8,314,10],[89,6,315,8],[89,10,315,12],[89,11,315,13,"reconnectRetryDelay"],[89,30,315,32],[89,33,315,35,"opts"],[89,37,315,39],[89,38,315,40,"retryDelayMs"],[89,50,315,52],[89,54,315,56,"exponentialBackoff"],[89,81,315,74],[90,6,316,8],[90,10,316,12],[90,11,316,13,"lazyMode"],[90,19,316,21],[90,22,316,24,"lazyOptions"],[90,33,316,35],[90,34,316,36,"enabled"],[90,41,316,43],[91,6,317,8],[91,10,317,12],[91,11,317,13,"connectionState"],[91,26,317,28],[91,29,317,31],[91,33,317,31,"behaviorSubject"],[91,60,317,46],[91,62,317,47],[92,8,318,12,"type"],[92,12,318,16],[92,14,318,18],[92,21,318,25],[93,8,319,12,"state"],[93,13,319,17],[93,15,319,19,"lazyOptions"],[93,26,319,30],[93,27,319,31,"enabled"],[93,34,319,38],[93,37,319,41],[93,43,319,47],[93,46,319,50],[93,58,319,62],[94,8,320,12,"error"],[94,13,320,17],[94,15,320,19],[95,6,321,8],[95,7,321,9],[95,8,321,10],[96,6,322,8],[97,6,323,8],[97,10,323,12],[97,11,323,13],[97,15,323,17],[97,16,323,18,"lazyMode"],[97,24,323,26],[97,26,323,28],[98,8,324,12],[98,12,324,16],[98,13,324,17,"open"],[98,17,324,21],[98,18,324,22],[98,19,324,23],[98,20,324,24,"catch"],[98,25,324,29],[98,26,324,30],[98,32,324,34],[98,36,324,38],[98,37,324,39],[99,6,325,8],[100,4,326,4],[101,4,326,5],[101,15,326,5,"_createClass2"],[101,28,326,5],[101,29,326,5,"default"],[101,36,326,5],[101,38,326,5,"WsClient"],[101,46,326,5],[102,6,326,5,"key"],[102,9,326,5],[103,6,326,5,"value"],[103,11,326,5],[104,6,26,4],[105,0,27,0],[106,0,28,0],[107,0,29,0],[108,6,26,4],[109,8,26,4],[109,12,26,4,"_open"],[109,17,26,4],[109,24,26,4,"_asyncToGenerator2"],[109,42,26,4],[109,43,26,4,"default"],[109,50,26,4],[109,52,29,6],[109,65,29,19],[110,10,30,8],[110,14,30,12],[110,15,30,13,"allowReconnect"],[110,29,30,27],[110,32,30,30],[110,36,30,34],[111,10,31,8],[111,14,31,12],[111,18,31,16],[111,19,31,17,"connectionState"],[111,34,31,32],[111,35,31,33,"get"],[111,38,31,36],[111,39,31,37],[111,40,31,38],[111,41,31,39,"state"],[111,46,31,44],[111,51,31,49],[111,63,31,61],[111,65,31,63],[112,12,32,12],[112,16,32,16],[112,17,32,17,"connectionState"],[112,32,32,32],[112,33,32,33,"next"],[112,37,32,37],[112,38,32,38],[113,14,33,16,"type"],[113,18,33,20],[113,20,33,22],[113,27,33,29],[114,14,34,16,"state"],[114,19,34,21],[114,21,34,23],[114,33,34,35],[115,14,35,16,"error"],[115,19,35,21],[115,21,35,23],[116,12,36,12],[116,13,36,13],[116,14,36,14],[117,10,37,8],[118,10,38,8],[118,14,38,12],[119,12,39,12],[119,18,39,18],[119,22,39,22],[119,23,39,23,"activeConnection"],[119,39,39,39],[119,40,39,40,"open"],[119,44,39,44],[119,45,39,45],[119,46,39,46],[120,10,40,8],[120,11,40,9],[120,12,40,10],[120,19,40,17,"error"],[120,24,40,22],[120,26,40,24],[121,12,41,12],[121,16,41,16],[121,17,41,17,"reconnect"],[121,26,41,26],[121,27,41,27],[121,31,41,31,"TRPCWebSocketClosedError"],[121,62,41,55],[121,63,41,56],[122,14,42,16,"message"],[122,21,42,23],[122,23,42,25],[122,45,42,47],[123,14,43,16,"cause"],[123,19,43,21],[123,21,43,23,"error"],[124,12,44,12],[124,13,44,13],[124,14,44,14],[124,15,44,15],[125,12,45,12],[125,19,45,19],[125,23,45,23],[125,24,45,24,"reconnecting"],[125,36,45,36],[126,10,46,8],[127,8,47,4],[127,9,47,5],[128,8,47,5],[128,17,29,12,"open"],[128,21,29,16,"open"],[128,22,29,16],[129,10,29,16],[129,17,29,16,"_open"],[129,22,29,16],[129,23,29,16,"apply"],[129,28,29,16],[129,35,29,16,"arguments"],[129,44,29,16],[130,8,29,16],[131,8,29,16],[131,15,29,12,"open"],[131,19,29,16],[132,6,29,16],[133,6,48,4],[134,0,49,0],[135,0,50,0],[136,0,51,0],[137,6,48,4],[138,4,48,4],[139,6,48,4,"key"],[139,9,48,4],[140,6,48,4,"value"],[140,11,48,4],[141,8,48,4],[141,12,48,4,"_close"],[141,18,48,4],[141,25,48,4,"_asyncToGenerator2"],[141,43,48,4],[141,44,48,4,"default"],[141,51,48,4],[141,53,51,6],[141,66,51,20],[142,10,52,8],[142,14,52,12],[142,15,52,13,"allowReconnect"],[142,29,52,27],[142,32,52,30],[142,37,52,35],[143,10,53,8],[143,14,53,12],[143,15,53,13,"inactivityTimeout"],[143,32,53,30],[143,33,53,31,"stop"],[143,37,53,35],[143,38,53,36],[143,39,53,37],[144,10,54,8],[144,14,54,14,"requestsToAwait"],[144,29,54,29],[144,32,54,32],[144,34,54,34],[145,10,55,8],[145,15,55,13],[145,19,55,19,"request"],[145,26,55,26],[145,30,55,30],[145,34,55,34],[145,35,55,35,"requestManager"],[145,49,55,49],[145,50,55,50,"getRequests"],[145,61,55,61],[145,62,55,62],[145,63,55,63],[145,65,55,64],[146,12,56,12],[146,16,56,16,"request"],[146,23,56,23],[146,24,56,24,"message"],[146,31,56,31],[146,32,56,32,"method"],[146,38,56,38],[146,43,56,43],[146,57,56,57],[146,59,56,59],[147,14,57,16,"request"],[147,21,57,23],[147,22,57,24,"callbacks"],[147,31,57,33],[147,32,57,34,"complete"],[147,40,57,42],[147,41,57,43],[147,42,57,44],[148,12,58,12],[148,13,58,13],[148,19,58,19],[148,23,58,23,"request"],[148,30,58,30],[148,31,58,31,"state"],[148,36,58,36],[148,41,58,41],[148,51,58,51],[148,53,58,53],[149,14,59,16,"request"],[149,21,59,23],[149,22,59,24,"callbacks"],[149,31,59,33],[149,32,59,34,"error"],[149,37,59,39],[149,38,59,40,"TRPCClientError"],[149,70,59,55],[149,71,59,56,"from"],[149,75,59,60],[149,76,59,61],[149,80,59,65,"TRPCWebSocketClosedError"],[149,111,59,89],[149,112,59,90],[150,16,60,20,"message"],[150,23,60,27],[150,25,60,29],[151,14,61,16],[151,15,61,17],[151,16,61,18],[151,17,61,19],[151,18,61,20],[152,12,62,12],[152,13,62,13],[152,19,62,19],[153,14,63,16,"requestsToAwait"],[153,29,63,31],[153,30,63,32,"push"],[153,34,63,36],[153,35,63,37,"request"],[153,42,63,44],[153,43,63,45,"end"],[153,46,63,48],[153,47,63,49],[154,12,64,12],[155,10,65,8],[156,10,66,8],[156,16,66,14,"Promise"],[156,23,66,21],[156,24,66,22,"all"],[156,27,66,25],[156,28,66,26,"requestsToAwait"],[156,43,66,41],[156,44,66,42],[156,45,66,43,"catch"],[156,50,66,48],[156,51,66,49],[156,57,66,53],[156,61,66,57],[156,62,66,58],[157,10,67,8],[157,16,67,14],[157,20,67,18],[157,21,67,19,"activeConnection"],[157,37,67,35],[157,38,67,36,"close"],[157,43,67,41],[157,44,67,42],[157,45,67,43],[157,46,67,44,"catch"],[157,51,67,49],[157,52,67,50],[157,58,67,54],[157,62,67,58],[157,63,67,59],[158,10,68,8],[158,14,68,12],[158,15,68,13,"connectionState"],[158,30,68,28],[158,31,68,29,"next"],[158,35,68,33],[158,36,68,34],[159,12,69,12,"type"],[159,16,69,16],[159,18,69,18],[159,25,69,25],[160,12,70,12,"state"],[160,17,70,17],[160,19,70,19],[160,25,70,25],[161,12,71,12,"error"],[161,17,71,17],[161,19,71,19],[162,10,72,8],[162,11,72,9],[162,12,72,10],[163,8,73,4],[163,9,73,5],[164,8,73,5],[164,17,51,12,"close"],[164,22,51,17,"close"],[164,23,51,17],[165,10,51,17],[165,17,51,17,"_close"],[165,23,51,17],[165,24,51,17,"apply"],[165,29,51,17],[165,36,51,17,"arguments"],[165,45,51,17],[166,8,51,17],[167,8,51,17],[167,15,51,12,"close"],[167,20,51,17],[168,6,51,17],[169,6,74,4],[170,0,75,0],[171,0,76,0],[172,0,77,0],[173,0,78,0],[174,0,79,0],[175,0,80,0],[176,0,81,0],[177,0,82,0],[178,0,83,0],[179,6,74,4],[180,4,74,4],[181,6,74,4,"key"],[181,9,74,4],[182,6,74,4,"value"],[182,11,74,4],[182,13,83,6],[182,22,83,6,"request"],[182,29,83,13,"request"],[182,30,83,13,"_ref"],[182,34,83,13],[182,36,83,83],[183,8,83,83],[183,12,83,83,"_ref$op"],[183,19,83,83],[183,22,83,83,"_ref"],[183,26,83,83],[183,27,83,16,"op"],[183,29,83,18],[184,10,83,22,"id"],[184,12,83,24],[184,15,83,24,"_ref$op"],[184,22,83,24],[184,23,83,22,"id"],[184,25,83,24],[185,10,83,26,"type"],[185,14,83,30],[185,17,83,30,"_ref$op"],[185,24,83,30],[185,25,83,26,"type"],[185,29,83,30],[186,10,83,32,"path"],[186,14,83,36],[186,17,83,36,"_ref$op"],[186,24,83,36],[186,25,83,32,"path"],[186,29,83,36],[187,10,83,38,"input"],[187,15,83,43],[187,18,83,43,"_ref$op"],[187,25,83,43],[187,26,83,38,"input"],[187,31,83,43],[188,10,83,45,"signal"],[188,16,83,51],[188,19,83,51,"_ref$op"],[188,26,83,51],[188,27,83,45,"signal"],[188,33,83,51],[189,10,83,55,"transformer"],[189,21,83,66],[189,24,83,66,"_ref"],[189,28,83,66],[189,29,83,55,"transformer"],[189,40,83,66],[190,10,83,68,"lastEventId"],[190,21,83,79],[190,24,83,79,"_ref"],[190,28,83,79],[190,29,83,68,"lastEventId"],[190,40,83,79],[191,8,84,8],[191,15,84,15],[191,19,84,15,"observable"],[191,41,84,25],[191,43,84,27,"observer"],[191,51,84,35],[191,55,84,38],[192,10,85,12],[192,14,85,18,"abort"],[192,19,85,23],[192,22,85,26],[192,26,85,30],[192,27,85,31,"batchSend"],[192,36,85,40],[192,37,85,41],[193,12,86,16,"id"],[193,14,86,18],[194,12,87,16,"method"],[194,18,87,22],[194,20,87,24,"type"],[194,24,87,28],[195,12,88,16,"params"],[195,18,88,22],[195,20,88,24],[196,14,89,20,"input"],[196,19,89,25],[196,21,89,27,"transformer"],[196,32,89,38],[196,33,89,39,"input"],[196,38,89,44],[196,39,89,45,"serialize"],[196,48,89,54],[196,49,89,55,"input"],[196,54,89,60],[196,55,89,61],[197,14,90,20,"path"],[197,18,90,24],[198,14,91,20,"lastEventId"],[199,12,92,16],[200,10,93,12],[200,11,93,13],[200,13,93,15],[201,12,94,16],[201,15,94,19,"observer"],[201,23,94,27],[202,12,95,16,"next"],[202,16,95,20,"next"],[202,17,95,22,"event"],[202,22,95,27],[202,24,95,29],[203,14,96,20],[203,18,96,26,"transformed"],[203,29,96,37],[203,32,96,40],[203,36,96,40,"transformResult"],[203,76,96,55],[203,78,96,56,"event"],[203,83,96,61],[203,85,96,63,"transformer"],[203,96,96,74],[203,97,96,75,"output"],[203,103,96,81],[203,104,96,82],[204,14,97,20],[204,18,97,24],[204,19,97,25,"transformed"],[204,30,97,36],[204,31,97,37,"ok"],[204,33,97,39],[204,35,97,41],[205,16,98,24,"observer"],[205,24,98,32],[205,25,98,33,"error"],[205,30,98,38],[205,31,98,39,"TRPCClientError"],[205,63,98,54],[205,64,98,55,"from"],[205,68,98,59],[205,69,98,60,"transformed"],[205,80,98,71],[205,81,98,72,"error"],[205,86,98,77],[205,87,98,78],[205,88,98,79],[206,16,99,24],[207,14,100,20],[208,14,101,20,"observer"],[208,22,101,28],[208,23,101,29,"next"],[208,27,101,33],[208,28,101,34],[209,16,102,24,"result"],[209,22,102,30],[209,24,102,32,"transformed"],[209,35,102,43],[209,36,102,44,"result"],[210,14,103,20],[210,15,103,21],[210,16,103,22],[211,12,104,16],[212,10,105,12],[212,11,105,13],[212,12,105,14],[213,10,106,12],[213,17,106,19],[213,23,106,23],[214,12,107,16,"abort"],[214,17,107,21],[214,18,107,22],[214,19,107,23],[215,12,108,16],[215,16,108,20,"type"],[215,20,108,24],[215,25,108,29],[215,39,108,43],[215,43,108,47],[215,47,108,51],[215,48,108,52,"activeConnection"],[215,64,108,68],[215,65,108,69,"isOpen"],[215,71,108,75],[215,72,108,76],[215,73,108,77],[215,75,108,79],[216,14,109,20],[216,18,109,24],[216,19,109,25,"send"],[216,23,109,29],[216,24,109,30],[217,16,110,24,"id"],[217,18,110,26],[218,16,111,24,"method"],[218,22,111,30],[218,24,111,32],[219,14,112,20],[219,15,112,21],[219,16,112,22],[220,12,113,16],[221,12,114,16,"signal"],[221,18,114,22],[221,20,114,24,"removeEventListener"],[221,39,114,43],[221,40,114,44],[221,47,114,51],[221,49,114,53,"abort"],[221,54,114,58],[221,55,114,59],[222,10,115,12],[222,11,115,13],[223,8,116,8],[223,9,116,9],[223,10,116,10],[224,6,117,4],[225,4,117,5],[226,6,117,5,"key"],[226,9,117,5],[227,6,117,5,"get"],[227,9,117,5],[227,11,118,4],[227,20,118,4,"get"],[227,21,118,4],[227,23,118,21],[228,8,119,8],[228,15,119,15],[228,19,119,15,"backwardCompatibility"],[228,54,119,36],[228,56,119,37],[228,60,119,41],[228,61,119,42,"activeConnection"],[228,77,119,58],[228,78,119,59],[229,6,120,4],[230,4,120,5],[231,6,120,5,"key"],[231,9,120,5],[232,6,120,5,"value"],[232,11,120,5],[232,13,121,4],[232,22,121,4,"reconnect"],[232,31,121,13,"reconnect"],[232,32,121,14,"closedError"],[232,43,121,25],[232,45,121,27],[233,8,121,27],[233,12,121,27,"_this"],[233,17,121,27],[234,8,122,8],[234,12,122,12],[234,13,122,13,"connectionState"],[234,28,122,28],[234,29,122,29,"next"],[234,33,122,33],[234,34,122,34],[235,10,123,12,"type"],[235,14,123,16],[235,16,123,18],[235,23,123,25],[236,10,124,12,"state"],[236,15,124,17],[236,17,124,19],[236,29,124,31],[237,10,125,12,"error"],[237,15,125,17],[237,17,125,19,"TRPCClientError"],[237,49,125,34],[237,50,125,35,"from"],[237,54,125,39],[237,55,125,40,"closedError"],[237,66,125,51],[238,8,126,8],[238,9,126,9],[238,10,126,10],[239,8,127,8],[239,12,127,12],[239,16,127,16],[239,17,127,17,"reconnecting"],[239,29,127,29],[239,31,127,31],[240,8,128,8],[240,12,128,14,"tryReconnect"],[240,25,128,26],[241,10,128,26],[241,14,128,26,"_ref2"],[241,19,128,26],[241,26,128,26,"_asyncToGenerator2"],[241,44,128,26],[241,45,128,26,"default"],[241,52,128,26],[241,54,128,29],[241,65,128,36,"attemptIndex"],[241,77,128,48],[241,79,128,51],[242,12,129,12],[242,16,129,16],[243,14,130,16],[243,20,130,22],[243,24,130,22,"sleep"],[243,54,130,27],[243,56,130,28,"_this"],[243,61,130,32],[243,62,130,33,"reconnectRetryDelay"],[243,81,130,52],[243,82,130,53,"attemptIndex"],[243,94,130,65],[243,95,130,66],[243,96,130,67],[244,14,131,16],[244,18,131,20,"_this"],[244,23,131,24],[244,24,131,25,"allowReconnect"],[244,38,131,39],[244,40,131,41],[245,16,132,20],[245,22,132,26,"_this"],[245,27,132,30],[245,28,132,31,"activeConnection"],[245,44,132,47],[245,45,132,48,"close"],[245,50,132,53],[245,51,132,54],[245,52,132,55],[246,16,133,20],[246,22,133,26,"_this"],[246,27,133,30],[246,28,133,31,"activeConnection"],[246,44,133,47],[246,45,133,48,"open"],[246,49,133,52],[246,50,133,53],[246,51,133,54],[247,14,134,16],[248,14,135,16,"_this"],[248,19,135,20],[248,20,135,21,"reconnecting"],[248,32,135,33],[248,35,135,36],[248,39,135,40],[249,12,136,12],[249,13,136,13],[249,14,136,14],[249,20,136,21],[250,14,137,16],[250,20,137,22,"tryReconnect"],[250,33,137,34],[250,34,137,35,"attemptIndex"],[250,46,137,47],[250,49,137,50],[250,50,137,51],[250,51,137,52],[251,12,138,12],[252,10,139,8],[252,11,139,9],[253,10,139,9],[253,26,128,14,"tryReconnect"],[253,38,128,26,"tryReconnect"],[253,39,128,26,"_x"],[253,41,128,26],[254,12,128,26],[254,19,128,26,"_ref2"],[254,24,128,26],[254,25,128,26,"apply"],[254,30,128,26],[254,37,128,26,"arguments"],[254,46,128,26],[255,10,128,26],[256,8,128,26],[256,11,139,9],[257,8,140,8],[257,12,140,12],[257,13,140,13,"reconnecting"],[257,25,140,25],[257,28,140,28,"tryReconnect"],[257,41,140,40],[257,42,140,41],[257,43,140,42],[257,44,140,43],[258,6,141,4],[259,4,141,5],[260,6,141,5,"key"],[260,9,141,5],[261,6,141,5,"value"],[261,11,141,5],[261,13,142,4],[261,22,142,4,"setupWebSocketListeners"],[261,45,142,27,"setupWebSocketListeners"],[261,46,142,28,"ws"],[261,48,142,30],[261,50,142,32],[262,8,142,32],[262,12,142,32,"_this2"],[262,18,142,32],[263,8,143,8],[263,12,143,14,"handleCloseOrError"],[263,30,143,32],[263,33,143,36,"cause"],[263,38,143,41],[263,42,143,44],[264,10,144,12],[264,14,144,18,"reqs"],[264,18,144,22],[264,21,144,25],[264,25,144,29],[264,26,144,30,"requestManager"],[264,40,144,44],[264,41,144,45,"getPendingRequests"],[264,59,144,63],[264,60,144,64],[264,61,144,65],[265,10,145,12],[265,19,145,12,"_ref3"],[265,24,145,12],[265,28,145,49,"reqs"],[265,32,145,53],[265,34,145,54],[266,12,145,54],[266,16,145,25,"message"],[266,23,145,32],[266,26,145,32,"_ref3"],[266,31,145,32],[266,32,145,25,"message"],[266,39,145,32],[267,12,145,32],[267,16,145,34,"callbacks"],[267,25,145,43],[267,28,145,43,"_ref3"],[267,33,145,43],[267,34,145,34,"callbacks"],[267,43,145,43],[268,12,146,16],[268,16,146,20,"message"],[268,23,146,27],[268,24,146,28,"method"],[268,30,146,34],[268,35,146,39],[268,49,146,53],[268,51,146,55],[269,12,147,16,"callbacks"],[269,21,147,25],[269,22,147,26,"error"],[269,27,147,31],[269,28,147,32,"TRPCClientError"],[269,60,147,47],[269,61,147,48,"from"],[269,65,147,52],[269,66,147,53,"cause"],[269,71,147,58],[269,75,147,62],[269,79,147,66,"TRPCWebSocketClosedError"],[269,110,147,90],[269,111,147,91],[270,14,148,20,"message"],[270,21,148,27],[270,23,148,29],[270,41,148,47],[271,14,149,20,"cause"],[272,12,150,16],[272,13,150,17],[272,14,150,18],[272,15,150,19],[272,16,150,20],[273,12,151,16],[273,16,151,20],[273,17,151,21,"requestManager"],[273,31,151,35],[273,32,151,36,"delete"],[273,38,151,42],[273,39,151,43,"message"],[273,46,151,50],[273,47,151,51,"id"],[273,49,151,53],[273,50,151,54],[274,10,152,12],[275,8,153,8],[275,9,153,9],[276,8,154,8,"ws"],[276,10,154,10],[276,11,154,11,"addEventListener"],[276,27,154,27],[276,28,154,28],[276,34,154,34],[276,36,154,36],[276,42,154,40],[277,10,155,12],[277,14,155,12,"run"],[277,42,155,15],[277,61,155,15,"_asyncToGenerator2"],[277,79,155,15],[277,80,155,15,"default"],[277,87,155,15],[277,89,155,16],[277,102,155,26],[278,12,156,16],[278,16,156,20,"_this2"],[278,22,156,24],[278,23,156,25,"lazyMode"],[278,31,156,33],[278,33,156,35],[279,14,157,20,"_this2"],[279,20,157,24],[279,21,157,25,"inactivityTimeout"],[279,38,157,42],[279,39,157,43,"start"],[279,44,157,48],[279,45,157,49],[279,46,157,50],[280,12,158,16],[281,12,159,16],[281,16,159,20,"_this2"],[281,22,159,24],[281,23,159,25,"connectionParams"],[281,39,159,41],[281,41,159,43],[282,14,160,20,"ws"],[282,16,160,22],[282,17,160,23,"send"],[282,21,160,27],[282,28,160,34],[282,32,160,34,"buildConnectionMessage"],[282,61,160,56],[282,63,160,57,"_this2"],[282,69,160,61],[282,70,160,62,"connectionParams"],[282,86,160,78],[282,87,160,79],[282,88,160,80],[283,12,161,16],[284,12,162,16,"_this2"],[284,18,162,20],[284,19,162,21,"callbacks"],[284,28,162,30],[284,29,162,31,"onOpen"],[284,35,162,37],[284,38,162,40],[284,39,162,41],[285,12,163,16,"_this2"],[285,18,163,20],[285,19,163,21,"connectionState"],[285,34,163,36],[285,35,163,37,"next"],[285,39,163,41],[285,40,163,42],[286,14,164,20,"type"],[286,18,164,24],[286,20,164,26],[286,27,164,33],[287,14,165,20,"state"],[287,19,165,25],[287,21,165,27],[287,30,165,36],[288,14,166,20,"error"],[288,19,166,25],[288,21,166,27],[289,12,167,16],[289,13,167,17],[289,14,167,18],[290,12,168,16],[290,16,168,22,"messages"],[290,24,168,30],[290,27,168,33,"_this2"],[290,33,168,37],[290,34,168,38,"requestManager"],[290,48,168,52],[290,49,168,53,"getPendingRequests"],[290,67,168,71],[290,68,168,72],[290,69,168,73],[290,70,168,74,"map"],[290,73,168,77],[290,74,168,78,"_ref5"],[290,79,168,78],[291,14,168,78],[291,18,168,81,"message"],[291,25,168,88],[291,28,168,88,"_ref5"],[291,33,168,88],[291,34,168,81,"message"],[291,41,168,88],[292,14,168,88],[292,21,168,93,"message"],[292,28,168,100],[293,12,168,100],[293,14,168,101],[294,12,169,16],[294,16,169,20,"messages"],[294,24,169,28],[294,25,169,29,"length"],[294,31,169,35],[294,33,169,37],[295,14,170,20,"ws"],[295,16,170,22],[295,17,170,23,"send"],[295,21,170,27],[295,22,170,28,"JSON"],[295,26,170,32],[295,27,170,33,"stringify"],[295,36,170,42],[295,37,170,43,"messages"],[295,45,170,51],[295,46,170,52],[295,47,170,53],[296,12,171,16],[297,10,172,12],[297,11,172,13],[297,13,172,14],[297,14,172,15,"catch"],[297,19,172,20],[297,20,172,22,"error"],[297,25,172,27],[297,29,172,30],[298,12,173,16,"ws"],[298,14,173,18],[298,15,173,19,"close"],[298,20,173,24],[298,21,173,25],[298,25,173,29],[298,26,173,30],[299,12,174,16,"handleCloseOrError"],[299,30,174,34],[299,31,174,35,"error"],[299,36,174,40],[299,37,174,41],[300,10,175,12],[300,11,175,13],[300,12,175,14],[301,8,176,8],[301,9,176,9],[301,10,176,10],[302,8,177,8,"ws"],[302,10,177,10],[302,11,177,11,"addEventListener"],[302,27,177,27],[302,28,177,28],[302,37,177,37],[302,39,177,39,"_ref6"],[302,44,177,39],[302,48,177,51],[303,10,177,51],[303,14,177,42,"data"],[303,18,177,46],[303,21,177,46,"_ref6"],[303,26,177,46],[303,27,177,42,"data"],[303,31,177,46],[304,10,178,12],[304,14,178,16],[304,15,178,17,"inactivityTimeout"],[304,32,178,34],[304,33,178,35,"reset"],[304,38,178,40],[304,39,178,41],[304,40,178,42],[305,10,179,12],[305,14,179,16],[305,21,179,23,"data"],[305,25,179,27],[305,30,179,32],[305,38,179,40],[305,42,179,44],[305,43,180,16],[305,49,180,22],[305,51,181,16],[305,57,181,22],[305,58,182,13],[305,59,182,14,"includes"],[305,67,182,22],[305,68,182,23,"data"],[305,72,182,27],[305,73,182,28],[305,75,182,30],[306,10,183,12],[306,14,183,18,"incomingMessage"],[306,29,183,33],[306,32,183,36,"JSON"],[306,36,183,40],[306,37,183,41,"parse"],[306,42,183,46],[306,43,183,47,"data"],[306,47,183,51],[306,48,183,52],[307,10,184,12],[307,14,184,16],[307,22,184,24],[307,26,184,28,"incomingMessage"],[307,41,184,43],[307,43,184,45],[308,12,185,16],[308,16,185,20],[308,17,185,21,"handleIncomingRequest"],[308,38,185,42],[308,39,185,43,"incomingMessage"],[308,54,185,58],[308,55,185,59],[309,12,186,16],[310,10,187,12],[311,10,188,12],[311,14,188,16],[311,15,188,17,"handleResponseMessage"],[311,36,188,38],[311,37,188,39,"incomingMessage"],[311,52,188,54],[311,53,188,55],[312,8,189,8],[312,9,189,9],[312,10,189,10],[313,8,190,8,"ws"],[313,10,190,10],[313,11,190,11,"addEventListener"],[313,27,190,27],[313,28,190,28],[313,35,190,35],[313,37,190,38,"event"],[313,42,190,43],[313,46,190,46],[314,10,191,12,"handleCloseOrError"],[314,28,191,30],[314,29,191,31,"event"],[314,34,191,36],[314,35,191,37],[315,10,192,12],[315,14,192,16],[315,15,192,17,"callbacks"],[315,24,192,26],[315,25,192,27,"onClose"],[315,32,192,34],[315,35,192,37,"event"],[315,40,192,42],[315,41,192,43],[316,10,193,12],[316,14,193,16],[316,15,193,17],[316,19,193,21],[316,20,193,22,"lazyMode"],[316,28,193,30],[316,30,193,32],[317,12,194,16],[317,16,194,20],[317,17,194,21,"reconnect"],[317,26,194,30],[317,27,194,31],[317,31,194,35,"TRPCWebSocketClosedError"],[317,62,194,59],[317,63,194,60],[318,14,195,20,"message"],[318,21,195,27],[318,23,195,29],[318,41,195,47],[319,14,196,20,"cause"],[319,19,196,25],[319,21,196,27,"event"],[320,12,197,16],[320,13,197,17],[320,14,197,18],[320,15,197,19],[321,10,198,12],[322,8,199,8],[322,9,199,9],[322,10,199,10],[323,8,200,8,"ws"],[323,10,200,10],[323,11,200,11,"addEventListener"],[323,27,200,27],[323,28,200,28],[323,35,200,35],[323,37,200,38,"event"],[323,42,200,43],[323,46,200,46],[324,10,201,12,"handleCloseOrError"],[324,28,201,30],[324,29,201,31,"event"],[324,34,201,36],[324,35,201,37],[325,10,202,12],[325,14,202,16],[325,15,202,17,"callbacks"],[325,24,202,26],[325,25,202,27,"onError"],[325,32,202,34],[325,35,202,37,"event"],[325,40,202,42],[325,41,202,43],[326,10,203,12],[326,14,203,16],[326,15,203,17,"reconnect"],[326,24,203,26],[326,25,203,27],[326,29,203,31,"TRPCWebSocketClosedError"],[326,60,203,55],[326,61,203,56],[327,12,204,16,"message"],[327,19,204,23],[327,21,204,25],[327,39,204,43],[328,12,205,16,"cause"],[328,17,205,21],[328,19,205,23,"event"],[329,10,206,12],[329,11,206,13],[329,12,206,14],[329,13,206,15],[330,8,207,8],[330,9,207,9],[330,10,207,10],[331,6,208,4],[332,4,208,5],[333,6,208,5,"key"],[333,9,208,5],[334,6,208,5,"value"],[334,11,208,5],[334,13,209,4],[334,22,209,4,"handleResponseMessage"],[334,43,209,25,"handleResponseMessage"],[334,44,209,26,"message"],[334,51,209,33],[334,53,209,35],[335,8,210,8],[335,12,210,14,"request"],[335,19,210,21],[335,22,210,24],[335,26,210,28],[335,27,210,29,"requestManager"],[335,41,210,43],[335,42,210,44,"getPendingRequest"],[335,59,210,61],[335,60,210,62,"message"],[335,67,210,69],[335,68,210,70,"id"],[335,70,210,72],[335,71,210,73],[336,8,211,8],[336,12,211,12],[336,13,211,13,"request"],[336,20,211,20],[336,22,211,22],[337,8,212,8,"request"],[337,15,212,15],[337,16,212,16,"callbacks"],[337,25,212,25],[337,26,212,26,"next"],[337,30,212,30],[337,31,212,31,"message"],[337,38,212,38],[337,39,212,39],[338,8,213,8],[338,12,213,12,"completed"],[338,21,213,21],[338,24,213,24],[338,28,213,28],[339,8,214,8],[339,12,214,12],[339,20,214,20],[339,24,214,24,"message"],[339,31,214,31],[339,35,214,35,"request"],[339,42,214,42],[339,43,214,43,"message"],[339,50,214,50],[339,51,214,51,"method"],[339,57,214,57],[339,62,214,62],[339,76,214,76],[339,78,214,78],[340,10,215,12],[340,14,215,16,"message"],[340,21,215,23],[340,22,215,24,"result"],[340,28,215,30],[340,29,215,31,"type"],[340,33,215,35],[340,38,215,40],[340,44,215,46],[340,46,215,48],[341,12,216,16,"request"],[341,19,216,23],[341,20,216,24,"message"],[341,27,216,31],[341,28,216,32,"params"],[341,34,216,38],[341,35,216,39,"lastEventId"],[341,46,216,50],[341,49,216,53,"message"],[341,56,216,60],[341,57,216,61,"result"],[341,63,216,67],[341,64,216,68,"id"],[341,66,216,70],[342,10,217,12],[343,10,218,12],[343,14,218,16,"message"],[343,21,218,23],[343,22,218,24,"result"],[343,28,218,30],[343,29,218,31,"type"],[343,33,218,35],[343,38,218,40],[343,47,218,49],[343,49,218,51],[344,12,219,16,"completed"],[344,21,219,25],[344,24,219,28],[344,29,219,33],[345,10,220,12],[346,8,221,8],[347,8,222,8],[347,12,222,12,"completed"],[347,21,222,21],[347,23,222,23],[348,10,223,12,"request"],[348,17,223,19],[348,18,223,20,"callbacks"],[348,27,223,29],[348,28,223,30,"complete"],[348,36,223,38],[348,37,223,39],[348,38,223,40],[349,10,224,12],[349,14,224,16],[349,15,224,17,"requestManager"],[349,29,224,31],[349,30,224,32,"delete"],[349,36,224,38],[349,37,224,39,"message"],[349,44,224,46],[349,45,224,47,"id"],[349,47,224,49],[349,48,224,50],[350,8,225,8],[351,6,226,4],[352,4,226,5],[353,6,226,5,"key"],[353,9,226,5],[354,6,226,5,"value"],[354,11,226,5],[354,13,227,4],[354,22,227,4,"handleIncomingRequest"],[354,43,227,25,"handleIncomingRequest"],[354,44,227,26,"message"],[354,51,227,33],[354,53,227,35],[355,8,228,8],[355,12,228,12,"message"],[355,19,228,19],[355,20,228,20,"method"],[355,26,228,26],[355,31,228,31],[355,42,228,42],[355,44,228,44],[356,10,229,12],[356,14,229,16],[356,15,229,17,"reconnect"],[356,24,229,26],[356,25,229,27],[356,29,229,31,"TRPCWebSocketClosedError"],[356,60,229,55],[356,61,229,56],[357,12,230,16,"message"],[357,19,230,23],[357,21,230,25],[358,10,231,12],[358,11,231,13],[358,12,231,14],[358,13,231,15],[359,8,232,8],[360,6,233,4],[361,6,234,4],[362,0,235,0],[363,0,236,0],[364,4,234,4],[365,6,234,4,"key"],[365,9,234,4],[366,6,234,4,"value"],[366,11,234,4],[366,13,236,6],[366,22,236,6,"send"],[366,26,236,10,"send"],[366,27,236,11,"messageOrMessages"],[366,44,236,28],[366,46,236,30],[367,8,237,8],[367,12,237,12],[367,13,237,13],[367,17,237,17],[367,18,237,18,"activeConnection"],[367,34,237,34],[367,35,237,35,"isOpen"],[367,41,237,41],[367,42,237,42],[367,43,237,43],[367,45,237,45],[368,10,238,12],[368,16,238,18],[368,20,238,22,"Error"],[368,25,238,27],[368,26,238,28],[368,57,238,59],[368,58,238,60],[369,8,239,8],[370,8,240,8],[370,12,240,14,"messages"],[370,20,240,22],[370,23,240,25,"messageOrMessages"],[370,40,240,42],[370,52,240,54,"Array"],[370,57,240,59],[370,60,240,62,"messageOrMessages"],[370,77,240,79],[370,80,240,82],[370,81,241,12,"messageOrMessages"],[370,98,241,29],[370,99,242,9],[371,8,243,8],[371,12,243,12],[371,13,243,13,"activeConnection"],[371,29,243,29],[371,30,243,30,"ws"],[371,32,243,32],[371,33,243,33,"send"],[371,37,243,37],[371,38,243,38,"JSON"],[371,42,243,42],[371,43,243,43,"stringify"],[371,52,243,52],[371,53,243,53,"messages"],[371,61,243,61],[371,62,243,62,"length"],[371,68,243,68],[371,73,243,73],[371,74,243,74],[371,77,243,77,"messages"],[371,85,243,85],[371,86,243,86],[371,87,243,87],[371,88,243,88],[371,91,243,91,"messages"],[371,99,243,99],[371,100,243,100],[371,101,243,101],[372,6,244,4],[373,6,245,4],[374,0,246,0],[375,0,247,0],[376,0,248,0],[377,0,249,0],[378,4,245,4],[379,6,245,4,"key"],[379,9,245,4],[380,6,245,4,"value"],[380,11,245,4],[380,13,249,6],[380,22,249,6,"batchSend"],[380,31,249,15,"batchSend"],[380,32,249,16,"message"],[380,39,249,23],[380,41,249,25,"callbacks"],[380,50,249,34],[380,52,249,36],[381,8,249,36],[381,12,249,36,"_this3"],[381,18,249,36],[382,8,250,8],[382,12,250,12],[382,13,250,13,"inactivityTimeout"],[382,30,250,30],[382,31,250,31,"reset"],[382,36,250,36],[382,37,250,37],[382,38,250,38],[383,8,251,8],[383,12,251,8,"run"],[383,40,251,11],[383,59,251,11,"_asyncToGenerator2"],[383,77,251,11],[383,78,251,11,"default"],[383,85,251,11],[383,87,251,12],[383,100,251,22],[384,10,252,12],[384,14,252,16],[384,15,252,17,"_this3"],[384,21,252,21],[384,22,252,22,"activeConnection"],[384,38,252,38],[384,39,252,39,"isOpen"],[384,45,252,45],[384,46,252,46],[384,47,252,47],[384,49,252,49],[385,12,253,16],[385,18,253,22,"_this3"],[385,24,253,26],[385,25,253,27,"open"],[385,29,253,31],[385,30,253,32],[385,31,253,33],[386,10,254,12],[387,10,255,12],[387,16,255,18],[387,20,255,18,"sleep"],[387,50,255,23],[387,52,255,24],[387,53,255,25],[387,54,255,26],[388,10,256,12],[388,14,256,16],[388,15,256,17,"_this3"],[388,21,256,21],[388,22,256,22,"requestManager"],[388,36,256,36],[388,37,256,37,"hasOutgoingRequests"],[388,56,256,56],[388,57,256,57],[388,58,256,58],[388,60,256,60],[389,10,257,12,"_this3"],[389,16,257,16],[389,17,257,17,"send"],[389,21,257,21],[389,22,257,22,"_this3"],[389,28,257,26],[389,29,257,27,"requestManager"],[389,43,257,41],[389,44,257,42,"flush"],[389,49,257,47],[389,50,257,48],[389,51,257,49],[389,52,257,50,"map"],[389,55,257,53],[389,56,257,54,"_ref8"],[389,61,257,54],[390,12,257,54],[390,16,257,57,"message"],[390,23,257,64],[390,26,257,64,"_ref8"],[390,31,257,64],[390,32,257,57,"message"],[390,39,257,64],[391,12,257,64],[391,19,257,69,"message"],[391,26,257,76],[392,10,257,76],[392,12,257,77],[392,13,257,78],[393,8,258,8],[393,9,258,9],[393,11,258,10],[393,12,258,11,"catch"],[393,17,258,16],[393,18,258,18,"err"],[393,21,258,21],[393,25,258,24],[394,10,259,12],[394,14,259,16],[394,15,259,17,"requestManager"],[394,29,259,31],[394,30,259,32,"delete"],[394,36,259,38],[394,37,259,39,"message"],[394,44,259,46],[394,45,259,47,"id"],[394,47,259,49],[394,48,259,50],[395,10,260,12,"callbacks"],[395,19,260,21],[395,20,260,22,"error"],[395,25,260,27],[395,26,260,28,"TRPCClientError"],[395,58,260,43],[395,59,260,44,"from"],[395,63,260,48],[395,64,260,49,"err"],[395,67,260,52],[395,68,260,53],[395,69,260,54],[396,8,261,8],[396,9,261,9],[396,10,261,10],[397,8,262,8],[397,15,262,15],[397,19,262,19],[397,20,262,20,"requestManager"],[397,34,262,34],[397,35,262,35,"register"],[397,43,262,43],[397,44,262,44,"message"],[397,51,262,51],[397,53,262,53,"callbacks"],[397,62,262,62],[397,63,262,63],[398,6,263,4],[399,4,263,5],[400,2,263,5],[401,0,263,5],[401,3]],"functionMap":{"names":["<global>","_define_property","WsClient","WsClient#open","WsClient#close","Promise.all._catch$argument_0","activeConnection.close._catch$argument_0","WsClient#request","observable$argument_0","batchSend$argument_1.next","<anonymous>","WsClient#get__connection","WsClient#reconnect","tryReconnect","WsClient#setupWebSocketListeners","handleCloseOrError","ws.addEventListener$argument_1","run$argument_0","requestManager.getPendingRequests.map$argument_0","run._catch$argument_0","WsClient#handleResponseMessage","WsClient#handleIncomingRequest","WsClient#send","WsClient#batchSend","requestManager.flush.map$argument_0","WsClient#constructor","ResettableTimeout$argument_0","close._catch$argument_0","activeConnection.wsObservable.subscribe$argument_0.next","open._catch$argument_0"],"mappings":"AAA;ACQ;CDY;IEI;MCI;KDkB;MEI;iDCe,QD;kDEC,QF;KFM;MKU;0BCC;gBCW;iBDS;mBEE;aFS;SDC;KLC;ISC;KTE;IUC;6BCO;SDW;KVE;IYC;mCCC;SDU;oCEC;gBCC;8ECa,sBD;aDI,QG;aHG;SFC;uCEC;SFY;qCEC;SFS;qCEC;SFO;KZC;IkBC;KlBiB;ImBC;KnBM;MoBG;KpBQ;MqBK;YNE;sDOM,sBP;SMC,QJ;SIG;KrBE;IuBC;uDC6B;+BCK,QD;SDC;kBGW;aHG;8BIW,QJ;KvBE;CFC"}},"type":"js/module"}]}