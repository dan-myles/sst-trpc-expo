{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":279,"column":0,"index":10417}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":279,"column":0,"index":10417}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":279,"column":0,"index":10417}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"./createProxy.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":57,"index":57}}],"key":"QRjcqlfWElpa80fcVvPydU+fO5w="}},{"name":"./error/formatter.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":58},"end":{"line":2,"column":57,"index":115}}],"key":"NaFQJs/lPDeE3tiOjyD06hQzDos="}},{"name":"./error/TRPCError.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":116},"end":{"line":3,"column":75,"index":191}}],"key":"WdBNBZk8UDTZJ+aLaEfvYQAC7J4="}},{"name":"./transformer.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":0,"index":192},"end":{"line":4,"column":55,"index":247}}],"key":"l0kgHDfZUlnTT0guzpjf8wWPUeU="}},{"name":"./utils.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":0,"index":248},"end":{"line":5,"column":89,"index":337}}],"key":"XZqiGndSzUFgS+0ABF5nOFWZJRU="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.callProcedure = callProcedure;\n  exports.createCallerFactory = createCallerFactory;\n  exports.createRouterFactory = createRouterFactory;\n  exports.getProcedureAtPath = getProcedureAtPath;\n  exports.lazy = lazy;\n  exports.mergeRouters = mergeRouters;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _createProxy = require(_dependencyMap[3], \"./createProxy.mjs\");\n  var _formatter = require(_dependencyMap[4], \"./error/formatter.mjs\");\n  var _TRPCError = require(_dependencyMap[5], \"./error/TRPCError.mjs\");\n  var _transformer = require(_dependencyMap[6], \"./transformer.mjs\");\n  var _utils = require(_dependencyMap[7], \"./utils.mjs\");\n  var lazySymbol = Symbol('lazy');\n  function once(fn) {\n    var uncalled = Symbol();\n    var result = uncalled;\n    return () => {\n      if (result === uncalled) {\n        result = fn();\n      }\n      return result;\n    };\n  }\n  /**\n   * Lazy load a router\n   * @see https://trpc.io/docs/server/merging-routers#lazy-load\n   */\n  function lazy(importRouter) {\n    function resolve() {\n      return _resolve.apply(this, arguments);\n    }\n    function _resolve() {\n      _resolve = (0, _asyncToGenerator2.default)(function* () {\n        var mod = yield importRouter();\n        // if the module is a router, return it\n        if (isRouter(mod)) {\n          return mod;\n        }\n        var routers = Object.values(mod);\n        if (routers.length !== 1 || !isRouter(routers[0])) {\n          throw new Error(\"Invalid router module - either define exactly 1 export or return the router directly.\\nExample: `experimental_lazy(() => import('./slow.js').then((m) => m.slowRouter))`\");\n        }\n        return routers[0];\n      });\n      return _resolve.apply(this, arguments);\n    }\n    resolve[lazySymbol] = true;\n    return resolve;\n  }\n  function isLazy(input) {\n    return typeof input === 'function' && lazySymbol in input;\n  }\n  function isRouter(value) {\n    return (0, _utils.isObject)(value) && (0, _utils.isObject)(value['_def']) && 'router' in value['_def'];\n  }\n  var emptyRouter = {\n    _ctx: null,\n    _errorShape: null,\n    _meta: null,\n    queries: {},\n    mutations: {},\n    subscriptions: {},\n    errorFormatter: _formatter.defaultFormatter,\n    transformer: _transformer.defaultTransformer\n  };\n  /**\n   * Reserved words that can't be used as router or procedure names\n   */\n  var reservedWords = [\n  /**\n  * Then is a reserved word because otherwise we can't return a promise that returns a Proxy\n  * since JS will think that `.then` is something that exists\n  */\n  'then',\n  /**\n  * `fn.call()` and `fn.apply()` are reserved words because otherwise we can't call a function using `.call` or `.apply`\n  */\n  'call', 'apply'];\n  /**\n   * @internal\n   */\n  function createRouterFactory(config) {\n    function createRouterInner(input) {\n      var reservedWordsUsed = new Set(Object.keys(input).filter(v => reservedWords.includes(v)));\n      if (reservedWordsUsed.size > 0) {\n        throw new Error('Reserved words used in `router({})` call: ' + Array.from(reservedWordsUsed).join(', '));\n      }\n      var procedures = (0, _utils.omitPrototype)({});\n      var lazy = (0, _utils.omitPrototype)({});\n      function createLazyLoader(opts) {\n        return {\n          ref: opts.ref,\n          load: once(/*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n            var router = yield opts.ref();\n            var lazyPath = [...opts.path, opts.key];\n            var lazyKey = lazyPath.join('.');\n            opts.aggregate[opts.key] = step(router._def.record, lazyPath);\n            delete lazy[lazyKey];\n            // add lazy loaders for nested routers\n            for (var _ref2 of Object.entries(router._def.lazy)) {\n              var _ref3 = (0, _slicedToArray2.default)(_ref2, 2);\n              var nestedKey = _ref3[0];\n              var nestedItem = _ref3[1];\n              var nestedRouterKey = [...lazyPath, nestedKey].join('.');\n              // console.log('adding lazy', nestedRouterKey);\n              lazy[nestedRouterKey] = createLazyLoader({\n                ref: nestedItem.ref,\n                path: lazyPath,\n                key: nestedKey,\n                aggregate: opts.aggregate[opts.key]\n              });\n            }\n          }))\n        };\n      }\n      function step(from) {\n        var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        var aggregate = (0, _utils.omitPrototype)({});\n        for (var _ref4 of Object.entries(from ?? {})) {\n          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2);\n          var key = _ref5[0];\n          var item = _ref5[1];\n          if (isLazy(item)) {\n            lazy[[...path, key].join('.')] = createLazyLoader({\n              path,\n              ref: item,\n              key,\n              aggregate\n            });\n            continue;\n          }\n          if (isRouter(item)) {\n            aggregate[key] = step(item._def.record, [...path, key]);\n            continue;\n          }\n          if (!isProcedure(item)) {\n            // RouterRecord\n            aggregate[key] = step(item, [...path, key]);\n            continue;\n          }\n          var newPath = [...path, key].join('.');\n          if (procedures[newPath]) {\n            throw new Error(`Duplicate key: ${newPath}`);\n          }\n          procedures[newPath] = item;\n          aggregate[key] = item;\n        }\n        return aggregate;\n      }\n      var record = step(input);\n      var _def = {\n        _config: config,\n        router: true,\n        procedures,\n        lazy,\n        ...emptyRouter,\n        record\n      };\n      var router = {\n        ...record,\n        _def,\n        createCaller: createCallerFactory()({\n          _def\n        })\n      };\n      return router;\n    }\n    return createRouterInner;\n  }\n  function isProcedure(procedureOrRouter) {\n    return typeof procedureOrRouter === 'function';\n  }\n  /**\n   * @internal\n   */\n  function getProcedureAtPath(_x, _x2) {\n    return _getProcedureAtPath.apply(this, arguments);\n  }\n  /**\n   * @internal\n   */\n  function _getProcedureAtPath() {\n    _getProcedureAtPath = (0, _asyncToGenerator2.default)(function* (router, path) {\n      var _def = router._def;\n      var procedure = _def.procedures[path];\n      while (!procedure) {\n        var key = Object.keys(_def.lazy).find(key => path.startsWith(key));\n        // console.log(`found lazy: ${key ?? 'NOPE'} (fullPath: ${fullPath})`);\n        if (!key) {\n          return null;\n        }\n        // console.log('loading', key, '.......');\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        var lazyRouter = _def.lazy[key];\n        yield lazyRouter.load();\n        procedure = _def.procedures[path];\n      }\n      return procedure;\n    });\n    return _getProcedureAtPath.apply(this, arguments);\n  }\n  function callProcedure(_x3) {\n    return _callProcedure.apply(this, arguments);\n  }\n  function _callProcedure() {\n    _callProcedure = (0, _asyncToGenerator2.default)(function* (opts) {\n      var type = opts.type,\n        path = opts.path;\n      var proc = yield getProcedureAtPath(opts.router, path);\n      if (!proc || !isProcedure(proc) || proc._def.type !== type && !opts.allowMethodOverride) {\n        throw new _TRPCError.TRPCError({\n          code: 'NOT_FOUND',\n          message: `No \"${type}\"-procedure on path \"${path}\"`\n        });\n      }\n      /* istanbul ignore if -- @preserve */\n      if (proc._def.type !== type && opts.allowMethodOverride && proc._def.type === 'subscription') {\n        throw new _TRPCError.TRPCError({\n          code: 'METHOD_NOT_SUPPORTED',\n          message: `Method override is not supported for subscriptions`\n        });\n      }\n      return proc(opts);\n    });\n    return _callProcedure.apply(this, arguments);\n  }\n  function createCallerFactory() {\n    return function createCallerInner(router) {\n      var _def = router._def;\n      return function createCaller(ctxOrCallback, opts) {\n        return (0, _createProxy.createRecursiveProxy)(/*#__PURE__*/function () {\n          var _ref7 = (0, _asyncToGenerator2.default)(function* (_ref6) {\n            var path = _ref6.path,\n              args = _ref6.args;\n            var fullPath = path.join('.');\n            if (path.length === 1 && path[0] === '_def') {\n              return _def;\n            }\n            var procedure = yield getProcedureAtPath(router, fullPath);\n            var ctx = undefined;\n            try {\n              if (!procedure) {\n                throw new _TRPCError.TRPCError({\n                  code: 'NOT_FOUND',\n                  message: `No procedure found on path \"${path}\"`\n                });\n              }\n              ctx = (0, _utils.isFunction)(ctxOrCallback) ? yield Promise.resolve(ctxOrCallback()) : ctxOrCallback;\n              return yield procedure({\n                path: fullPath,\n                getRawInput: function () {\n                  var _ref8 = (0, _asyncToGenerator2.default)(function* () {\n                    return args[0];\n                  });\n                  return function getRawInput() {\n                    return _ref8.apply(this, arguments);\n                  };\n                }(),\n                ctx,\n                type: procedure._def.type,\n                signal: opts?.signal\n              });\n            } catch (cause) {\n              opts?.onError?.({\n                ctx,\n                error: (0, _TRPCError.getTRPCErrorFromUnknown)(cause),\n                input: args[0],\n                path: fullPath,\n                type: procedure?._def.type ?? 'unknown'\n              });\n              throw cause;\n            }\n          });\n          return function (_x4) {\n            return _ref7.apply(this, arguments);\n          };\n        }());\n      };\n    };\n  }\n  function mergeRouters() {\n    for (var _len = arguments.length, routerList = new Array(_len), _key = 0; _key < _len; _key++) {\n      routerList[_key] = arguments[_key];\n    }\n    var record = (0, _utils.mergeWithoutOverrides)({}, ...routerList.map(r => r._def.record));\n    var errorFormatter = routerList.reduce((currentErrorFormatter, nextRouter) => {\n      if (nextRouter._def._config.errorFormatter && nextRouter._def._config.errorFormatter !== _formatter.defaultFormatter) {\n        if (currentErrorFormatter !== _formatter.defaultFormatter && currentErrorFormatter !== nextRouter._def._config.errorFormatter) {\n          throw new Error('You seem to have several error formatters');\n        }\n        return nextRouter._def._config.errorFormatter;\n      }\n      return currentErrorFormatter;\n    }, _formatter.defaultFormatter);\n    var transformer = routerList.reduce((prev, current) => {\n      if (current._def._config.transformer && current._def._config.transformer !== _transformer.defaultTransformer) {\n        if (prev !== _transformer.defaultTransformer && prev !== current._def._config.transformer) {\n          throw new Error('You seem to have several transformers');\n        }\n        return current._def._config.transformer;\n      }\n      return prev;\n    }, _transformer.defaultTransformer);\n    var router = createRouterFactory({\n      errorFormatter,\n      transformer,\n      isDev: routerList.every(r => r._def._config.isDev),\n      allowOutsideOfServer: routerList.every(r => r._def._config.allowOutsideOfServer),\n      isServer: routerList.every(r => r._def._config.isServer),\n      $types: routerList[0]?._def._config.$types\n    })(record);\n    return router;\n  }\n});","lineCount":320,"map":[[14,2,1,0],[14,6,1,0,"_createProxy"],[14,18,1,0],[14,21,1,0,"require"],[14,28,1,0],[14,29,1,0,"_dependencyMap"],[14,43,1,0],[15,2,2,0],[15,6,2,0,"_formatter"],[15,16,2,0],[15,19,2,0,"require"],[15,26,2,0],[15,27,2,0,"_dependencyMap"],[15,41,2,0],[16,2,3,0],[16,6,3,0,"_TRPCError"],[16,16,3,0],[16,19,3,0,"require"],[16,26,3,0],[16,27,3,0,"_dependencyMap"],[16,41,3,0],[17,2,4,0],[17,6,4,0,"_transformer"],[17,18,4,0],[17,21,4,0,"require"],[17,28,4,0],[17,29,4,0,"_dependencyMap"],[17,43,4,0],[18,2,5,0],[18,6,5,0,"_utils"],[18,12,5,0],[18,15,5,0,"require"],[18,22,5,0],[18,23,5,0,"_dependencyMap"],[18,37,5,0],[19,2,7,0],[19,6,7,6,"lazySymbol"],[19,16,7,16],[19,19,7,19,"Symbol"],[19,25,7,25],[19,26,7,26],[19,32,7,32],[19,33,7,33],[20,2,8,0],[20,11,8,9,"once"],[20,15,8,13,"once"],[20,16,8,14,"fn"],[20,18,8,16],[20,20,8,18],[21,4,9,4],[21,8,9,10,"uncalled"],[21,16,9,18],[21,19,9,21,"Symbol"],[21,25,9,27],[21,26,9,28],[21,27,9,29],[22,4,10,4],[22,8,10,8,"result"],[22,14,10,14],[22,17,10,17,"uncalled"],[22,25,10,25],[23,4,11,4],[23,11,11,11],[23,17,11,15],[24,6,12,8],[24,10,12,12,"result"],[24,16,12,18],[24,21,12,23,"uncalled"],[24,29,12,31],[24,31,12,33],[25,8,13,12,"result"],[25,14,13,18],[25,17,13,21,"fn"],[25,19,13,23],[25,20,13,24],[25,21,13,25],[26,6,14,8],[27,6,15,8],[27,13,15,15,"result"],[27,19,15,21],[28,4,16,4],[28,5,16,5],[29,2,17,0],[30,2,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,2,21,4],[34,11,21,13,"lazy"],[34,15,21,17,"lazy"],[34,16,21,18,"importRouter"],[34,28,21,30],[34,30,21,32],[35,4,21,32],[35,13,22,19,"resolve"],[35,20,22,26,"resolve"],[35,21,22,26],[36,6,22,26],[36,13,22,26,"_resolve"],[36,21,22,26],[36,22,22,26,"apply"],[36,27,22,26],[36,34,22,26,"arguments"],[36,43,22,26],[37,4,22,26],[38,4,22,26],[38,13,22,26,"_resolve"],[38,22,22,26],[39,6,22,26,"_resolve"],[39,14,22,26],[39,21,22,26,"_asyncToGenerator2"],[39,39,22,26],[39,40,22,26,"default"],[39,47,22,26],[39,49,22,4],[39,62,22,29],[40,8,23,8],[40,12,23,14,"mod"],[40,15,23,17],[40,24,23,26,"importRouter"],[40,36,23,38],[40,37,23,39],[40,38,23,40],[41,8,24,8],[42,8,25,8],[42,12,25,12,"isRouter"],[42,20,25,20],[42,21,25,21,"mod"],[42,24,25,24],[42,25,25,25],[42,27,25,27],[43,10,26,12],[43,17,26,19,"mod"],[43,20,26,22],[44,8,27,8],[45,8,28,8],[45,12,28,14,"routers"],[45,19,28,21],[45,22,28,24,"Object"],[45,28,28,30],[45,29,28,31,"values"],[45,35,28,37],[45,36,28,38,"mod"],[45,39,28,41],[45,40,28,42],[46,8,29,8],[46,12,29,12,"routers"],[46,19,29,19],[46,20,29,20,"length"],[46,26,29,26],[46,31,29,31],[46,32,29,32],[46,36,29,36],[46,37,29,37,"isRouter"],[46,45,29,45],[46,46,29,46,"routers"],[46,53,29,53],[46,54,29,54],[46,55,29,55],[46,56,29,56],[46,57,29,57],[46,59,29,59],[47,10,30,12],[47,16,30,18],[47,20,30,22,"Error"],[47,25,30,27],[47,26,30,28],[47,196,30,198],[47,197,30,199],[48,8,31,8],[49,8,32,8],[49,15,32,15,"routers"],[49,22,32,22],[49,23,32,23],[49,24,32,24],[49,25,32,25],[50,6,33,4],[50,7,33,5],[51,6,33,5],[51,13,33,5,"_resolve"],[51,21,33,5],[51,22,33,5,"apply"],[51,27,33,5],[51,34,33,5,"arguments"],[51,43,33,5],[52,4,33,5],[53,4,34,4,"resolve"],[53,11,34,11],[53,12,34,12,"lazySymbol"],[53,22,34,22],[53,23,34,23],[53,26,34,26],[53,30,34,30],[54,4,35,4],[54,11,35,11,"resolve"],[54,18,35,18],[55,2,36,0],[56,2,37,0],[56,11,37,9,"isLazy"],[56,17,37,15,"isLazy"],[56,18,37,16,"input"],[56,23,37,21],[56,25,37,23],[57,4,38,4],[57,11,38,11],[57,18,38,18,"input"],[57,23,38,23],[57,28,38,28],[57,38,38,38],[57,42,38,42,"lazySymbol"],[57,52,38,52],[57,56,38,56,"input"],[57,61,38,61],[58,2,39,0],[59,2,40,0],[59,11,40,9,"isRouter"],[59,19,40,17,"isRouter"],[59,20,40,18,"value"],[59,25,40,23],[59,27,40,25],[60,4,41,4],[60,11,41,11],[60,15,41,11,"isObject"],[60,30,41,19],[60,32,41,20,"value"],[60,37,41,25],[60,38,41,26],[60,42,41,30],[60,46,41,30,"isObject"],[60,61,41,38],[60,63,41,39,"value"],[60,68,41,44],[60,69,41,45],[60,75,41,51],[60,76,41,52],[60,77,41,53],[60,81,41,57],[60,89,41,65],[60,93,41,69,"value"],[60,98,41,74],[60,99,41,75],[60,105,41,81],[60,106,41,82],[61,2,42,0],[62,2,43,0],[62,6,43,6,"emptyRouter"],[62,17,43,17],[62,20,43,20],[63,4,44,4,"_ctx"],[63,8,44,8],[63,10,44,10],[63,14,44,14],[64,4,45,4,"_errorShape"],[64,15,45,15],[64,17,45,17],[64,21,45,21],[65,4,46,4,"_meta"],[65,9,46,9],[65,11,46,11],[65,15,46,15],[66,4,47,4,"queries"],[66,11,47,11],[66,13,47,13],[66,14,47,14],[66,15,47,15],[67,4,48,4,"mutations"],[67,13,48,13],[67,15,48,15],[67,16,48,16],[67,17,48,17],[68,4,49,4,"subscriptions"],[68,17,49,17],[68,19,49,19],[68,20,49,20],[68,21,49,21],[69,4,50,4,"errorFormatter"],[69,18,50,18],[69,20,50,20,"defaultFormatter"],[69,47,50,36],[70,4,51,4,"transformer"],[70,15,51,15],[70,17,51,17,"defaultTransformer"],[71,2,52,0],[71,3,52,1],[72,2,53,0],[73,0,54,0],[74,0,55,0],[75,2,55,4],[75,6,55,10,"reservedWords"],[75,19,55,23],[75,22,55,26],[76,2,56,4],[77,0,57,0],[78,0,58,0],[79,0,59,0],[80,2,59,6],[80,8,59,12],[81,2,60,4],[82,0,61,0],[83,0,62,0],[84,2,62,6],[84,8,62,12],[84,10,63,4],[84,17,63,11],[84,18,64,1],[85,2,65,0],[86,0,66,0],[87,0,67,0],[88,2,67,4],[88,11,67,13,"createRouterFactory"],[88,30,67,32,"createRouterFactory"],[88,31,67,33,"config"],[88,37,67,39],[88,39,67,41],[89,4,68,4],[89,13,68,13,"createRouterInner"],[89,30,68,30,"createRouterInner"],[89,31,68,31,"input"],[89,36,68,36],[89,38,68,38],[90,6,69,8],[90,10,69,14,"reservedWordsUsed"],[90,27,69,31],[90,30,69,34],[90,34,69,38,"Set"],[90,37,69,41],[90,38,69,42,"Object"],[90,44,69,48],[90,45,69,49,"keys"],[90,49,69,53],[90,50,69,54,"input"],[90,55,69,59],[90,56,69,60],[90,57,69,61,"filter"],[90,63,69,67],[90,64,69,69,"v"],[90,65,69,70],[90,69,69,73,"reservedWords"],[90,82,69,86],[90,83,69,87,"includes"],[90,91,69,95],[90,92,69,96,"v"],[90,93,69,97],[90,94,69,98],[90,95,69,99],[90,96,69,100],[91,6,70,8],[91,10,70,12,"reservedWordsUsed"],[91,27,70,29],[91,28,70,30,"size"],[91,32,70,34],[91,35,70,37],[91,36,70,38],[91,38,70,40],[92,8,71,12],[92,14,71,18],[92,18,71,22,"Error"],[92,23,71,27],[92,24,71,28],[92,68,71,72],[92,71,71,75,"Array"],[92,76,71,80],[92,77,71,81,"from"],[92,81,71,85],[92,82,71,86,"reservedWordsUsed"],[92,99,71,103],[92,100,71,104],[92,101,71,105,"join"],[92,105,71,109],[92,106,71,110],[92,110,71,114],[92,111,71,115],[92,112,71,116],[93,6,72,8],[94,6,73,8],[94,10,73,14,"procedures"],[94,20,73,24],[94,23,73,27],[94,27,73,27,"omitPrototype"],[94,47,73,40],[94,49,73,41],[94,50,73,42],[94,51,73,43],[94,52,73,44],[95,6,74,8],[95,10,74,14,"lazy"],[95,14,74,18],[95,17,74,21],[95,21,74,21,"omitPrototype"],[95,41,74,34],[95,43,74,35],[95,44,74,36],[95,45,74,37],[95,46,74,38],[96,6,75,8],[96,15,75,17,"createLazyLoader"],[96,31,75,33,"createLazyLoader"],[96,32,75,34,"opts"],[96,36,75,38],[96,38,75,40],[97,8,76,12],[97,15,76,19],[98,10,77,16,"ref"],[98,13,77,19],[98,15,77,21,"opts"],[98,19,77,25],[98,20,77,26,"ref"],[98,23,77,29],[99,10,78,16,"load"],[99,14,78,20],[99,16,78,22,"once"],[99,20,78,26],[99,38,78,26,"_asyncToGenerator2"],[99,56,78,26],[99,57,78,26,"default"],[99,64,78,26],[99,66,78,27],[99,79,78,37],[100,12,79,20],[100,16,79,26,"router"],[100,22,79,32],[100,31,79,41,"opts"],[100,35,79,45],[100,36,79,46,"ref"],[100,39,79,49],[100,40,79,50],[100,41,79,51],[101,12,80,20],[101,16,80,26,"lazyPath"],[101,24,80,34],[101,27,80,37],[101,28,81,24],[101,31,81,27,"opts"],[101,35,81,31],[101,36,81,32,"path"],[101,40,81,36],[101,42,82,24,"opts"],[101,46,82,28],[101,47,82,29,"key"],[101,50,82,32],[101,51,83,21],[102,12,84,20],[102,16,84,26,"lazyKey"],[102,23,84,33],[102,26,84,36,"lazyPath"],[102,34,84,44],[102,35,84,45,"join"],[102,39,84,49],[102,40,84,50],[102,43,84,53],[102,44,84,54],[103,12,85,20,"opts"],[103,16,85,24],[103,17,85,25,"aggregate"],[103,26,85,34],[103,27,85,35,"opts"],[103,31,85,39],[103,32,85,40,"key"],[103,35,85,43],[103,36,85,44],[103,39,85,47,"step"],[103,43,85,51],[103,44,85,52,"router"],[103,50,85,58],[103,51,85,59,"_def"],[103,55,85,63],[103,56,85,64,"record"],[103,62,85,70],[103,64,85,72,"lazyPath"],[103,72,85,80],[103,73,85,81],[104,12,86,20],[104,19,86,27,"lazy"],[104,23,86,31],[104,24,86,32,"lazyKey"],[104,31,86,39],[104,32,86,40],[105,12,87,20],[106,12,88,20],[106,21,88,20,"_ref2"],[106,26,88,20],[106,30,88,58,"Object"],[106,36,88,64],[106,37,88,65,"entries"],[106,44,88,72],[106,45,88,73,"router"],[106,51,88,79],[106,52,88,80,"_def"],[106,56,88,84],[106,57,88,85,"lazy"],[106,61,88,89],[106,62,88,90],[106,64,88,91],[107,14,88,91],[107,18,88,91,"_ref3"],[107,23,88,91],[107,30,88,91,"_slicedToArray2"],[107,45,88,91],[107,46,88,91,"default"],[107,53,88,91],[107,55,88,91,"_ref2"],[107,60,88,91],[108,14,88,91],[108,18,88,32,"nestedKey"],[108,27,88,41],[108,30,88,41,"_ref3"],[108,35,88,41],[109,14,88,41],[109,18,88,43,"nestedItem"],[109,28,88,53],[109,31,88,53,"_ref3"],[109,36,88,53],[110,14,89,24],[110,18,89,30,"nestedRouterKey"],[110,33,89,45],[110,36,89,48],[110,37,90,28],[110,40,90,31,"lazyPath"],[110,48,90,39],[110,50,91,28,"nestedKey"],[110,59,91,37],[110,60,92,25],[110,61,92,26,"join"],[110,65,92,30],[110,66,92,31],[110,69,92,34],[110,70,92,35],[111,14,93,24],[112,14,94,24,"lazy"],[112,18,94,28],[112,19,94,29,"nestedRouterKey"],[112,34,94,44],[112,35,94,45],[112,38,94,48,"createLazyLoader"],[112,54,94,64],[112,55,94,65],[113,16,95,28,"ref"],[113,19,95,31],[113,21,95,33,"nestedItem"],[113,31,95,43],[113,32,95,44,"ref"],[113,35,95,47],[114,16,96,28,"path"],[114,20,96,32],[114,22,96,34,"lazyPath"],[114,30,96,42],[115,16,97,28,"key"],[115,19,97,31],[115,21,97,33,"nestedKey"],[115,30,97,42],[116,16,98,28,"aggregate"],[116,25,98,37],[116,27,98,39,"opts"],[116,31,98,43],[116,32,98,44,"aggregate"],[116,41,98,53],[116,42,98,54,"opts"],[116,46,98,58],[116,47,98,59,"key"],[116,50,98,62],[117,14,99,24],[117,15,99,25],[117,16,99,26],[118,12,100,20],[119,10,101,16],[119,11,101,17],[120,8,102,12],[120,9,102,13],[121,6,103,8],[122,6,104,8],[122,15,104,17,"step"],[122,19,104,21,"step"],[122,20,104,22,"from"],[122,24,104,26],[122,26,104,39],[123,8,104,39],[123,12,104,28,"path"],[123,16,104,32],[123,19,104,32,"arguments"],[123,28,104,32],[123,29,104,32,"length"],[123,35,104,32],[123,43,104,32,"arguments"],[123,52,104,32],[123,60,104,32,"undefined"],[123,69,104,32],[123,72,104,32,"arguments"],[123,81,104,32],[123,87,104,35],[123,89,104,37],[124,8,105,12],[124,12,105,18,"aggregate"],[124,21,105,27],[124,24,105,30],[124,28,105,30,"omitPrototype"],[124,48,105,43],[124,50,105,44],[124,51,105,45],[124,52,105,46],[124,53,105,47],[125,8,106,12],[125,17,106,12,"_ref4"],[125,22,106,12],[125,26,106,38,"Object"],[125,32,106,44],[125,33,106,45,"entries"],[125,40,106,52],[125,41,106,53,"from"],[125,45,106,57],[125,49,106,61],[125,50,106,62],[125,51,106,63],[125,52,106,64],[125,54,106,65],[126,10,106,65],[126,14,106,65,"_ref5"],[126,19,106,65],[126,26,106,65,"_slicedToArray2"],[126,41,106,65],[126,42,106,65,"default"],[126,49,106,65],[126,51,106,65,"_ref4"],[126,56,106,65],[127,10,106,65],[127,14,106,24,"key"],[127,17,106,27],[127,20,106,27,"_ref5"],[127,25,106,27],[128,10,106,27],[128,14,106,29,"item"],[128,18,106,33],[128,21,106,33,"_ref5"],[128,26,106,33],[129,10,107,16],[129,14,107,20,"isLazy"],[129,20,107,26],[129,21,107,27,"item"],[129,25,107,31],[129,26,107,32],[129,28,107,34],[130,12,108,20,"lazy"],[130,16,108,24],[130,17,108,25],[130,18,109,24],[130,21,109,27,"path"],[130,25,109,31],[130,27,110,24,"key"],[130,30,110,27],[130,31,111,21],[130,32,111,22,"join"],[130,36,111,26],[130,37,111,27],[130,40,111,30],[130,41,111,31],[130,42,111,32],[130,45,111,35,"createLazyLoader"],[130,61,111,51],[130,62,111,52],[131,14,112,24,"path"],[131,18,112,28],[132,14,113,24,"ref"],[132,17,113,27],[132,19,113,29,"item"],[132,23,113,33],[133,14,114,24,"key"],[133,17,114,27],[134,14,115,24,"aggregate"],[135,12,116,20],[135,13,116,21],[135,14,116,22],[136,12,117,20],[137,10,118,16],[138,10,119,16],[138,14,119,20,"isRouter"],[138,22,119,28],[138,23,119,29,"item"],[138,27,119,33],[138,28,119,34],[138,30,119,36],[139,12,120,20,"aggregate"],[139,21,120,29],[139,22,120,30,"key"],[139,25,120,33],[139,26,120,34],[139,29,120,37,"step"],[139,33,120,41],[139,34,120,42,"item"],[139,38,120,46],[139,39,120,47,"_def"],[139,43,120,51],[139,44,120,52,"record"],[139,50,120,58],[139,52,120,60],[139,53,121,24],[139,56,121,27,"path"],[139,60,121,31],[139,62,122,24,"key"],[139,65,122,27],[139,66,123,21],[139,67,123,22],[140,12,124,20],[141,10,125,16],[142,10,126,16],[142,14,126,20],[142,15,126,21,"isProcedure"],[142,26,126,32],[142,27,126,33,"item"],[142,31,126,37],[142,32,126,38],[142,34,126,40],[143,12,127,20],[144,12,128,20,"aggregate"],[144,21,128,29],[144,22,128,30,"key"],[144,25,128,33],[144,26,128,34],[144,29,128,37,"step"],[144,33,128,41],[144,34,128,42,"item"],[144,38,128,46],[144,40,128,48],[144,41,129,24],[144,44,129,27,"path"],[144,48,129,31],[144,50,130,24,"key"],[144,53,130,27],[144,54,131,21],[144,55,131,22],[145,12,132,20],[146,10,133,16],[147,10,134,16],[147,14,134,22,"newPath"],[147,21,134,29],[147,24,134,32],[147,25,135,20],[147,28,135,23,"path"],[147,32,135,27],[147,34,136,20,"key"],[147,37,136,23],[147,38,137,17],[147,39,137,18,"join"],[147,43,137,22],[147,44,137,23],[147,47,137,26],[147,48,137,27],[148,10,138,16],[148,14,138,20,"procedures"],[148,24,138,30],[148,25,138,31,"newPath"],[148,32,138,38],[148,33,138,39],[148,35,138,41],[149,12,139,20],[149,18,139,26],[149,22,139,30,"Error"],[149,27,139,35],[149,28,139,36],[149,46,139,54,"newPath"],[149,53,139,61],[149,55,139,63],[149,56,139,64],[150,10,140,16],[151,10,141,16,"procedures"],[151,20,141,26],[151,21,141,27,"newPath"],[151,28,141,34],[151,29,141,35],[151,32,141,38,"item"],[151,36,141,42],[152,10,142,16,"aggregate"],[152,19,142,25],[152,20,142,26,"key"],[152,23,142,29],[152,24,142,30],[152,27,142,33,"item"],[152,31,142,37],[153,8,143,12],[154,8,144,12],[154,15,144,19,"aggregate"],[154,24,144,28],[155,6,145,8],[156,6,146,8],[156,10,146,14,"record"],[156,16,146,20],[156,19,146,23,"step"],[156,23,146,27],[156,24,146,28,"input"],[156,29,146,33],[156,30,146,34],[157,6,147,8],[157,10,147,14,"_def"],[157,14,147,18],[157,17,147,21],[158,8,148,12,"_config"],[158,15,148,19],[158,17,148,21,"config"],[158,23,148,27],[159,8,149,12,"router"],[159,14,149,18],[159,16,149,20],[159,20,149,24],[160,8,150,12,"procedures"],[160,18,150,22],[161,8,151,12,"lazy"],[161,12,151,16],[162,8,152,12],[162,11,152,15,"emptyRouter"],[162,22,152,26],[163,8,153,12,"record"],[164,6,154,8],[164,7,154,9],[165,6,155,8],[165,10,155,14,"router"],[165,16,155,20],[165,19,155,23],[166,8,156,12],[166,11,156,15,"record"],[166,17,156,21],[167,8,157,12,"_def"],[167,12,157,16],[168,8,158,12,"createCaller"],[168,20,158,24],[168,22,158,26,"createCallerFactory"],[168,41,158,45],[168,42,158,46],[168,43,158,47],[168,44,158,48],[169,10,159,16,"_def"],[170,8,160,12],[170,9,160,13],[171,6,161,8],[171,7,161,9],[172,6,162,8],[172,13,162,15,"router"],[172,19,162,21],[173,4,163,4],[174,4,164,4],[174,11,164,11,"createRouterInner"],[174,28,164,28],[175,2,165,0],[176,2,166,0],[176,11,166,9,"isProcedure"],[176,22,166,20,"isProcedure"],[176,23,166,21,"procedureOrRouter"],[176,40,166,38],[176,42,166,40],[177,4,167,4],[177,11,167,11],[177,18,167,18,"procedureOrRouter"],[177,35,167,35],[177,40,167,40],[177,50,167,50],[178,2,168,0],[179,2,169,0],[180,0,170,0],[181,0,171,0],[182,2,169,0],[182,11,171,19,"getProcedureAtPath"],[182,29,171,37,"getProcedureAtPath"],[182,30,171,37,"_x"],[182,32,171,37],[182,34,171,37,"_x2"],[182,37,171,37],[183,4,171,37],[183,11,171,37,"_getProcedureAtPath"],[183,30,171,37],[183,31,171,37,"apply"],[183,36,171,37],[183,43,171,37,"arguments"],[183,52,171,37],[184,2,171,37],[185,2,188,0],[186,0,189,0],[187,0,190,0],[188,2,188,0],[188,11,188,0,"_getProcedureAtPath"],[188,31,188,0],[189,4,188,0,"_getProcedureAtPath"],[189,23,188,0],[189,30,188,0,"_asyncToGenerator2"],[189,48,188,0],[189,49,188,0,"default"],[189,56,188,0],[189,58,171,4],[189,69,171,38,"router"],[189,75,171,44],[189,77,171,46,"path"],[189,81,171,50],[189,83,171,52],[190,6,172,4],[190,10,172,12,"_def"],[190,14,172,16],[190,17,172,21,"router"],[190,23,172,27],[190,24,172,12,"_def"],[190,28,172,16],[191,6,173,4],[191,10,173,8,"procedure"],[191,19,173,17],[191,22,173,20,"_def"],[191,26,173,24],[191,27,173,25,"procedures"],[191,37,173,35],[191,38,173,36,"path"],[191,42,173,40],[191,43,173,41],[192,6,174,4],[192,13,174,10],[192,14,174,11,"procedure"],[192,23,174,20],[192,25,174,21],[193,8,175,8],[193,12,175,14,"key"],[193,15,175,17],[193,18,175,20,"Object"],[193,24,175,26],[193,25,175,27,"keys"],[193,29,175,31],[193,30,175,32,"_def"],[193,34,175,36],[193,35,175,37,"lazy"],[193,39,175,41],[193,40,175,42],[193,41,175,43,"find"],[193,45,175,47],[193,46,175,49,"key"],[193,49,175,52],[193,53,175,55,"path"],[193,57,175,59],[193,58,175,60,"startsWith"],[193,68,175,70],[193,69,175,71,"key"],[193,72,175,74],[193,73,175,75],[193,74,175,76],[194,8,176,8],[195,8,177,8],[195,12,177,12],[195,13,177,13,"key"],[195,16,177,16],[195,18,177,18],[196,10,178,12],[196,17,178,19],[196,21,178,23],[197,8,179,8],[198,8,180,8],[199,8,181,8],[200,8,182,8],[200,12,182,14,"lazyRouter"],[200,22,182,24],[200,25,182,27,"_def"],[200,29,182,31],[200,30,182,32,"lazy"],[200,34,182,36],[200,35,182,37,"key"],[200,38,182,40],[200,39,182,41],[201,8,183,8],[201,14,183,14,"lazyRouter"],[201,24,183,24],[201,25,183,25,"load"],[201,29,183,29],[201,30,183,30],[201,31,183,31],[202,8,184,8,"procedure"],[202,17,184,17],[202,20,184,20,"_def"],[202,24,184,24],[202,25,184,25,"procedures"],[202,35,184,35],[202,36,184,36,"path"],[202,40,184,40],[202,41,184,41],[203,6,185,4],[204,6,186,4],[204,13,186,11,"procedure"],[204,22,186,20],[205,4,187,0],[205,5,187,1],[206,4,187,1],[206,11,187,1,"_getProcedureAtPath"],[206,30,187,1],[206,31,187,1,"apply"],[206,36,187,1],[206,43,187,1,"arguments"],[206,52,187,1],[207,2,187,1],[208,2,187,1],[208,11,190,19,"callProcedure"],[208,24,190,32,"callProcedure"],[208,25,190,32,"_x3"],[208,28,190,32],[209,4,190,32],[209,11,190,32,"_callProcedure"],[209,25,190,32],[209,26,190,32,"apply"],[209,31,190,32],[209,38,190,32,"arguments"],[209,47,190,32],[210,2,190,32],[211,2,190,32],[211,11,190,32,"_callProcedure"],[211,26,190,32],[212,4,190,32,"_callProcedure"],[212,18,190,32],[212,25,190,32,"_asyncToGenerator2"],[212,43,190,32],[212,44,190,32,"default"],[212,51,190,32],[212,53,190,4],[212,64,190,33,"opts"],[212,68,190,37],[212,70,190,39],[213,6,191,4],[213,10,191,12,"type"],[213,14,191,16],[213,17,191,27,"opts"],[213,21,191,31],[213,22,191,12,"type"],[213,26,191,16],[214,8,191,18,"path"],[214,12,191,22],[214,15,191,27,"opts"],[214,19,191,31],[214,20,191,18,"path"],[214,24,191,22],[215,6,192,4],[215,10,192,10,"proc"],[215,14,192,14],[215,23,192,23,"getProcedureAtPath"],[215,41,192,41],[215,42,192,42,"opts"],[215,46,192,46],[215,47,192,47,"router"],[215,53,192,53],[215,55,192,55,"path"],[215,59,192,59],[215,60,192,60],[216,6,193,4],[216,10,193,8],[216,11,193,9,"proc"],[216,15,193,13],[216,19,193,17],[216,20,193,18,"isProcedure"],[216,31,193,29],[216,32,193,30,"proc"],[216,36,193,34],[216,37,193,35],[216,41,193,39,"proc"],[216,45,193,43],[216,46,193,44,"_def"],[216,50,193,48],[216,51,193,49,"type"],[216,55,193,53],[216,60,193,58,"type"],[216,64,193,62],[216,68,193,66],[216,69,193,67,"opts"],[216,73,193,71],[216,74,193,72,"allowMethodOverride"],[216,93,193,91],[216,95,193,93],[217,8,194,8],[217,14,194,14],[217,18,194,18,"TRPCError"],[217,38,194,27],[217,39,194,28],[218,10,195,12,"code"],[218,14,195,16],[218,16,195,18],[218,27,195,29],[219,10,196,12,"message"],[219,17,196,19],[219,19,196,21],[219,26,196,28,"type"],[219,30,196,32],[219,54,196,56,"path"],[219,58,196,60],[220,8,197,8],[220,9,197,9],[220,10,197,10],[221,6,198,4],[222,6,199,4],[223,6,199,42],[223,10,199,46,"proc"],[223,14,199,50],[223,15,199,51,"_def"],[223,19,199,55],[223,20,199,56,"type"],[223,24,199,60],[223,29,199,65,"type"],[223,33,199,69],[223,37,199,73,"opts"],[223,41,199,77],[223,42,199,78,"allowMethodOverride"],[223,61,199,97],[223,65,199,101,"proc"],[223,69,199,105],[223,70,199,106,"_def"],[223,74,199,110],[223,75,199,111,"type"],[223,79,199,115],[223,84,199,120],[223,98,199,134],[223,100,199,136],[224,8,200,8],[224,14,200,14],[224,18,200,18,"TRPCError"],[224,38,200,27],[224,39,200,28],[225,10,201,12,"code"],[225,14,201,16],[225,16,201,18],[225,38,201,40],[226,10,202,12,"message"],[226,17,202,19],[226,19,202,21],[227,8,203,8],[227,9,203,9],[227,10,203,10],[228,6,204,4],[229,6,205,4],[229,13,205,11,"proc"],[229,17,205,15],[229,18,205,16,"opts"],[229,22,205,20],[229,23,205,21],[230,4,206,0],[230,5,206,1],[231,4,206,1],[231,11,206,1,"_callProcedure"],[231,25,206,1],[231,26,206,1,"apply"],[231,31,206,1],[231,38,206,1,"arguments"],[231,47,206,1],[232,2,206,1],[233,2,207,0],[233,11,207,9,"createCallerFactory"],[233,30,207,28,"createCallerFactory"],[233,31,207,28],[233,33,207,31],[234,4,208,4],[234,11,208,11],[234,20,208,20,"createCallerInner"],[234,37,208,37,"createCallerInner"],[234,38,208,38,"router"],[234,44,208,44],[234,46,208,46],[235,6,209,8],[235,10,209,16,"_def"],[235,14,209,20],[235,17,209,25,"router"],[235,23,209,31],[235,24,209,16,"_def"],[235,28,209,20],[236,6,210,8],[236,13,210,15],[236,22,210,24,"createCaller"],[236,34,210,36,"createCaller"],[236,35,210,37,"ctxOrCallback"],[236,48,210,50],[236,50,210,52,"opts"],[236,54,210,56],[236,56,210,58],[237,8,211,12],[237,15,211,19],[237,19,211,19,"createRecursiveProxy"],[237,52,211,39],[238,10,211,39],[238,14,211,39,"_ref7"],[238,19,211,39],[238,26,211,39,"_asyncToGenerator2"],[238,44,211,39],[238,45,211,39,"default"],[238,52,211,39],[238,54,211,40],[238,65,211,40,"_ref6"],[238,70,211,40],[238,72,211,64],[239,12,211,64],[239,16,211,49,"path"],[239,20,211,53],[239,23,211,53,"_ref6"],[239,28,211,53],[239,29,211,49,"path"],[239,33,211,53],[240,14,211,55,"args"],[240,18,211,59],[240,21,211,59,"_ref6"],[240,26,211,59],[240,27,211,55,"args"],[240,31,211,59],[241,12,212,16],[241,16,212,22,"fullPath"],[241,24,212,30],[241,27,212,33,"path"],[241,31,212,37],[241,32,212,38,"join"],[241,36,212,42],[241,37,212,43],[241,40,212,46],[241,41,212,47],[242,12,213,16],[242,16,213,20,"path"],[242,20,213,24],[242,21,213,25,"length"],[242,27,213,31],[242,32,213,36],[242,33,213,37],[242,37,213,41,"path"],[242,41,213,45],[242,42,213,46],[242,43,213,47],[242,44,213,48],[242,49,213,53],[242,55,213,59],[242,57,213,61],[243,14,214,20],[243,21,214,27,"_def"],[243,25,214,31],[244,12,215,16],[245,12,216,16],[245,16,216,22,"procedure"],[245,25,216,31],[245,34,216,40,"getProcedureAtPath"],[245,52,216,58],[245,53,216,59,"router"],[245,59,216,65],[245,61,216,67,"fullPath"],[245,69,216,75],[245,70,216,76],[246,12,217,16],[246,16,217,20,"ctx"],[246,19,217,23],[246,22,217,26,"undefined"],[246,31,217,35],[247,12,218,16],[247,16,218,20],[248,14,219,20],[248,18,219,24],[248,19,219,25,"procedure"],[248,28,219,34],[248,30,219,36],[249,16,220,24],[249,22,220,30],[249,26,220,34,"TRPCError"],[249,46,220,43],[249,47,220,44],[250,18,221,28,"code"],[250,22,221,32],[250,24,221,34],[250,35,221,45],[251,18,222,28,"message"],[251,25,222,35],[251,27,222,37],[251,58,222,68,"path"],[251,62,222,72],[252,16,223,24],[252,17,223,25],[252,18,223,26],[253,14,224,20],[254,14,225,20,"ctx"],[254,17,225,23],[254,20,225,26],[254,24,225,26,"isFunction"],[254,41,225,36],[254,43,225,37,"ctxOrCallback"],[254,56,225,50],[254,57,225,51],[254,66,225,60,"Promise"],[254,73,225,67],[254,74,225,68,"resolve"],[254,81,225,75],[254,82,225,76,"ctxOrCallback"],[254,95,225,89],[254,96,225,90],[254,97,225,91],[254,98,225,92],[254,101,225,95,"ctxOrCallback"],[254,114,225,108],[255,14,226,20],[255,27,226,33,"procedure"],[255,36,226,42],[255,37,226,43],[256,16,227,24,"path"],[256,20,227,28],[256,22,227,30,"fullPath"],[256,30,227,38],[257,16,228,24,"getRawInput"],[257,27,228,35],[258,18,228,35],[258,22,228,35,"_ref8"],[258,27,228,35],[258,34,228,35,"_asyncToGenerator2"],[258,52,228,35],[258,53,228,35,"default"],[258,60,228,35],[258,62,228,37],[259,20,228,37],[259,27,228,47,"args"],[259,31,228,51],[259,32,228,52],[259,33,228,53],[259,34,228,54],[260,18,228,54],[261,18,228,54],[261,34,228,24,"getRawInput"],[261,45,228,35,"getRawInput"],[261,46,228,35],[262,20,228,35],[262,27,228,35,"_ref8"],[262,32,228,35],[262,33,228,35,"apply"],[262,38,228,35],[262,45,228,35,"arguments"],[262,54,228,35],[263,18,228,35],[264,16,228,35],[264,19,228,54],[265,16,229,24,"ctx"],[265,19,229,27],[266,16,230,24,"type"],[266,20,230,28],[266,22,230,30,"procedure"],[266,31,230,39],[266,32,230,40,"_def"],[266,36,230,44],[266,37,230,45,"type"],[266,41,230,49],[267,16,231,24,"signal"],[267,22,231,30],[267,24,231,32,"opts"],[267,28,231,36],[267,30,231,38,"signal"],[268,14,232,20],[268,15,232,21],[268,16,232,22],[269,12,233,16],[269,13,233,17],[269,14,233,18],[269,21,233,25,"cause"],[269,26,233,30],[269,28,233,32],[270,14,234,20,"opts"],[270,18,234,24],[270,20,234,26,"onError"],[270,27,234,33],[270,30,234,36],[271,16,235,24,"ctx"],[271,19,235,27],[272,16,236,24,"error"],[272,21,236,29],[272,23,236,31],[272,27,236,31,"getTRPCErrorFromUnknown"],[272,61,236,54],[272,63,236,55,"cause"],[272,68,236,60],[272,69,236,61],[273,16,237,24,"input"],[273,21,237,29],[273,23,237,31,"args"],[273,27,237,35],[273,28,237,36],[273,29,237,37],[273,30,237,38],[274,16,238,24,"path"],[274,20,238,28],[274,22,238,30,"fullPath"],[274,30,238,38],[275,16,239,24,"type"],[275,20,239,28],[275,22,239,30,"procedure"],[275,31,239,39],[275,33,239,41,"_def"],[275,37,239,45],[275,38,239,46,"type"],[275,42,239,50],[275,46,239,54],[276,14,240,20],[276,15,240,21],[276,16,240,22],[277,14,241,20],[277,20,241,26,"cause"],[277,25,241,31],[278,12,242,16],[279,10,243,12],[279,11,243,13],[280,10,243,13],[280,27,243,13,"_x4"],[280,30,243,13],[281,12,243,13],[281,19,243,13,"_ref7"],[281,24,243,13],[281,25,243,13,"apply"],[281,30,243,13],[281,37,243,13,"arguments"],[281,46,243,13],[282,10,243,13],[283,8,243,13],[283,12,243,14],[284,6,244,8],[284,7,244,9],[285,4,245,4],[285,5,245,5],[286,2,246,0],[287,2,247,0],[287,11,247,9,"mergeRouters"],[287,23,247,21,"mergeRouters"],[287,24,247,21],[287,26,247,37],[288,4,247,37],[288,13,247,37,"_len"],[288,17,247,37],[288,20,247,37,"arguments"],[288,29,247,37],[288,30,247,37,"length"],[288,36,247,37],[288,38,247,25,"routerList"],[288,48,247,35],[288,55,247,35,"Array"],[288,60,247,35],[288,61,247,35,"_len"],[288,65,247,35],[288,68,247,35,"_key"],[288,72,247,35],[288,78,247,35,"_key"],[288,82,247,35],[288,85,247,35,"_len"],[288,89,247,35],[288,91,247,35,"_key"],[288,95,247,35],[289,6,247,25,"routerList"],[289,16,247,35],[289,17,247,35,"_key"],[289,21,247,35],[289,25,247,35,"arguments"],[289,34,247,35],[289,35,247,35,"_key"],[289,39,247,35],[290,4,247,35],[291,4,248,4],[291,8,248,10,"record"],[291,14,248,16],[291,17,248,19],[291,21,248,19,"mergeWithoutOverrides"],[291,49,248,40],[291,51,248,41],[291,52,248,42],[291,53,248,43],[291,55,248,45],[291,58,248,48,"routerList"],[291,68,248,58],[291,69,248,59,"map"],[291,72,248,62],[291,73,248,64,"r"],[291,74,248,65],[291,78,248,68,"r"],[291,79,248,69],[291,80,248,70,"_def"],[291,84,248,74],[291,85,248,75,"record"],[291,91,248,81],[291,92,248,82],[291,93,248,83],[292,4,249,4],[292,8,249,10,"errorFormatter"],[292,22,249,24],[292,25,249,27,"routerList"],[292,35,249,37],[292,36,249,38,"reduce"],[292,42,249,44],[292,43,249,45],[292,44,249,46,"currentErrorFormatter"],[292,65,249,67],[292,67,249,69,"nextRouter"],[292,77,249,79],[292,82,249,82],[293,6,250,8],[293,10,250,12,"nextRouter"],[293,20,250,22],[293,21,250,23,"_def"],[293,25,250,27],[293,26,250,28,"_config"],[293,33,250,35],[293,34,250,36,"errorFormatter"],[293,48,250,50],[293,52,250,54,"nextRouter"],[293,62,250,64],[293,63,250,65,"_def"],[293,67,250,69],[293,68,250,70,"_config"],[293,75,250,77],[293,76,250,78,"errorFormatter"],[293,90,250,92],[293,95,250,97,"defaultFormatter"],[293,122,250,113],[293,124,250,115],[294,8,251,12],[294,12,251,16,"currentErrorFormatter"],[294,33,251,37],[294,38,251,42,"defaultFormatter"],[294,65,251,58],[294,69,251,62,"currentErrorFormatter"],[294,90,251,83],[294,95,251,88,"nextRouter"],[294,105,251,98],[294,106,251,99,"_def"],[294,110,251,103],[294,111,251,104,"_config"],[294,118,251,111],[294,119,251,112,"errorFormatter"],[294,133,251,126],[294,135,251,128],[295,10,252,16],[295,16,252,22],[295,20,252,26,"Error"],[295,25,252,31],[295,26,252,32],[295,69,252,75],[295,70,252,76],[296,8,253,12],[297,8,254,12],[297,15,254,19,"nextRouter"],[297,25,254,29],[297,26,254,30,"_def"],[297,30,254,34],[297,31,254,35,"_config"],[297,38,254,42],[297,39,254,43,"errorFormatter"],[297,53,254,57],[298,6,255,8],[299,6,256,8],[299,13,256,15,"currentErrorFormatter"],[299,34,256,36],[300,4,257,4],[300,5,257,5],[300,7,257,7,"defaultFormatter"],[300,34,257,23],[300,35,257,24],[301,4,258,4],[301,8,258,10,"transformer"],[301,19,258,21],[301,22,258,24,"routerList"],[301,32,258,34],[301,33,258,35,"reduce"],[301,39,258,41],[301,40,258,42],[301,41,258,43,"prev"],[301,45,258,47],[301,47,258,49,"current"],[301,54,258,56],[301,59,258,59],[302,6,259,8],[302,10,259,12,"current"],[302,17,259,19],[302,18,259,20,"_def"],[302,22,259,24],[302,23,259,25,"_config"],[302,30,259,32],[302,31,259,33,"transformer"],[302,42,259,44],[302,46,259,48,"current"],[302,53,259,55],[302,54,259,56,"_def"],[302,58,259,60],[302,59,259,61,"_config"],[302,66,259,68],[302,67,259,69,"transformer"],[302,78,259,80],[302,83,259,85,"defaultTransformer"],[302,114,259,103],[302,116,259,105],[303,8,260,12],[303,12,260,16,"prev"],[303,16,260,20],[303,21,260,25,"defaultTransformer"],[303,52,260,43],[303,56,260,47,"prev"],[303,60,260,51],[303,65,260,56,"current"],[303,72,260,63],[303,73,260,64,"_def"],[303,77,260,68],[303,78,260,69,"_config"],[303,85,260,76],[303,86,260,77,"transformer"],[303,97,260,88],[303,99,260,90],[304,10,261,16],[304,16,261,22],[304,20,261,26,"Error"],[304,25,261,31],[304,26,261,32],[304,65,261,71],[304,66,261,72],[305,8,262,12],[306,8,263,12],[306,15,263,19,"current"],[306,22,263,26],[306,23,263,27,"_def"],[306,27,263,31],[306,28,263,32,"_config"],[306,35,263,39],[306,36,263,40,"transformer"],[306,47,263,51],[307,6,264,8],[308,6,265,8],[308,13,265,15,"prev"],[308,17,265,19],[309,4,266,4],[309,5,266,5],[309,7,266,7,"defaultTransformer"],[309,38,266,25],[309,39,266,26],[310,4,267,4],[310,8,267,10,"router"],[310,14,267,16],[310,17,267,19,"createRouterFactory"],[310,36,267,38],[310,37,267,39],[311,6,268,8,"errorFormatter"],[311,20,268,22],[312,6,269,8,"transformer"],[312,17,269,19],[313,6,270,8,"isDev"],[313,11,270,13],[313,13,270,15,"routerList"],[313,23,270,25],[313,24,270,26,"every"],[313,29,270,31],[313,30,270,33,"r"],[313,31,270,34],[313,35,270,37,"r"],[313,36,270,38],[313,37,270,39,"_def"],[313,41,270,43],[313,42,270,44,"_config"],[313,49,270,51],[313,50,270,52,"isDev"],[313,55,270,57],[313,56,270,58],[314,6,271,8,"allowOutsideOfServer"],[314,26,271,28],[314,28,271,30,"routerList"],[314,38,271,40],[314,39,271,41,"every"],[314,44,271,46],[314,45,271,48,"r"],[314,46,271,49],[314,50,271,52,"r"],[314,51,271,53],[314,52,271,54,"_def"],[314,56,271,58],[314,57,271,59,"_config"],[314,64,271,66],[314,65,271,67,"allowOutsideOfServer"],[314,85,271,87],[314,86,271,88],[315,6,272,8,"isServer"],[315,14,272,16],[315,16,272,18,"routerList"],[315,26,272,28],[315,27,272,29,"every"],[315,32,272,34],[315,33,272,36,"r"],[315,34,272,37],[315,38,272,40,"r"],[315,39,272,41],[315,40,272,42,"_def"],[315,44,272,46],[315,45,272,47,"_config"],[315,52,272,54],[315,53,272,55,"isServer"],[315,61,272,63],[315,62,272,64],[316,6,273,8,"$types"],[316,12,273,14],[316,14,273,16,"routerList"],[316,24,273,26],[316,25,273,27],[316,26,273,28],[316,27,273,29],[316,29,273,31,"_def"],[316,33,273,35],[316,34,273,36,"_config"],[316,41,273,43],[316,42,273,44,"$types"],[317,4,274,4],[317,5,274,5],[317,6,274,6],[317,7,274,7,"record"],[317,13,274,13],[317,14,274,14],[318,4,275,4],[318,11,275,11,"router"],[318,17,275,17],[319,2,276,0],[320,0,276,1],[320,3]],"functionMap":{"names":["<global>","once","<anonymous>","lazy","resolve","isLazy","isRouter","createRouterFactory","createRouterInner","Object.keys.filter$argument_0","createLazyLoader","once$argument_0","step","isProcedure","getProcedureAtPath","Object.keys.find$argument_0","callProcedure","createCallerFactory","createCallerInner","createCaller","createRecursiveProxy$argument_0","procedure$argument_0.getRawInput","mergeRouters","routerList.map$argument_0","routerList.reduce$argument_0","routerList.every$argument_0"],"mappings":"AAA;ACO;WCG;KDK;CDC;IGI;ICC;KDW;CHG;AKC;CLE;AMC;CNE;IOyB;ICC;oECC,8BD;QEM;2BCG;iBDuB;SFE;QIC;SJyC;KDkB;CPE;AaC;CbE;IcG;gDCI,2BD;CdY;IgBG;ChBgB;AiBC;WCC;eCE;wCCC;qCCiB,iBD;aDe;SDC;KDC;CjBC;AsBC;+DCC,kBD;6CEC;KFQ;0CEC;KFQ;gCGI,yBH;+CGC,wCH;mCGC,4BH;CtBI"}},"type":"js/module"}]}