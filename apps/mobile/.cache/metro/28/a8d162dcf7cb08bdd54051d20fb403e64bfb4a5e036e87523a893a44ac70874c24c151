{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.abortSignalsAnyPonyfill = abortSignalsAnyPonyfill;\n  exports.assert = assert;\n  exports.identity = identity;\n  exports.isAsyncIterable = isAsyncIterable;\n  exports.isFunction = isFunction;\n  exports.isObject = isObject;\n  exports.mergeWithoutOverrides = mergeWithoutOverrides;\n  exports.noop = noop;\n  exports.omitPrototype = omitPrototype;\n  exports.run = void 0;\n  exports.sleep = sleep;\n  exports.unsetMarker = void 0;\n  /** @internal */var unsetMarker = exports.unsetMarker = Symbol();\n  /**\n   * Ensures there are no duplicate keys when building a procedure.\n   * @internal\n   */\n  function mergeWithoutOverrides(obj1) {\n    var newObj = Object.assign(Object.create(null), obj1);\n    for (var _len = arguments.length, objs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      objs[_key - 1] = arguments[_key];\n    }\n    for (var overrides of objs) {\n      for (var key in overrides) {\n        if (key in newObj && newObj[key] !== overrides[key]) {\n          throw new Error(`Duplicate key ${key}`);\n        }\n        newObj[key] = overrides[key];\n      }\n    }\n    return newObj;\n  }\n  /**\n   * Check that value is object\n   * @internal\n   */\n  function isObject(value) {\n    return !!value && !Array.isArray(value) && typeof value === 'object';\n  }\n  function isFunction(fn) {\n    return typeof fn === 'function';\n  }\n  /**\n   * Create an object without inheriting anything from `Object.prototype`\n   * @internal\n   */\n  function omitPrototype(obj) {\n    return Object.assign(Object.create(null), obj);\n  }\n  var asyncIteratorsSupported = typeof Symbol === 'function' && !!Symbol.asyncIterator;\n  function isAsyncIterable(value) {\n    return asyncIteratorsSupported && isObject(value) && Symbol.asyncIterator in value;\n  }\n  /**\n   * Run an IIFE\n   */\n  var run = fn => fn();\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  exports.run = run;\n  function noop() {}\n  function identity(it) {\n    return it;\n  }\n  /**\n   * Generic runtime assertion function. Throws, if the condition is not `true`.\n   *\n   * Can be used as a slightly less dangerous variant of type assertions. Code\n   * mistakes would be revealed at runtime then (hopefully during testing).\n   */\n  function assert(condition) {\n    var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'no additional info';\n    if (!condition) {\n      throw new Error(`AssertionError: ${msg}`);\n    }\n  }\n  function sleep() {\n    var ms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return new Promise(res => setTimeout(res, ms));\n  }\n  /**\n   * Ponyfill for\n   * [`AbortSignal.any`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/any_static).\n   */\n  function abortSignalsAnyPonyfill(signals) {\n    if (typeof AbortSignal.any === 'function') {\n      return AbortSignal.any(signals);\n    }\n    var ac = new AbortController();\n    for (var signal of signals) {\n      if (signal.aborted) {\n        trigger();\n        break;\n      }\n      signal.addEventListener('abort', trigger, {\n        once: true\n      });\n    }\n    return ac.signal;\n    function trigger() {\n      ac.abort();\n      for (var _signal of signals) {\n        _signal.removeEventListener('abort', trigger);\n      }\n    }\n  }\n});","lineCount":110,"map":[[17,2,1,0],[17,18,1,17],[17,22,1,23,"unsetMarker"],[17,33,1,34],[17,36,1,34,"exports"],[17,43,1,34],[17,44,1,34,"unsetMarker"],[17,55,1,34],[17,58,1,37,"Symbol"],[17,64,1,43],[17,65,1,44],[17,66,1,45],[18,2,2,0],[19,0,3,0],[20,0,4,0],[21,0,5,0],[22,2,5,4],[22,11,5,13,"mergeWithoutOverrides"],[22,32,5,34,"mergeWithoutOverrides"],[22,33,5,35,"obj1"],[22,37,5,39],[22,39,5,50],[23,4,6,4],[23,8,6,10,"newObj"],[23,14,6,16],[23,17,6,19,"Object"],[23,23,6,25],[23,24,6,26,"assign"],[23,30,6,32],[23,31,6,33,"Object"],[23,37,6,39],[23,38,6,40,"create"],[23,44,6,46],[23,45,6,47],[23,49,6,51],[23,50,6,52],[23,52,6,54,"obj1"],[23,56,6,58],[23,57,6,59],[24,4,6,60],[24,13,6,60,"_len"],[24,17,6,60],[24,20,6,60,"arguments"],[24,29,6,60],[24,30,6,60,"length"],[24,36,6,60],[24,38,5,44,"objs"],[24,42,5,48],[24,49,5,48,"Array"],[24,54,5,48],[24,55,5,48,"_len"],[24,59,5,48],[24,66,5,48,"_len"],[24,70,5,48],[24,81,5,48,"_key"],[24,85,5,48],[24,91,5,48,"_key"],[24,95,5,48],[24,98,5,48,"_len"],[24,102,5,48],[24,104,5,48,"_key"],[24,108,5,48],[25,6,5,44,"objs"],[25,10,5,48],[25,11,5,48,"_key"],[25,15,5,48],[25,23,5,48,"arguments"],[25,32,5,48],[25,33,5,48,"_key"],[25,37,5,48],[26,4,5,48],[27,4,7,4],[27,9,7,9],[27,13,7,15,"overrides"],[27,22,7,24],[27,26,7,28,"objs"],[27,30,7,32],[27,32,7,33],[28,6,8,8],[28,11,8,12],[28,15,8,18,"key"],[28,18,8,21],[28,22,8,25,"overrides"],[28,31,8,34],[28,33,8,35],[29,8,9,12],[29,12,9,16,"key"],[29,15,9,19],[29,19,9,23,"newObj"],[29,25,9,29],[29,29,9,33,"newObj"],[29,35,9,39],[29,36,9,40,"key"],[29,39,9,43],[29,40,9,44],[29,45,9,49,"overrides"],[29,54,9,58],[29,55,9,59,"key"],[29,58,9,62],[29,59,9,63],[29,61,9,65],[30,10,10,16],[30,16,10,22],[30,20,10,26,"Error"],[30,25,10,31],[30,26,10,32],[30,43,10,49,"key"],[30,46,10,52],[30,48,10,54],[30,49,10,55],[31,8,11,12],[32,8,12,12,"newObj"],[32,14,12,18],[32,15,12,19,"key"],[32,18,12,22],[32,19,12,23],[32,22,12,26,"overrides"],[32,31,12,35],[32,32,12,36,"key"],[32,35,12,39],[32,36,12,40],[33,6,13,8],[34,4,14,4],[35,4,15,4],[35,11,15,11,"newObj"],[35,17,15,17],[36,2,16,0],[37,2,17,0],[38,0,18,0],[39,0,19,0],[40,0,20,0],[41,2,20,4],[41,11,20,13,"isObject"],[41,19,20,21,"isObject"],[41,20,20,22,"value"],[41,25,20,27],[41,27,20,29],[42,4,21,4],[42,11,21,11],[42,12,21,12],[42,13,21,13,"value"],[42,18,21,18],[42,22,21,22],[42,23,21,23,"Array"],[42,28,21,28],[42,29,21,29,"isArray"],[42,36,21,36],[42,37,21,37,"value"],[42,42,21,42],[42,43,21,43],[42,47,21,47],[42,54,21,54,"value"],[42,59,21,59],[42,64,21,64],[42,72,21,72],[43,2,22,0],[44,2,23,0],[44,11,23,9,"isFunction"],[44,21,23,19,"isFunction"],[44,22,23,20,"fn"],[44,24,23,22],[44,26,23,24],[45,4,24,4],[45,11,24,11],[45,18,24,18,"fn"],[45,20,24,20],[45,25,24,25],[45,35,24,35],[46,2,25,0],[47,2,26,0],[48,0,27,0],[49,0,28,0],[50,0,29,0],[51,2,29,4],[51,11,29,13,"omitPrototype"],[51,24,29,26,"omitPrototype"],[51,25,29,27,"obj"],[51,28,29,30],[51,30,29,32],[52,4,30,4],[52,11,30,11,"Object"],[52,17,30,17],[52,18,30,18,"assign"],[52,24,30,24],[52,25,30,25,"Object"],[52,31,30,31],[52,32,30,32,"create"],[52,38,30,38],[52,39,30,39],[52,43,30,43],[52,44,30,44],[52,46,30,46,"obj"],[52,49,30,49],[52,50,30,50],[53,2,31,0],[54,2,32,0],[54,6,32,6,"asyncIteratorsSupported"],[54,29,32,29],[54,32,32,32],[54,39,32,39,"Symbol"],[54,45,32,45],[54,50,32,50],[54,60,32,60],[54,64,32,64],[54,65,32,65],[54,66,32,66,"Symbol"],[54,72,32,72],[54,73,32,73,"asyncIterator"],[54,86,32,86],[55,2,33,0],[55,11,33,9,"isAsyncIterable"],[55,26,33,24,"isAsyncIterable"],[55,27,33,25,"value"],[55,32,33,30],[55,34,33,32],[56,4,34,4],[56,11,34,11,"asyncIteratorsSupported"],[56,34,34,34],[56,38,34,38,"isObject"],[56,46,34,46],[56,47,34,47,"value"],[56,52,34,52],[56,53,34,53],[56,57,34,57,"Symbol"],[56,63,34,63],[56,64,34,64,"asyncIterator"],[56,77,34,77],[56,81,34,81,"value"],[56,86,34,86],[57,2,35,0],[58,2,36,0],[59,0,37,0],[60,0,38,0],[61,2,38,4],[61,6,38,10,"run"],[61,9,38,13],[61,12,38,17,"fn"],[61,14,38,19],[61,18,38,22,"fn"],[61,20,38,24],[61,21,38,25],[61,22,38,26],[62,2,39,0],[63,2,39,0,"exports"],[63,9,39,0],[63,10,39,0,"run"],[63,13,39,0],[63,16,39,0,"run"],[63,19,39,0],[64,2,40,0],[64,11,40,9,"noop"],[64,15,40,13,"noop"],[64,16,40,13],[64,18,40,16],[64,19,40,17],[65,2,41,0],[65,11,41,9,"identity"],[65,19,41,17,"identity"],[65,20,41,18,"it"],[65,22,41,20],[65,24,41,22],[66,4,42,4],[66,11,42,11,"it"],[66,13,42,13],[67,2,43,0],[68,2,44,0],[69,0,45,0],[70,0,46,0],[71,0,47,0],[72,0,48,0],[73,0,49,0],[74,2,49,4],[74,11,49,13,"assert"],[74,17,49,19,"assert"],[74,18,49,20,"condition"],[74,27,49,29],[74,29,49,59],[75,4,49,59],[75,8,49,31,"msg"],[75,11,49,34],[75,14,49,34,"arguments"],[75,23,49,34],[75,24,49,34,"length"],[75,30,49,34],[75,38,49,34,"arguments"],[75,47,49,34],[75,55,49,34,"undefined"],[75,64,49,34],[75,67,49,34,"arguments"],[75,76,49,34],[75,82,49,37],[75,102,49,57],[76,4,50,4],[76,8,50,8],[76,9,50,9,"condition"],[76,18,50,18],[76,20,50,20],[77,6,51,8],[77,12,51,14],[77,16,51,18,"Error"],[77,21,51,23],[77,22,51,24],[77,41,51,43,"msg"],[77,44,51,46],[77,46,51,48],[77,47,51,49],[78,4,52,4],[79,2,53,0],[80,2,54,0],[80,11,54,9,"sleep"],[80,16,54,14,"sleep"],[80,17,54,14],[80,19,54,23],[81,4,54,23],[81,8,54,15,"ms"],[81,10,54,17],[81,13,54,17,"arguments"],[81,22,54,17],[81,23,54,17,"length"],[81,29,54,17],[81,37,54,17,"arguments"],[81,46,54,17],[81,54,54,17,"undefined"],[81,63,54,17],[81,66,54,17,"arguments"],[81,75,54,17],[81,81,54,20],[81,82,54,21],[82,4,55,4],[82,11,55,11],[82,15,55,15,"Promise"],[82,22,55,22],[82,23,55,24,"res"],[82,26,55,27],[82,30,55,30,"setTimeout"],[82,40,55,40],[82,41,55,41,"res"],[82,44,55,44],[82,46,55,46,"ms"],[82,48,55,48],[82,49,55,49],[82,50,55,50],[83,2,56,0],[84,2,57,0],[85,0,58,0],[86,0,59,0],[87,0,60,0],[88,2,60,4],[88,11,60,13,"abortSignalsAnyPonyfill"],[88,34,60,36,"abortSignalsAnyPonyfill"],[88,35,60,37,"signals"],[88,42,60,44],[88,44,60,46],[89,4,61,4],[89,8,61,8],[89,15,61,15,"AbortSignal"],[89,26,61,26],[89,27,61,27,"any"],[89,30,61,30],[89,35,61,35],[89,45,61,45],[89,47,61,47],[90,6,62,8],[90,13,62,15,"AbortSignal"],[90,24,62,26],[90,25,62,27,"any"],[90,28,62,30],[90,29,62,31,"signals"],[90,36,62,38],[90,37,62,39],[91,4,63,4],[92,4,64,4],[92,8,64,10,"ac"],[92,10,64,12],[92,13,64,15],[92,17,64,19,"AbortController"],[92,32,64,34],[92,33,64,35],[92,34,64,36],[93,4,65,4],[93,9,65,9],[93,13,65,15,"signal"],[93,19,65,21],[93,23,65,25,"signals"],[93,30,65,32],[93,32,65,33],[94,6,66,8],[94,10,66,12,"signal"],[94,16,66,18],[94,17,66,19,"aborted"],[94,24,66,26],[94,26,66,28],[95,8,67,12,"trigger"],[95,15,67,19],[95,16,67,20],[95,17,67,21],[96,8,68,12],[97,6,69,8],[98,6,70,8,"signal"],[98,12,70,14],[98,13,70,15,"addEventListener"],[98,29,70,31],[98,30,70,32],[98,37,70,39],[98,39,70,41,"trigger"],[98,46,70,48],[98,48,70,50],[99,8,71,12,"once"],[99,12,71,16],[99,14,71,18],[100,6,72,8],[100,7,72,9],[100,8,72,10],[101,4,73,4],[102,4,74,4],[102,11,74,11,"ac"],[102,13,74,13],[102,14,74,14,"signal"],[102,20,74,20],[103,4,75,4],[103,13,75,13,"trigger"],[103,20,75,20,"trigger"],[103,21,75,20],[103,23,75,23],[104,6,76,8,"ac"],[104,8,76,10],[104,9,76,11,"abort"],[104,14,76,16],[104,15,76,17],[104,16,76,18],[105,6,77,8],[105,11,77,13],[105,15,77,19,"signal"],[105,22,77,25],[105,26,77,29,"signals"],[105,33,77,36],[105,35,77,37],[106,8,78,12,"signal"],[106,15,78,18],[106,16,78,19,"removeEventListener"],[106,35,78,38],[106,36,78,39],[106,43,78,46],[106,45,78,48,"trigger"],[106,52,78,55],[106,53,78,56],[107,6,79,8],[108,4,80,4],[109,2,81,0],[110,0,81,1],[110,3]],"functionMap":{"names":["<global>","mergeWithoutOverrides","isObject","isFunction","omitPrototype","isAsyncIterable","run","noop","identity","assert","sleep","Promise$argument_0","abortSignalsAnyPonyfill","trigger"],"mappings":"AAA;ICI;CDW;IEI;CFE;AGC;CHE;III;CJE;AKE;CLE;gBMG,UN;AOE,kBP;AQC;CRE;ISM;CTI;AUC;uBCC,0BD;CVC;IYI;ICe;KDK;CZC"}},"type":"js/module"}]}