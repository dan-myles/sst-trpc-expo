{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.allAbortSignals = allAbortSignals;\n  exports.raceAbortSignals = raceAbortSignals;\n  /**\n   * Like `Promise.all()` but for abort signals\n   * - When all signals have been aborted, the merged signal will be aborted\n   * - If one signal is `null`, no signal will be aborted\n   */\n  function allAbortSignals() {\n    var ac = new AbortController();\n    for (var _len = arguments.length, signals = new Array(_len), _key = 0; _key < _len; _key++) {\n      signals[_key] = arguments[_key];\n    }\n    var count = signals.length;\n    var abortedCount = 0;\n    var onAbort = () => {\n      if (++abortedCount === count) {\n        ac.abort();\n      }\n    };\n    for (var signal of signals) {\n      if (signal?.aborted) {\n        onAbort();\n      } else {\n        signal?.addEventListener('abort', onAbort, {\n          once: true\n        });\n      }\n    }\n    return ac.signal;\n  }\n  /**\n   * Like `Promise.race` but for abort signals\n   *\n   * Basically, a ponyfill for\n   * [`AbortSignal.any`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/any_static).\n   */\n  function raceAbortSignals() {\n    var ac = new AbortController();\n    for (var _len2 = arguments.length, signals = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      signals[_key2] = arguments[_key2];\n    }\n    for (var signal of signals) {\n      if (signal?.aborted) {\n        ac.abort();\n      } else {\n        signal?.addEventListener('abort', () => ac.abort(), {\n          once: true\n        });\n      }\n    }\n    return ac.signal;\n  }\n});","lineCount":57,"map":[[7,2,1,0],[8,0,2,0],[9,0,3,0],[10,0,4,0],[11,0,5,0],[12,2,5,4],[12,11,5,13,"allAbortSignals"],[12,26,5,28,"allAbortSignals"],[12,27,5,28],[12,29,5,41],[13,4,6,4],[13,8,6,10,"ac"],[13,10,6,12],[13,13,6,15],[13,17,6,19,"AbortController"],[13,32,6,34],[13,33,6,35],[13,34,6,36],[14,4,6,37],[14,13,6,37,"_len"],[14,17,6,37],[14,20,6,37,"arguments"],[14,29,6,37],[14,30,6,37,"length"],[14,36,6,37],[14,38,5,32,"signals"],[14,45,5,39],[14,52,5,39,"Array"],[14,57,5,39],[14,58,5,39,"_len"],[14,62,5,39],[14,65,5,39,"_key"],[14,69,5,39],[14,75,5,39,"_key"],[14,79,5,39],[14,82,5,39,"_len"],[14,86,5,39],[14,88,5,39,"_key"],[14,92,5,39],[15,6,5,32,"signals"],[15,13,5,39],[15,14,5,39,"_key"],[15,18,5,39],[15,22,5,39,"arguments"],[15,31,5,39],[15,32,5,39,"_key"],[15,36,5,39],[16,4,5,39],[17,4,7,4],[17,8,7,10,"count"],[17,13,7,15],[17,16,7,18,"signals"],[17,23,7,25],[17,24,7,26,"length"],[17,30,7,32],[18,4,8,4],[18,8,8,8,"abortedCount"],[18,20,8,20],[18,23,8,23],[18,24,8,24],[19,4,9,4],[19,8,9,10,"onAbort"],[19,15,9,17],[19,18,9,20,"onAbort"],[19,19,9,20],[19,24,9,24],[20,6,10,8],[20,10,10,12],[20,12,10,14,"abortedCount"],[20,24,10,26],[20,29,10,31,"count"],[20,34,10,36],[20,36,10,38],[21,8,11,12,"ac"],[21,10,11,14],[21,11,11,15,"abort"],[21,16,11,20],[21,17,11,21],[21,18,11,22],[22,6,12,8],[23,4,13,4],[23,5,13,5],[24,4,14,4],[24,9,14,9],[24,13,14,15,"signal"],[24,19,14,21],[24,23,14,25,"signals"],[24,30,14,32],[24,32,14,33],[25,6,15,8],[25,10,15,12,"signal"],[25,16,15,18],[25,18,15,20,"aborted"],[25,25,15,27],[25,27,15,29],[26,8,16,12,"onAbort"],[26,15,16,19],[26,16,16,20],[26,17,16,21],[27,6,17,8],[27,7,17,9],[27,13,17,15],[28,8,18,12,"signal"],[28,14,18,18],[28,16,18,20,"addEventListener"],[28,32,18,36],[28,33,18,37],[28,40,18,44],[28,42,18,46,"onAbort"],[28,49,18,53],[28,51,18,55],[29,10,19,16,"once"],[29,14,19,20],[29,16,19,22],[30,8,20,12],[30,9,20,13],[30,10,20,14],[31,6,21,8],[32,4,22,4],[33,4,23,4],[33,11,23,11,"ac"],[33,13,23,13],[33,14,23,14,"signal"],[33,20,23,20],[34,2,24,0],[35,2,25,0],[36,0,26,0],[37,0,27,0],[38,0,28,0],[39,0,29,0],[40,0,30,0],[41,2,30,4],[41,11,30,13,"raceAbortSignals"],[41,27,30,29,"raceAbortSignals"],[41,28,30,29],[41,30,30,42],[42,4,31,4],[42,8,31,10,"ac"],[42,10,31,12],[42,13,31,15],[42,17,31,19,"AbortController"],[42,32,31,34],[42,33,31,35],[42,34,31,36],[43,4,31,37],[43,13,31,37,"_len2"],[43,18,31,37],[43,21,31,37,"arguments"],[43,30,31,37],[43,31,31,37,"length"],[43,37,31,37],[43,39,30,33,"signals"],[43,46,30,40],[43,53,30,40,"Array"],[43,58,30,40],[43,59,30,40,"_len2"],[43,64,30,40],[43,67,30,40,"_key2"],[43,72,30,40],[43,78,30,40,"_key2"],[43,83,30,40],[43,86,30,40,"_len2"],[43,91,30,40],[43,93,30,40,"_key2"],[43,98,30,40],[44,6,30,33,"signals"],[44,13,30,40],[44,14,30,40,"_key2"],[44,19,30,40],[44,23,30,40,"arguments"],[44,32,30,40],[44,33,30,40,"_key2"],[44,38,30,40],[45,4,30,40],[46,4,32,4],[46,9,32,9],[46,13,32,15,"signal"],[46,19,32,21],[46,23,32,25,"signals"],[46,30,32,32],[46,32,32,33],[47,6,33,8],[47,10,33,12,"signal"],[47,16,33,18],[47,18,33,20,"aborted"],[47,25,33,27],[47,27,33,29],[48,8,34,12,"ac"],[48,10,34,14],[48,11,34,15,"abort"],[48,16,34,20],[48,17,34,21],[48,18,34,22],[49,6,35,8],[49,7,35,9],[49,13,35,15],[50,8,36,12,"signal"],[50,14,36,18],[50,16,36,20,"addEventListener"],[50,32,36,36],[50,33,36,37],[50,40,36,44],[50,42,36,46],[50,48,36,50,"ac"],[50,50,36,52],[50,51,36,53,"abort"],[50,56,36,58],[50,57,36,59],[50,58,36,60],[50,60,36,62],[51,10,37,16,"once"],[51,14,37,20],[51,16,37,22],[52,8,38,12],[52,9,38,13],[52,10,38,14],[53,6,39,8],[54,4,40,4],[55,4,41,4],[55,11,41,11,"ac"],[55,13,41,13],[55,14,41,14,"signal"],[55,20,41,20],[56,2,42,0],[57,0,42,1],[57,3]],"functionMap":{"names":["<global>","allAbortSignals","onAbort","raceAbortSignals","signal.addEventListener$argument_1"],"mappings":"AAA;ICI;oBCI;KDI;CDW;IGM;8CCM,cD;CHM"}},"type":"js/module"}]}