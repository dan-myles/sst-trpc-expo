{"dependencies":[{"name":"../procedure.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":50,"index":50}}],"key":"C+LIwrvjrgu1xQlKvPG5FwDGvo4="}},{"name":"../utils.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":51},"end":{"line":2,"column":40,"index":91}}],"key":"Fat1H7ILw/aiXtTd5J3KzMpI+dk="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.parseTRPCMessage = parseTRPCMessage;\n  var _procedure = require(_dependencyMap[0], \"../procedure.mjs\");\n  var _utils = require(_dependencyMap[1], \"../utils.mjs\");\n  /* istanbul ignore next -- @preserve */function assertIsObject(obj) {\n    if (!(0, _utils.isObject)(obj)) {\n      throw new Error('Not an object');\n    }\n  }\n  /* istanbul ignore next -- @preserve */\n  function assertIsProcedureType(obj) {\n    if (!_procedure.procedureTypes.includes(obj)) {\n      throw new Error('Invalid procedure type');\n    }\n  }\n  /* istanbul ignore next -- @preserve */\n  function assertIsRequestId(obj) {\n    if (obj !== null && typeof obj === 'number' && isNaN(obj) && typeof obj !== 'string') {\n      throw new Error('Invalid request id');\n    }\n  }\n  /* istanbul ignore next -- @preserve */\n  function assertIsString(obj) {\n    if (typeof obj !== 'string') {\n      throw new Error('Invalid string');\n    }\n  }\n  /* istanbul ignore next -- @preserve */\n  function assertIsJSONRPC2OrUndefined(obj) {\n    if (typeof obj !== 'undefined' && obj !== '2.0') {\n      throw new Error('Must be JSONRPC 2.0');\n    }\n  }\n  /** @public */\n  function parseTRPCMessage(obj, transformer) {\n    assertIsObject(obj);\n    var id = obj.id,\n      jsonrpc = obj.jsonrpc,\n      method = obj.method,\n      params = obj.params;\n    assertIsRequestId(id);\n    assertIsJSONRPC2OrUndefined(jsonrpc);\n    if (method === 'subscription.stop') {\n      return {\n        id,\n        jsonrpc,\n        method\n      };\n    }\n    assertIsProcedureType(method);\n    assertIsObject(params);\n    var rawInput = params.input,\n      path = params.path,\n      lastEventId = params.lastEventId;\n    assertIsString(path);\n    if (lastEventId !== undefined) {\n      assertIsString(lastEventId);\n    }\n    var input = transformer.input.deserialize(rawInput);\n    return {\n      id,\n      jsonrpc,\n      method,\n      params: {\n        input,\n        path,\n        lastEventId\n      }\n    };\n  }\n});","lineCount":74,"map":[[6,2,1,0],[6,6,1,0,"_procedure"],[6,16,1,0],[6,19,1,0,"require"],[6,26,1,0],[6,27,1,0,"_dependencyMap"],[6,41,1,0],[7,2,2,0],[7,6,2,0,"_utils"],[7,12,2,0],[7,15,2,0,"require"],[7,22,2,0],[7,23,2,0,"_dependencyMap"],[7,37,2,0],[8,2,4,0],[8,41,4,40],[8,50,4,49,"assertIsObject"],[8,64,4,63,"assertIsObject"],[8,65,4,64,"obj"],[8,68,4,67],[8,70,4,69],[9,4,5,4],[9,8,5,8],[9,9,5,9],[9,13,5,9,"isObject"],[9,28,5,17],[9,30,5,18,"obj"],[9,33,5,21],[9,34,5,22],[9,36,5,24],[10,6,6,8],[10,12,6,14],[10,16,6,18,"Error"],[10,21,6,23],[10,22,6,24],[10,37,6,39],[10,38,6,40],[11,4,7,4],[12,2,8,0],[13,2,9,0],[14,2,9,40],[14,11,9,49,"assertIsProcedureType"],[14,32,9,70,"assertIsProcedureType"],[14,33,9,71,"obj"],[14,36,9,74],[14,38,9,76],[15,4,10,4],[15,8,10,8],[15,9,10,9,"procedureTypes"],[15,34,10,23],[15,35,10,24,"includes"],[15,43,10,32],[15,44,10,33,"obj"],[15,47,10,36],[15,48,10,37],[15,50,10,39],[16,6,11,8],[16,12,11,14],[16,16,11,18,"Error"],[16,21,11,23],[16,22,11,24],[16,46,11,48],[16,47,11,49],[17,4,12,4],[18,2,13,0],[19,2,14,0],[20,2,14,40],[20,11,14,49,"assertIsRequestId"],[20,28,14,66,"assertIsRequestId"],[20,29,14,67,"obj"],[20,32,14,70],[20,34,14,72],[21,4,15,4],[21,8,15,8,"obj"],[21,11,15,11],[21,16,15,16],[21,20,15,20],[21,24,15,24],[21,31,15,31,"obj"],[21,34,15,34],[21,39,15,39],[21,47,15,47],[21,51,15,51,"isNaN"],[21,56,15,56],[21,57,15,57,"obj"],[21,60,15,60],[21,61,15,61],[21,65,15,65],[21,72,15,72,"obj"],[21,75,15,75],[21,80,15,80],[21,88,15,88],[21,90,15,90],[22,6,16,8],[22,12,16,14],[22,16,16,18,"Error"],[22,21,16,23],[22,22,16,24],[22,42,16,44],[22,43,16,45],[23,4,17,4],[24,2,18,0],[25,2,19,0],[26,2,19,40],[26,11,19,49,"assertIsString"],[26,25,19,63,"assertIsString"],[26,26,19,64,"obj"],[26,29,19,67],[26,31,19,69],[27,4,20,4],[27,8,20,8],[27,15,20,15,"obj"],[27,18,20,18],[27,23,20,23],[27,31,20,31],[27,33,20,33],[28,6,21,8],[28,12,21,14],[28,16,21,18,"Error"],[28,21,21,23],[28,22,21,24],[28,38,21,40],[28,39,21,41],[29,4,22,4],[30,2,23,0],[31,2,24,0],[32,2,24,40],[32,11,24,49,"assertIsJSONRPC2OrUndefined"],[32,38,24,76,"assertIsJSONRPC2OrUndefined"],[32,39,24,77,"obj"],[32,42,24,80],[32,44,24,82],[33,4,25,4],[33,8,25,8],[33,15,25,15,"obj"],[33,18,25,18],[33,23,25,23],[33,34,25,34],[33,38,25,38,"obj"],[33,41,25,41],[33,46,25,46],[33,51,25,51],[33,53,25,53],[34,6,26,8],[34,12,26,14],[34,16,26,18,"Error"],[34,21,26,23],[34,22,26,24],[34,43,26,45],[34,44,26,46],[35,4,27,4],[36,2,28,0],[37,2,29,0],[38,2,29,15],[38,11,29,24,"parseTRPCMessage"],[38,27,29,40,"parseTRPCMessage"],[38,28,29,41,"obj"],[38,31,29,44],[38,33,29,46,"transformer"],[38,44,29,57],[38,46,29,59],[39,4,30,4,"assertIsObject"],[39,18,30,18],[39,19,30,19,"obj"],[39,22,30,22],[39,23,30,23],[40,4,31,4],[40,8,31,12,"id"],[40,10,31,14],[40,13,31,44,"obj"],[40,16,31,47],[40,17,31,12,"id"],[40,19,31,14],[41,6,31,16,"jsonrpc"],[41,13,31,23],[41,16,31,44,"obj"],[41,19,31,47],[41,20,31,16,"jsonrpc"],[41,27,31,23],[42,6,31,25,"method"],[42,12,31,31],[42,15,31,44,"obj"],[42,18,31,47],[42,19,31,25,"method"],[42,25,31,31],[43,6,31,33,"params"],[43,12,31,39],[43,15,31,44,"obj"],[43,18,31,47],[43,19,31,33,"params"],[43,25,31,39],[44,4,32,4,"assertIsRequestId"],[44,21,32,21],[44,22,32,22,"id"],[44,24,32,24],[44,25,32,25],[45,4,33,4,"assertIsJSONRPC2OrUndefined"],[45,31,33,31],[45,32,33,32,"jsonrpc"],[45,39,33,39],[45,40,33,40],[46,4,34,4],[46,8,34,8,"method"],[46,14,34,14],[46,19,34,19],[46,38,34,38],[46,40,34,40],[47,6,35,8],[47,13,35,15],[48,8,36,12,"id"],[48,10,36,14],[49,8,37,12,"jsonrpc"],[49,15,37,19],[50,8,38,12,"method"],[51,6,39,8],[51,7,39,9],[52,4,40,4],[53,4,41,4,"assertIsProcedureType"],[53,25,41,25],[53,26,41,26,"method"],[53,32,41,32],[53,33,41,33],[54,4,42,4,"assertIsObject"],[54,18,42,18],[54,19,42,19,"params"],[54,25,42,25],[54,26,42,26],[55,4,43,4],[55,8,43,19,"rawInput"],[55,16,43,27],[55,19,43,51,"params"],[55,25,43,57],[55,26,43,12,"input"],[55,31,43,17],[56,6,43,29,"path"],[56,10,43,33],[56,13,43,51,"params"],[56,19,43,57],[56,20,43,29,"path"],[56,24,43,33],[57,6,43,35,"lastEventId"],[57,17,43,46],[57,20,43,51,"params"],[57,26,43,57],[57,27,43,35,"lastEventId"],[57,38,43,46],[58,4,44,4,"assertIsString"],[58,18,44,18],[58,19,44,19,"path"],[58,23,44,23],[58,24,44,24],[59,4,45,4],[59,8,45,8,"lastEventId"],[59,19,45,19],[59,24,45,24,"undefined"],[59,33,45,33],[59,35,45,35],[60,6,46,8,"assertIsString"],[60,20,46,22],[60,21,46,23,"lastEventId"],[60,32,46,34],[60,33,46,35],[61,4,47,4],[62,4,48,4],[62,8,48,10,"input"],[62,13,48,15],[62,16,48,18,"transformer"],[62,27,48,29],[62,28,48,30,"input"],[62,33,48,35],[62,34,48,36,"deserialize"],[62,45,48,47],[62,46,48,48,"rawInput"],[62,54,48,56],[62,55,48,57],[63,4,49,4],[63,11,49,11],[64,6,50,8,"id"],[64,8,50,10],[65,6,51,8,"jsonrpc"],[65,13,51,15],[66,6,52,8,"method"],[66,12,52,14],[67,6,53,8,"params"],[67,12,53,14],[67,14,53,16],[68,8,54,12,"input"],[68,13,54,17],[69,8,55,12,"path"],[69,12,55,16],[70,8,56,12,"lastEventId"],[71,6,57,8],[72,4,58,4],[72,5,58,5],[73,2,59,0],[74,0,59,1],[74,3]],"functionMap":{"names":["<global>","assertIsObject","assertIsProcedureType","assertIsRequestId","assertIsString","assertIsJSONRPC2OrUndefined","parseTRPCMessage"],"mappings":"AAA;wCCG;CDI;wCEC;CFI;wCGC;CHI;wCIC;CJI;wCKC;CLI;eMC;CN8B"}},"type":"js/module"}]}