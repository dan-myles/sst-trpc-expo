{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":173,"column":35,"index":6189}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/toArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":173,"column":35,"index":6189}}],"key":"a2e2WuN0nsyoYHmbhhqVj9wNw7E="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":173,"column":35,"index":6189}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"./is.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":92,"index":92}}],"key":"a3kdRR4+YEHt0iAzUCWd5VoNrOQ="}},{"name":"./pathstringifier.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":93},"end":{"line":2,"column":64,"index":157}}],"key":"OkxVnMVksqEmCqITm8UyH7oYtVg="}},{"name":"./transformer.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":158},"end":{"line":3,"column":98,"index":256}}],"key":"WEpSxVHfcaiv2T8r29aMZh3RIOo="}},{"name":"./util.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":0,"index":257},"end":{"line":4,"column":46,"index":303}}],"key":"aUcbDdENC60aSU0lb8uQwyHqHcs="}},{"name":"./accessDeep.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":0,"index":354},"end":{"line":6,"column":51,"index":405}}],"key":"PWExMmBYPrd3ol4hkflgkAqeEas="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.applyReferentialEqualityAnnotations = applyReferentialEqualityAnnotations;\n  exports.applyValueAnnotations = applyValueAnnotations;\n  exports.generateReferentialEqualityAnnotations = generateReferentialEqualityAnnotations;\n  exports.walker = void 0;\n  var _toArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/toArray\"));\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/slicedToArray\"));\n  var _is = require(_dependencyMap[3], \"./is.js\");\n  var _pathstringifier = require(_dependencyMap[4], \"./pathstringifier.js\");\n  var _transformer = require(_dependencyMap[5], \"./transformer.js\");\n  var _util = require(_dependencyMap[6], \"./util.js\");\n  var _accessDeep = require(_dependencyMap[7], \"./accessDeep.js\");\n  function traverse(tree, walker) {\n    var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    if (!tree) {\n      return;\n    }\n    if (!(0, _is.isArray)(tree)) {\n      (0, _util.forEach)(tree, (subtree, key) => traverse(subtree, walker, [...origin, ...(0, _pathstringifier.parsePath)(key)]));\n      return;\n    }\n    var _tree = (0, _slicedToArray2.default)(tree, 2),\n      nodeValue = _tree[0],\n      children = _tree[1];\n    if (children) {\n      (0, _util.forEach)(children, (child, key) => {\n        traverse(child, walker, [...origin, ...(0, _pathstringifier.parsePath)(key)]);\n      });\n    }\n    walker(nodeValue, origin);\n  }\n  function applyValueAnnotations(plain, annotations, superJson) {\n    traverse(annotations, (type, path) => {\n      plain = (0, _accessDeep.setDeep)(plain, path, v => (0, _transformer.untransformValue)(v, type, superJson));\n    });\n    return plain;\n  }\n  function applyReferentialEqualityAnnotations(plain, annotations) {\n    function apply(identicalPaths, path) {\n      var object = (0, _accessDeep.getDeep)(plain, (0, _pathstringifier.parsePath)(path));\n      identicalPaths.map(_pathstringifier.parsePath).forEach(identicalObjectPath => {\n        plain = (0, _accessDeep.setDeep)(plain, identicalObjectPath, () => object);\n      });\n    }\n    if ((0, _is.isArray)(annotations)) {\n      var _annotations = (0, _slicedToArray2.default)(annotations, 2),\n        root = _annotations[0],\n        other = _annotations[1];\n      root.forEach(identicalPath => {\n        plain = (0, _accessDeep.setDeep)(plain, (0, _pathstringifier.parsePath)(identicalPath), () => plain);\n      });\n      if (other) {\n        (0, _util.forEach)(other, apply);\n      }\n    } else {\n      (0, _util.forEach)(annotations, apply);\n    }\n    return plain;\n  }\n  var isDeep = (object, superJson) => (0, _is.isPlainObject)(object) || (0, _is.isArray)(object) || (0, _is.isMap)(object) || (0, _is.isSet)(object) || (0, _transformer.isInstanceOfRegisteredClass)(object, superJson);\n  function addIdentity(object, path, identities) {\n    var existingSet = identities.get(object);\n    if (existingSet) {\n      existingSet.push(path);\n    } else {\n      identities.set(object, [path]);\n    }\n  }\n  function generateReferentialEqualityAnnotations(identitites, dedupe) {\n    var result = {};\n    var rootEqualityPaths = undefined;\n    identitites.forEach(paths => {\n      if (paths.length <= 1) {\n        return;\n      }\n      // if we're not deduping, all of these objects continue existing.\n      // putting the shortest path first makes it easier to parse for humans\n      // if we're deduping though, only the first entry will still exist, so we can't do this optimisation.\n      if (!dedupe) {\n        paths = paths.map(path => path.map(String)).sort((a, b) => a.length - b.length);\n      }\n      var _paths = paths,\n        _paths2 = (0, _toArray2.default)(_paths),\n        representativePath = _paths2[0],\n        identicalPaths = _paths2.slice(1);\n      if (representativePath.length === 0) {\n        rootEqualityPaths = identicalPaths.map(_pathstringifier.stringifyPath);\n      } else {\n        result[(0, _pathstringifier.stringifyPath)(representativePath)] = identicalPaths.map(_pathstringifier.stringifyPath);\n      }\n    });\n    if (rootEqualityPaths) {\n      if ((0, _is.isEmptyObject)(result)) {\n        return [rootEqualityPaths];\n      } else {\n        return [rootEqualityPaths, result];\n      }\n    } else {\n      return (0, _is.isEmptyObject)(result) ? undefined : result;\n    }\n  }\n  var walker = function (object, identities, superJson, dedupe) {\n    var path = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n    var objectsInThisPath = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n    var seenObjects = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new Map();\n    var primitive = (0, _is.isPrimitive)(object);\n    if (!primitive) {\n      addIdentity(object, path, identities);\n      var seen = seenObjects.get(object);\n      if (seen) {\n        // short-circuit result if we've seen this object before\n        return dedupe ? {\n          transformedValue: null\n        } : seen;\n      }\n    }\n    if (!isDeep(object, superJson)) {\n      var _transformed = (0, _transformer.transformValue)(object, superJson);\n      var _result = _transformed ? {\n        transformedValue: _transformed.value,\n        annotations: [_transformed.type]\n      } : {\n        transformedValue: object\n      };\n      if (!primitive) {\n        seenObjects.set(object, _result);\n      }\n      return _result;\n    }\n    if ((0, _util.includes)(objectsInThisPath, object)) {\n      // prevent circular references\n      return {\n        transformedValue: null\n      };\n    }\n    var transformationResult = (0, _transformer.transformValue)(object, superJson);\n    var transformed = transformationResult?.value ?? object;\n    var transformedValue = (0, _is.isArray)(transformed) ? [] : {};\n    var innerAnnotations = {};\n    (0, _util.forEach)(transformed, (value, index) => {\n      if (index === '__proto__' || index === 'constructor' || index === 'prototype') {\n        throw new Error(`Detected property ${index}. This is a prototype pollution risk, please remove it from your object.`);\n      }\n      var recursiveResult = walker(value, identities, superJson, dedupe, [...path, index], [...objectsInThisPath, object], seenObjects);\n      transformedValue[index] = recursiveResult.transformedValue;\n      if ((0, _is.isArray)(recursiveResult.annotations)) {\n        innerAnnotations[index] = recursiveResult.annotations;\n      } else if ((0, _is.isPlainObject)(recursiveResult.annotations)) {\n        (0, _util.forEach)(recursiveResult.annotations, (tree, key) => {\n          innerAnnotations[(0, _pathstringifier.escapeKey)(index) + '.' + key] = tree;\n        });\n      }\n    });\n    var result = (0, _is.isEmptyObject)(innerAnnotations) ? {\n      transformedValue,\n      annotations: !!transformationResult ? [transformationResult.type] : undefined\n    } : {\n      transformedValue,\n      annotations: !!transformationResult ? [transformationResult.type, innerAnnotations] : innerAnnotations\n    };\n    if (!primitive) {\n      seenObjects.set(object, result);\n    }\n    return result;\n  };\n  exports.walker = walker;\n});","lineCount":171,"map":[[12,2,1,0],[12,6,1,0,"_is"],[12,9,1,0],[12,12,1,0,"require"],[12,19,1,0],[12,20,1,0,"_dependencyMap"],[12,34,1,0],[13,2,2,0],[13,6,2,0,"_pathstringifier"],[13,22,2,0],[13,25,2,0,"require"],[13,32,2,0],[13,33,2,0,"_dependencyMap"],[13,47,2,0],[14,2,3,0],[14,6,3,0,"_transformer"],[14,18,3,0],[14,21,3,0,"require"],[14,28,3,0],[14,29,3,0,"_dependencyMap"],[14,43,3,0],[15,2,4,0],[15,6,4,0,"_util"],[15,11,4,0],[15,14,4,0,"require"],[15,21,4,0],[15,22,4,0,"_dependencyMap"],[15,36,4,0],[16,2,6,0],[16,6,6,0,"_accessDeep"],[16,17,6,0],[16,20,6,0,"require"],[16,27,6,0],[16,28,6,0,"_dependencyMap"],[16,42,6,0],[17,2,7,0],[17,11,7,9,"traverse"],[17,19,7,17,"traverse"],[17,20,7,18,"tree"],[17,24,7,22],[17,26,7,24,"walker"],[17,32,7,30],[17,34,7,45],[18,4,7,45],[18,8,7,32,"origin"],[18,14,7,38],[18,17,7,38,"arguments"],[18,26,7,38],[18,27,7,38,"length"],[18,33,7,38],[18,41,7,38,"arguments"],[18,50,7,38],[18,58,7,38,"undefined"],[18,67,7,38],[18,70,7,38,"arguments"],[18,79,7,38],[18,85,7,41],[18,87,7,43],[19,4,8,4],[19,8,8,8],[19,9,8,9,"tree"],[19,13,8,13],[19,15,8,15],[20,6,9,8],[21,4,10,4],[22,4,11,4],[22,8,11,8],[22,9,11,9],[22,13,11,9,"isArray"],[22,24,11,16],[22,26,11,17,"tree"],[22,30,11,21],[22,31,11,22],[22,33,11,24],[23,6,12,8],[23,10,12,8,"forEach"],[23,23,12,15],[23,25,12,16,"tree"],[23,29,12,20],[23,31,12,22],[23,32,12,23,"subtree"],[23,39,12,30],[23,41,12,32,"key"],[23,44,12,35],[23,49,12,40,"traverse"],[23,57,12,48],[23,58,12,49,"subtree"],[23,65,12,56],[23,67,12,58,"walker"],[23,73,12,64],[23,75,12,66],[23,76,12,67],[23,79,12,70,"origin"],[23,85,12,76],[23,87,12,78],[23,90,12,81],[23,94,12,81,"parsePath"],[23,120,12,90],[23,122,12,91,"key"],[23,125,12,94],[23,126,12,95],[23,127,12,96],[23,128,12,97],[23,129,12,98],[24,6,13,8],[25,4,14,4],[26,4,15,4],[26,8,15,4,"_tree"],[26,13,15,4],[26,20,15,4,"_slicedToArray2"],[26,35,15,4],[26,36,15,4,"default"],[26,43,15,4],[26,45,15,34,"tree"],[26,49,15,38],[27,6,15,11,"nodeValue"],[27,15,15,20],[27,18,15,20,"_tree"],[27,23,15,20],[28,6,15,22,"children"],[28,14,15,30],[28,17,15,30,"_tree"],[28,22,15,30],[29,4,16,4],[29,8,16,8,"children"],[29,16,16,16],[29,18,16,18],[30,6,17,8],[30,10,17,8,"forEach"],[30,23,17,15],[30,25,17,16,"children"],[30,33,17,24],[30,35,17,26],[30,36,17,27,"child"],[30,41,17,32],[30,43,17,34,"key"],[30,46,17,37],[30,51,17,42],[31,8,18,12,"traverse"],[31,16,18,20],[31,17,18,21,"child"],[31,22,18,26],[31,24,18,28,"walker"],[31,30,18,34],[31,32,18,36],[31,33,18,37],[31,36,18,40,"origin"],[31,42,18,46],[31,44,18,48],[31,47,18,51],[31,51,18,51,"parsePath"],[31,77,18,60],[31,79,18,61,"key"],[31,82,18,64],[31,83,18,65],[31,84,18,66],[31,85,18,67],[32,6,19,8],[32,7,19,9],[32,8,19,10],[33,4,20,4],[34,4,21,4,"walker"],[34,10,21,10],[34,11,21,11,"nodeValue"],[34,20,21,20],[34,22,21,22,"origin"],[34,28,21,28],[34,29,21,29],[35,2,22,0],[36,2,23,7],[36,11,23,16,"applyValueAnnotations"],[36,32,23,37,"applyValueAnnotations"],[36,33,23,38,"plain"],[36,38,23,43],[36,40,23,45,"annotations"],[36,51,23,56],[36,53,23,58,"superJson"],[36,62,23,67],[36,64,23,69],[37,4,24,4,"traverse"],[37,12,24,12],[37,13,24,13,"annotations"],[37,24,24,24],[37,26,24,26],[37,27,24,27,"type"],[37,31,24,31],[37,33,24,33,"path"],[37,37,24,37],[37,42,24,42],[38,6,25,8,"plain"],[38,11,25,13],[38,14,25,16],[38,18,25,16,"setDeep"],[38,37,25,23],[38,39,25,24,"plain"],[38,44,25,29],[38,46,25,31,"path"],[38,50,25,35],[38,52,25,37,"v"],[38,53,25,38],[38,57,25,42],[38,61,25,42,"untransformValue"],[38,90,25,58],[38,92,25,59,"v"],[38,93,25,60],[38,95,25,62,"type"],[38,99,25,66],[38,101,25,68,"superJson"],[38,110,25,77],[38,111,25,78],[38,112,25,79],[39,4,26,4],[39,5,26,5],[39,6,26,6],[40,4,27,4],[40,11,27,11,"plain"],[40,16,27,16],[41,2,28,0],[42,2,29,7],[42,11,29,16,"applyReferentialEqualityAnnotations"],[42,46,29,51,"applyReferentialEqualityAnnotations"],[42,47,29,52,"plain"],[42,52,29,57],[42,54,29,59,"annotations"],[42,65,29,70],[42,67,29,72],[43,4,30,4],[43,13,30,13,"apply"],[43,18,30,18,"apply"],[43,19,30,19,"identicalPaths"],[43,33,30,33],[43,35,30,35,"path"],[43,39,30,39],[43,41,30,41],[44,6,31,8],[44,10,31,14,"object"],[44,16,31,20],[44,19,31,23],[44,23,31,23,"getDeep"],[44,42,31,30],[44,44,31,31,"plain"],[44,49,31,36],[44,51,31,38],[44,55,31,38,"parsePath"],[44,81,31,47],[44,83,31,48,"path"],[44,87,31,52],[44,88,31,53],[44,89,31,54],[45,6,32,8,"identicalPaths"],[45,20,32,22],[45,21,32,23,"map"],[45,24,32,26],[45,25,32,27,"parsePath"],[45,51,32,36],[45,52,32,37],[45,53,32,38,"forEach"],[45,60,32,45],[45,61,32,46,"identicalObjectPath"],[45,80,32,65],[45,84,32,69],[46,8,33,12,"plain"],[46,13,33,17],[46,16,33,20],[46,20,33,20,"setDeep"],[46,39,33,27],[46,41,33,28,"plain"],[46,46,33,33],[46,48,33,35,"identicalObjectPath"],[46,67,33,54],[46,69,33,56],[46,75,33,62,"object"],[46,81,33,68],[46,82,33,69],[47,6,34,8],[47,7,34,9],[47,8,34,10],[48,4,35,4],[49,4,36,4],[49,8,36,8],[49,12,36,8,"isArray"],[49,23,36,15],[49,25,36,16,"annotations"],[49,36,36,27],[49,37,36,28],[49,39,36,30],[50,6,37,8],[50,10,37,8,"_annotations"],[50,22,37,8],[50,29,37,8,"_slicedToArray2"],[50,44,37,8],[50,45,37,8,"default"],[50,52,37,8],[50,54,37,30,"annotations"],[50,65,37,41],[51,8,37,15,"root"],[51,12,37,19],[51,15,37,19,"_annotations"],[51,27,37,19],[52,8,37,21,"other"],[52,13,37,26],[52,16,37,26,"_annotations"],[52,28,37,26],[53,6,38,8,"root"],[53,10,38,12],[53,11,38,13,"forEach"],[53,18,38,20],[53,19,38,21,"identicalPath"],[53,32,38,34],[53,36,38,38],[54,8,39,12,"plain"],[54,13,39,17],[54,16,39,20],[54,20,39,20,"setDeep"],[54,39,39,27],[54,41,39,28,"plain"],[54,46,39,33],[54,48,39,35],[54,52,39,35,"parsePath"],[54,78,39,44],[54,80,39,45,"identicalPath"],[54,93,39,58],[54,94,39,59],[54,96,39,61],[54,102,39,67,"plain"],[54,107,39,72],[54,108,39,73],[55,6,40,8],[55,7,40,9],[55,8,40,10],[56,6,41,8],[56,10,41,12,"other"],[56,15,41,17],[56,17,41,19],[57,8,42,12],[57,12,42,12,"forEach"],[57,25,42,19],[57,27,42,20,"other"],[57,32,42,25],[57,34,42,27,"apply"],[57,39,42,32],[57,40,42,33],[58,6,43,8],[59,4,44,4],[59,5,44,5],[59,11,45,9],[60,6,46,8],[60,10,46,8,"forEach"],[60,23,46,15],[60,25,46,16,"annotations"],[60,36,46,27],[60,38,46,29,"apply"],[60,43,46,34],[60,44,46,35],[61,4,47,4],[62,4,48,4],[62,11,48,11,"plain"],[62,16,48,16],[63,2,49,0],[64,2,50,0],[64,6,50,6,"isDeep"],[64,12,50,12],[64,15,50,15,"isDeep"],[64,16,50,16,"object"],[64,22,50,22],[64,24,50,24,"superJson"],[64,33,50,33],[64,38,50,38],[64,42,50,38,"isPlainObject"],[64,59,50,51],[64,61,50,52,"object"],[64,67,50,58],[64,68,50,59],[64,72,51,4],[64,76,51,4,"isArray"],[64,87,51,11],[64,89,51,12,"object"],[64,95,51,18],[64,96,51,19],[64,100,52,4],[64,104,52,4,"isMap"],[64,113,52,9],[64,115,52,10,"object"],[64,121,52,16],[64,122,52,17],[64,126,53,4],[64,130,53,4,"isSet"],[64,139,53,9],[64,141,53,10,"object"],[64,147,53,16],[64,148,53,17],[64,152,54,4],[64,156,54,4,"isInstanceOfRegisteredClass"],[64,196,54,31],[64,198,54,32,"object"],[64,204,54,38],[64,206,54,40,"superJson"],[64,215,54,49],[64,216,54,50],[65,2,55,0],[65,11,55,9,"addIdentity"],[65,22,55,20,"addIdentity"],[65,23,55,21,"object"],[65,29,55,27],[65,31,55,29,"path"],[65,35,55,33],[65,37,55,35,"identities"],[65,47,55,45],[65,49,55,47],[66,4,56,4],[66,8,56,10,"existingSet"],[66,19,56,21],[66,22,56,24,"identities"],[66,32,56,34],[66,33,56,35,"get"],[66,36,56,38],[66,37,56,39,"object"],[66,43,56,45],[66,44,56,46],[67,4,57,4],[67,8,57,8,"existingSet"],[67,19,57,19],[67,21,57,21],[68,6,58,8,"existingSet"],[68,17,58,19],[68,18,58,20,"push"],[68,22,58,24],[68,23,58,25,"path"],[68,27,58,29],[68,28,58,30],[69,4,59,4],[69,5,59,5],[69,11,60,9],[70,6,61,8,"identities"],[70,16,61,18],[70,17,61,19,"set"],[70,20,61,22],[70,21,61,23,"object"],[70,27,61,29],[70,29,61,31],[70,30,61,32,"path"],[70,34,61,36],[70,35,61,37],[70,36,61,38],[71,4,62,4],[72,2,63,0],[73,2,64,7],[73,11,64,16,"generateReferentialEqualityAnnotations"],[73,49,64,54,"generateReferentialEqualityAnnotations"],[73,50,64,55,"identitites"],[73,61,64,66],[73,63,64,68,"dedupe"],[73,69,64,74],[73,71,64,76],[74,4,65,4],[74,8,65,10,"result"],[74,14,65,16],[74,17,65,19],[74,18,65,20],[74,19,65,21],[75,4,66,4],[75,8,66,8,"rootEqualityPaths"],[75,25,66,25],[75,28,66,28,"undefined"],[75,37,66,37],[76,4,67,4,"identitites"],[76,15,67,15],[76,16,67,16,"forEach"],[76,23,67,23],[76,24,67,24,"paths"],[76,29,67,29],[76,33,67,33],[77,6,68,8],[77,10,68,12,"paths"],[77,15,68,17],[77,16,68,18,"length"],[77,22,68,24],[77,26,68,28],[77,27,68,29],[77,29,68,31],[78,8,69,12],[79,6,70,8],[80,6,71,8],[81,6,72,8],[82,6,73,8],[83,6,74,8],[83,10,74,12],[83,11,74,13,"dedupe"],[83,17,74,19],[83,19,74,21],[84,8,75,12,"paths"],[84,13,75,17],[84,16,75,20,"paths"],[84,21,75,25],[84,22,76,17,"map"],[84,25,76,20],[84,26,76,21,"path"],[84,30,76,25],[84,34,76,29,"path"],[84,38,76,33],[84,39,76,34,"map"],[84,42,76,37],[84,43,76,38,"String"],[84,49,76,44],[84,50,76,45],[84,51,76,46],[84,52,77,17,"sort"],[84,56,77,21],[84,57,77,22],[84,58,77,23,"a"],[84,59,77,24],[84,61,77,26,"b"],[84,62,77,27],[84,67,77,32,"a"],[84,68,77,33],[84,69,77,34,"length"],[84,75,77,40],[84,78,77,43,"b"],[84,79,77,44],[84,80,77,45,"length"],[84,86,77,51],[84,87,77,52],[85,6,78,8],[86,6,79,8],[86,10,79,8,"_paths"],[86,16,79,8],[86,19,79,56,"paths"],[86,24,79,61],[87,8,79,61,"_paths2"],[87,15,79,61],[87,22,79,61,"_toArray2"],[87,31,79,61],[87,32,79,61,"default"],[87,39,79,61],[87,41,79,61,"_paths"],[87,47,79,61],[88,8,79,15,"representativePath"],[88,26,79,33],[88,29,79,33,"_paths2"],[88,36,79,33],[89,8,79,38,"identicalPaths"],[89,22,79,52],[89,25,79,52,"_paths2"],[89,32,79,52],[89,33,79,52,"slice"],[89,38,79,52],[90,6,80,8],[90,10,80,12,"representativePath"],[90,28,80,30],[90,29,80,31,"length"],[90,35,80,37],[90,40,80,42],[90,41,80,43],[90,43,80,45],[91,8,81,12,"rootEqualityPaths"],[91,25,81,29],[91,28,81,32,"identicalPaths"],[91,42,81,46],[91,43,81,47,"map"],[91,46,81,50],[91,47,81,51,"stringifyPath"],[91,77,81,64],[91,78,81,65],[92,6,82,8],[92,7,82,9],[92,13,83,13],[93,8,84,12,"result"],[93,14,84,18],[93,15,84,19],[93,19,84,19,"stringifyPath"],[93,49,84,32],[93,51,84,33,"representativePath"],[93,69,84,51],[93,70,84,52],[93,71,84,53],[93,74,84,56,"identicalPaths"],[93,88,84,70],[93,89,84,71,"map"],[93,92,84,74],[93,93,84,75,"stringifyPath"],[93,123,84,88],[93,124,84,89],[94,6,85,8],[95,4,86,4],[95,5,86,5],[95,6,86,6],[96,4,87,4],[96,8,87,8,"rootEqualityPaths"],[96,25,87,25],[96,27,87,27],[97,6,88,8],[97,10,88,12],[97,14,88,12,"isEmptyObject"],[97,31,88,25],[97,33,88,26,"result"],[97,39,88,32],[97,40,88,33],[97,42,88,35],[98,8,89,12],[98,15,89,19],[98,16,89,20,"rootEqualityPaths"],[98,33,89,37],[98,34,89,38],[99,6,90,8],[99,7,90,9],[99,13,91,13],[100,8,92,12],[100,15,92,19],[100,16,92,20,"rootEqualityPaths"],[100,33,92,37],[100,35,92,39,"result"],[100,41,92,45],[100,42,92,46],[101,6,93,8],[102,4,94,4],[102,5,94,5],[102,11,95,9],[103,6,96,8],[103,13,96,15],[103,17,96,15,"isEmptyObject"],[103,34,96,28],[103,36,96,29,"result"],[103,42,96,35],[103,43,96,36],[103,46,96,39,"undefined"],[103,55,96,48],[103,58,96,51,"result"],[103,64,96,57],[104,4,97,4],[105,2,98,0],[106,2,99,7],[106,6,99,13,"walker"],[106,12,99,19],[106,15,99,22],[106,24,99,22,"walker"],[106,25,99,23,"object"],[106,31,99,29],[106,33,99,31,"identities"],[106,43,99,41],[106,45,99,43,"superJson"],[106,54,99,52],[106,56,99,54,"dedupe"],[106,62,99,60],[106,64,99,125],[107,4,99,125],[107,8,99,62,"path"],[107,12,99,66],[107,15,99,66,"arguments"],[107,24,99,66],[107,25,99,66,"length"],[107,31,99,66],[107,39,99,66,"arguments"],[107,48,99,66],[107,56,99,66,"undefined"],[107,65,99,66],[107,68,99,66,"arguments"],[107,77,99,66],[107,83,99,69],[107,85,99,71],[108,4,99,71],[108,8,99,73,"objectsInThisPath"],[108,25,99,90],[108,28,99,90,"arguments"],[108,37,99,90],[108,38,99,90,"length"],[108,44,99,90],[108,52,99,90,"arguments"],[108,61,99,90],[108,69,99,90,"undefined"],[108,78,99,90],[108,81,99,90,"arguments"],[108,90,99,90],[108,96,99,93],[108,98,99,95],[109,4,99,95],[109,8,99,97,"seenObjects"],[109,19,99,108],[109,22,99,108,"arguments"],[109,31,99,108],[109,32,99,108,"length"],[109,38,99,108],[109,46,99,108,"arguments"],[109,55,99,108],[109,63,99,108,"undefined"],[109,72,99,108],[109,75,99,108,"arguments"],[109,84,99,108],[109,90,99,111],[109,94,99,115,"Map"],[109,97,99,118],[109,98,99,119],[109,99,99,120],[110,4,100,4],[110,8,100,10,"primitive"],[110,17,100,19],[110,20,100,22],[110,24,100,22,"isPrimitive"],[110,39,100,33],[110,41,100,34,"object"],[110,47,100,40],[110,48,100,41],[111,4,101,4],[111,8,101,8],[111,9,101,9,"primitive"],[111,18,101,18],[111,20,101,20],[112,6,102,8,"addIdentity"],[112,17,102,19],[112,18,102,20,"object"],[112,24,102,26],[112,26,102,28,"path"],[112,30,102,32],[112,32,102,34,"identities"],[112,42,102,44],[112,43,102,45],[113,6,103,8],[113,10,103,14,"seen"],[113,14,103,18],[113,17,103,21,"seenObjects"],[113,28,103,32],[113,29,103,33,"get"],[113,32,103,36],[113,33,103,37,"object"],[113,39,103,43],[113,40,103,44],[114,6,104,8],[114,10,104,12,"seen"],[114,14,104,16],[114,16,104,18],[115,8,105,12],[116,8,106,12],[116,15,106,19,"dedupe"],[116,21,106,25],[116,24,107,18],[117,10,108,20,"transformedValue"],[117,26,108,36],[117,28,108,38],[118,8,109,16],[118,9,109,17],[118,12,110,18,"seen"],[118,16,110,22],[119,6,111,8],[120,4,112,4],[121,4,113,4],[121,8,113,8],[121,9,113,9,"isDeep"],[121,15,113,15],[121,16,113,16,"object"],[121,22,113,22],[121,24,113,24,"superJson"],[121,33,113,33],[121,34,113,34],[121,36,113,36],[122,6,114,8],[122,10,114,14,"transformed"],[122,22,114,25],[122,25,114,28],[122,29,114,28,"transformValue"],[122,56,114,42],[122,58,114,43,"object"],[122,64,114,49],[122,66,114,51,"superJson"],[122,75,114,60],[122,76,114,61],[123,6,115,8],[123,10,115,14,"result"],[123,17,115,20],[123,20,115,23,"transformed"],[123,32,115,34],[123,35,116,14],[124,8,117,16,"transformedValue"],[124,24,117,32],[124,26,117,34,"transformed"],[124,38,117,45],[124,39,117,46,"value"],[124,44,117,51],[125,8,118,16,"annotations"],[125,19,118,27],[125,21,118,29],[125,22,118,30,"transformed"],[125,34,118,41],[125,35,118,42,"type"],[125,39,118,46],[126,6,119,12],[126,7,119,13],[126,10,120,14],[127,8,121,16,"transformedValue"],[127,24,121,32],[127,26,121,34,"object"],[128,6,122,12],[128,7,122,13],[129,6,123,8],[129,10,123,12],[129,11,123,13,"primitive"],[129,20,123,22],[129,22,123,24],[130,8,124,12,"seenObjects"],[130,19,124,23],[130,20,124,24,"set"],[130,23,124,27],[130,24,124,28,"object"],[130,30,124,34],[130,32,124,36,"result"],[130,39,124,42],[130,40,124,43],[131,6,125,8],[132,6,126,8],[132,13,126,15,"result"],[132,20,126,21],[133,4,127,4],[134,4,128,4],[134,8,128,8],[134,12,128,8,"includes"],[134,26,128,16],[134,28,128,17,"objectsInThisPath"],[134,45,128,34],[134,47,128,36,"object"],[134,53,128,42],[134,54,128,43],[134,56,128,45],[135,6,129,8],[136,6,130,8],[136,13,130,15],[137,8,131,12,"transformedValue"],[137,24,131,28],[137,26,131,30],[138,6,132,8],[138,7,132,9],[139,4,133,4],[140,4,134,4],[140,8,134,10,"transformationResult"],[140,28,134,30],[140,31,134,33],[140,35,134,33,"transformValue"],[140,62,134,47],[140,64,134,48,"object"],[140,70,134,54],[140,72,134,56,"superJson"],[140,81,134,65],[140,82,134,66],[141,4,135,4],[141,8,135,10,"transformed"],[141,19,135,21],[141,22,135,24,"transformationResult"],[141,42,135,44],[141,44,135,46,"value"],[141,49,135,51],[141,53,135,55,"object"],[141,59,135,61],[142,4,136,4],[142,8,136,10,"transformedValue"],[142,24,136,26],[142,27,136,29],[142,31,136,29,"isArray"],[142,42,136,36],[142,44,136,37,"transformed"],[142,55,136,48],[142,56,136,49],[142,59,136,52],[142,61,136,54],[142,64,136,57],[142,65,136,58],[142,66,136,59],[143,4,137,4],[143,8,137,10,"innerAnnotations"],[143,24,137,26],[143,27,137,29],[143,28,137,30],[143,29,137,31],[144,4,138,4],[144,8,138,4,"forEach"],[144,21,138,11],[144,23,138,12,"transformed"],[144,34,138,23],[144,36,138,25],[144,37,138,26,"value"],[144,42,138,31],[144,44,138,33,"index"],[144,49,138,38],[144,54,138,43],[145,6,139,8],[145,10,139,12,"index"],[145,15,139,17],[145,20,139,22],[145,31,139,33],[145,35,140,12,"index"],[145,40,140,17],[145,45,140,22],[145,58,140,35],[145,62,141,12,"index"],[145,67,141,17],[145,72,141,22],[145,83,141,33],[145,85,141,35],[146,8,142,12],[146,14,142,18],[146,18,142,22,"Error"],[146,23,142,27],[146,24,142,28],[146,45,142,49,"index"],[146,50,142,54],[146,124,142,128],[146,125,142,129],[147,6,143,8],[148,6,144,8],[148,10,144,14,"recursiveResult"],[148,25,144,29],[148,28,144,32,"walker"],[148,34,144,38],[148,35,144,39,"value"],[148,40,144,44],[148,42,144,46,"identities"],[148,52,144,56],[148,54,144,58,"superJson"],[148,63,144,67],[148,65,144,69,"dedupe"],[148,71,144,75],[148,73,144,77],[148,74,144,78],[148,77,144,81,"path"],[148,81,144,85],[148,83,144,87,"index"],[148,88,144,92],[148,89,144,93],[148,91,144,95],[148,92,144,96],[148,95,144,99,"objectsInThisPath"],[148,112,144,116],[148,114,144,118,"object"],[148,120,144,124],[148,121,144,125],[148,123,144,127,"seenObjects"],[148,134,144,138],[148,135,144,139],[149,6,145,8,"transformedValue"],[149,22,145,24],[149,23,145,25,"index"],[149,28,145,30],[149,29,145,31],[149,32,145,34,"recursiveResult"],[149,47,145,49],[149,48,145,50,"transformedValue"],[149,64,145,66],[150,6,146,8],[150,10,146,12],[150,14,146,12,"isArray"],[150,25,146,19],[150,27,146,20,"recursiveResult"],[150,42,146,35],[150,43,146,36,"annotations"],[150,54,146,47],[150,55,146,48],[150,57,146,50],[151,8,147,12,"innerAnnotations"],[151,24,147,28],[151,25,147,29,"index"],[151,30,147,34],[151,31,147,35],[151,34,147,38,"recursiveResult"],[151,49,147,53],[151,50,147,54,"annotations"],[151,61,147,65],[152,6,148,8],[152,7,148,9],[152,13,149,13],[152,17,149,17],[152,21,149,17,"isPlainObject"],[152,38,149,30],[152,40,149,31,"recursiveResult"],[152,55,149,46],[152,56,149,47,"annotations"],[152,67,149,58],[152,68,149,59],[152,70,149,61],[153,8,150,12],[153,12,150,12,"forEach"],[153,25,150,19],[153,27,150,20,"recursiveResult"],[153,42,150,35],[153,43,150,36,"annotations"],[153,54,150,47],[153,56,150,49],[153,57,150,50,"tree"],[153,61,150,54],[153,63,150,56,"key"],[153,66,150,59],[153,71,150,64],[154,10,151,16,"innerAnnotations"],[154,26,151,32],[154,27,151,33],[154,31,151,33,"escapeKey"],[154,57,151,42],[154,59,151,43,"index"],[154,64,151,48],[154,65,151,49],[154,68,151,52],[154,71,151,55],[154,74,151,58,"key"],[154,77,151,61],[154,78,151,62],[154,81,151,65,"tree"],[154,85,151,69],[155,8,152,12],[155,9,152,13],[155,10,152,14],[156,6,153,8],[157,4,154,4],[157,5,154,5],[157,6,154,6],[158,4,155,4],[158,8,155,10,"result"],[158,14,155,16],[158,17,155,19],[158,21,155,19,"isEmptyObject"],[158,38,155,32],[158,40,155,33,"innerAnnotations"],[158,56,155,49],[158,57,155,50],[158,60,156,10],[159,6,157,12,"transformedValue"],[159,22,157,28],[160,6,158,12,"annotations"],[160,17,158,23],[160,19,158,25],[160,20,158,26],[160,21,158,27,"transformationResult"],[160,41,158,47],[160,44,159,18],[160,45,159,19,"transformationResult"],[160,65,159,39],[160,66,159,40,"type"],[160,70,159,44],[160,71,159,45],[160,74,160,18,"undefined"],[161,4,161,8],[161,5,161,9],[161,8,162,10],[162,6,163,12,"transformedValue"],[162,22,163,28],[163,6,164,12,"annotations"],[163,17,164,23],[163,19,164,25],[163,20,164,26],[163,21,164,27,"transformationResult"],[163,41,164,47],[163,44,165,18],[163,45,165,19,"transformationResult"],[163,65,165,39],[163,66,165,40,"type"],[163,70,165,44],[163,72,165,46,"innerAnnotations"],[163,88,165,62],[163,89,165,63],[163,92,166,18,"innerAnnotations"],[164,4,167,8],[164,5,167,9],[165,4,168,4],[165,8,168,8],[165,9,168,9,"primitive"],[165,18,168,18],[165,20,168,20],[166,6,169,8,"seenObjects"],[166,17,169,19],[166,18,169,20,"set"],[166,21,169,23],[166,22,169,24,"object"],[166,28,169,30],[166,30,169,32,"result"],[166,36,169,38],[166,37,169,39],[167,4,170,4],[168,4,171,4],[168,11,171,11,"result"],[168,17,171,17],[169,2,172,0],[169,3,172,1],[170,2,172,2,"exports"],[170,9,172,2],[170,10,172,2,"walker"],[170,16,172,2],[170,19,172,2,"walker"],[170,25,172,2],[171,0,172,2],[171,3]],"functionMap":{"names":["<global>","traverse","forEach$argument_1","applyValueAnnotations","traverse$argument_1","setDeep$argument_2","applyReferentialEqualityAnnotations","apply","identicalPaths.map.forEach$argument_0","root.forEach$argument_0","isDeep","addIdentity","generateReferentialEqualityAnnotations","identitites.forEach$argument_0","paths.map$argument_0","paths.map.sort$argument_0","walker"],"mappings":"AAA;ACM;sBCK,2ED;0BCK;SDE;CDG;OGC;0BCC;qCCC,yCD;KDC;CHE;OMC;ICC;8CCE;wDHC,YG;SDC;KDC;qBGG;6DJC,WI;SHC;CNS;eUC;kDVI;AWC;CXQ;OYC;wBCG;qBCS,wBD;sBEC,6BF;KDS;CZY;sBgBC;yBduC;KcgB;ChBkB"}},"type":"js/module"}]}