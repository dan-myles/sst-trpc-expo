{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":145,"column":0,"index":6305}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":145,"column":0,"index":6305}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":145,"column":0,"index":6305}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"@trpc/server/observable","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":53,"index":53}}],"key":"I122979nMYhHcuaUZWanjRGzbec="}},{"name":"@trpc/server/unstable-core-do-not-import","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":54},"end":{"line":2,"column":79,"index":133}}],"key":"v6RfOz0FhqfBuoZo5CXmYCfVJms="}},{"name":"../internals/dataLoader.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":134},"end":{"line":3,"column":57,"index":191}}],"key":"2X8MNPMaLXh6YSnri2d4T1Ukx68="}},{"name":"../internals/signals.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":0,"index":192},"end":{"line":4,"column":77,"index":269}}],"key":"ddNnA8KnDeY/w8oaTgO7HIhuYFk="}},{"name":"../TRPCClientError.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":0,"index":270},"end":{"line":5,"column":57,"index":327}}],"key":"+VRJuZ2ikq/rZ4G1ICvMdURsA7A="}},{"name":"./internals/httpUtils.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":0,"index":328},"end":{"line":6,"column":103,"index":431}}],"key":"ZJK0wcbPkw9cOEgpaYuOlXy9AFA="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.unstable_httpBatchStreamLink = unstable_httpBatchStreamLink;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _observable = require(_dependencyMap[3], \"@trpc/server/observable\");\n  var _unstableCoreDoNotImport = require(_dependencyMap[4], \"@trpc/server/unstable-core-do-not-import\");\n  var _dataLoader = require(_dependencyMap[5], \"../internals/dataLoader.mjs\");\n  var _signals = require(_dependencyMap[6], \"../internals/signals.mjs\");\n  var _TRPCClientError = require(_dependencyMap[7], \"../TRPCClientError.mjs\");\n  var _httpUtils = require(_dependencyMap[8], \"./internals/httpUtils.mjs\");\n  /**\n   * @see https://trpc.io/docs/client/links/httpBatchStreamLink\n   */\n  function unstable_httpBatchStreamLink(opts) {\n    var resolvedOpts = (0, _httpUtils.resolveHTTPLinkOptions)(opts);\n    var maxURLLength = opts.maxURLLength ?? Infinity;\n    var maxItems = opts.maxItems ?? Infinity;\n    return () => {\n      var batchLoader = type => {\n        return {\n          validate(batchOps) {\n            if (maxURLLength === Infinity && maxItems === Infinity) {\n              // escape hatch for quick calcs\n              return true;\n            }\n            if (batchOps.length > maxItems) {\n              return false;\n            }\n            var path = batchOps.map(op => op.path).join(',');\n            var inputs = batchOps.map(op => op.input);\n            var url = (0, _httpUtils.getUrl)({\n              ...resolvedOpts,\n              type,\n              path,\n              inputs,\n              signal: null\n            });\n            return url.length <= maxURLLength;\n          },\n          fetch(batchOps) {\n            return (0, _asyncToGenerator2.default)(function* () {\n              var path = batchOps.map(op => op.path).join(',');\n              var inputs = batchOps.map(op => op.input);\n              var batchSignals = (0, _signals.allAbortSignals)(...batchOps.map(op => op.signal));\n              var abortController = new AbortController();\n              var responsePromise = (0, _httpUtils.fetchHTTPResponse)({\n                ...resolvedOpts,\n                signal: (0, _signals.raceAbortSignals)(batchSignals, abortController.signal),\n                type,\n                contentTypeHeader: 'application/json',\n                trpcAcceptHeader: 'application/jsonl',\n                getUrl: _httpUtils.getUrl,\n                getBody: _httpUtils.getBody,\n                inputs,\n                path,\n                headers() {\n                  if (!opts.headers) {\n                    return {};\n                  }\n                  if (typeof opts.headers === 'function') {\n                    return opts.headers({\n                      opList: batchOps\n                    });\n                  }\n                  return opts.headers;\n                }\n              });\n              var res = yield responsePromise;\n              var _yield$jsonlStreamCon = yield (0, _unstableCoreDoNotImport.jsonlStreamConsumer)({\n                  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                  from: res.body,\n                  deserialize: resolvedOpts.transformer.output.deserialize,\n                  // onError: console.error,\n                  formatError(opts) {\n                    var error = opts.error;\n                    return _TRPCClientError.TRPCClientError.from({\n                      error\n                    });\n                  },\n                  abortController\n                }),\n                _yield$jsonlStreamCon2 = (0, _slicedToArray2.default)(_yield$jsonlStreamCon, 1),\n                head = _yield$jsonlStreamCon2[0];\n              var promises = Object.keys(batchOps).map(/*#__PURE__*/function () {\n                var _ref = (0, _asyncToGenerator2.default)(function* (key) {\n                  var json = yield Promise.resolve(head[key]);\n                  if ('result' in json) {\n                    /**\n                    * Not very pretty, but we need to unwrap nested data as promises\n                    * Our stream producer will only resolve top-level async values or async values that are directly nested in another async value\n                    */\n                    var result = yield Promise.resolve(json.result);\n                    json = {\n                      result: {\n                        data: yield Promise.resolve(result.data)\n                      }\n                    };\n                  }\n                  return {\n                    json,\n                    meta: {\n                      response: res\n                    }\n                  };\n                });\n                return function (_x) {\n                  return _ref.apply(this, arguments);\n                };\n              }());\n              return promises;\n            })();\n          }\n        };\n      };\n      var query = (0, _dataLoader.dataLoader)(batchLoader('query'));\n      var mutation = (0, _dataLoader.dataLoader)(batchLoader('mutation'));\n      var loaders = {\n        query,\n        mutation\n      };\n      return _ref2 => {\n        var op = _ref2.op;\n        return (0, _observable.observable)(observer => {\n          /* istanbul ignore if -- @preserve */if (op.type === 'subscription') {\n            throw new Error('Subscriptions are unsupported by `httpBatchStreamLink` - use `httpSubscriptionLink` or `wsLink`');\n          }\n          var loader = loaders[op.type];\n          var promise = loader.load(op);\n          var _res = undefined;\n          promise.then(res => {\n            _res = res;\n            if ('error' in res.json) {\n              observer.error(_TRPCClientError.TRPCClientError.from(res.json, {\n                meta: res.meta\n              }));\n              return;\n            } else if ('result' in res.json) {\n              observer.next({\n                context: res.meta,\n                result: res.json.result\n              });\n              observer.complete();\n              return;\n            }\n            observer.complete();\n          }).catch(err => {\n            observer.error(_TRPCClientError.TRPCClientError.from(err, {\n              meta: _res?.meta\n            }));\n          });\n          return () => {\n            // noop\n          };\n        });\n      };\n    };\n  }\n});","lineCount":162,"map":[[9,2,1,0],[9,6,1,0,"_observable"],[9,17,1,0],[9,20,1,0,"require"],[9,27,1,0],[9,28,1,0,"_dependencyMap"],[9,42,1,0],[10,2,2,0],[10,6,2,0,"_unstableCoreDoNotImport"],[10,30,2,0],[10,33,2,0,"require"],[10,40,2,0],[10,41,2,0,"_dependencyMap"],[10,55,2,0],[11,2,3,0],[11,6,3,0,"_dataLoader"],[11,17,3,0],[11,20,3,0,"require"],[11,27,3,0],[11,28,3,0,"_dependencyMap"],[11,42,3,0],[12,2,4,0],[12,6,4,0,"_signals"],[12,14,4,0],[12,17,4,0,"require"],[12,24,4,0],[12,25,4,0,"_dependencyMap"],[12,39,4,0],[13,2,5,0],[13,6,5,0,"_TRPCClientError"],[13,22,5,0],[13,25,5,0,"require"],[13,32,5,0],[13,33,5,0,"_dependencyMap"],[13,47,5,0],[14,2,6,0],[14,6,6,0,"_httpUtils"],[14,16,6,0],[14,19,6,0,"require"],[14,26,6,0],[14,27,6,0,"_dependencyMap"],[14,41,6,0],[15,2,8,0],[16,0,9,0],[17,0,10,0],[18,2,10,4],[18,11,10,13,"unstable_httpBatchStreamLink"],[18,39,10,41,"unstable_httpBatchStreamLink"],[18,40,10,42,"opts"],[18,44,10,46],[18,46,10,48],[19,4,11,4],[19,8,11,10,"resolvedOpts"],[19,20,11,22],[19,23,11,25],[19,27,11,25,"resolveHTTPLinkOptions"],[19,60,11,47],[19,62,11,48,"opts"],[19,66,11,52],[19,67,11,53],[20,4,12,4],[20,8,12,10,"maxURLLength"],[20,20,12,22],[20,23,12,25,"opts"],[20,27,12,29],[20,28,12,30,"maxURLLength"],[20,40,12,42],[20,44,12,46,"Infinity"],[20,52,12,54],[21,4,13,4],[21,8,13,10,"maxItems"],[21,16,13,18],[21,19,13,21,"opts"],[21,23,13,25],[21,24,13,26,"maxItems"],[21,32,13,34],[21,36,13,38,"Infinity"],[21,44,13,46],[22,4,14,4],[22,11,14,11],[22,17,14,15],[23,6,15,8],[23,10,15,14,"batchLoader"],[23,21,15,25],[23,24,15,29,"type"],[23,28,15,33],[23,32,15,36],[24,8,16,12],[24,15,16,19],[25,10,17,16,"validate"],[25,18,17,24,"validate"],[25,19,17,26,"batchOps"],[25,27,17,34],[25,29,17,36],[26,12,18,20],[26,16,18,24,"maxURLLength"],[26,28,18,36],[26,33,18,41,"Infinity"],[26,41,18,49],[26,45,18,53,"maxItems"],[26,53,18,61],[26,58,18,66,"Infinity"],[26,66,18,74],[26,68,18,76],[27,14,19,24],[28,14,20,24],[28,21,20,31],[28,25,20,35],[29,12,21,20],[30,12,22,20],[30,16,22,24,"batchOps"],[30,24,22,32],[30,25,22,33,"length"],[30,31,22,39],[30,34,22,42,"maxItems"],[30,42,22,50],[30,44,22,52],[31,14,23,24],[31,21,23,31],[31,26,23,36],[32,12,24,20],[33,12,25,20],[33,16,25,26,"path"],[33,20,25,30],[33,23,25,33,"batchOps"],[33,31,25,41],[33,32,25,42,"map"],[33,35,25,45],[33,36,25,47,"op"],[33,38,25,49],[33,42,25,52,"op"],[33,44,25,54],[33,45,25,55,"path"],[33,49,25,59],[33,50,25,60],[33,51,25,61,"join"],[33,55,25,65],[33,56,25,66],[33,59,25,69],[33,60,25,70],[34,12,26,20],[34,16,26,26,"inputs"],[34,22,26,32],[34,25,26,35,"batchOps"],[34,33,26,43],[34,34,26,44,"map"],[34,37,26,47],[34,38,26,49,"op"],[34,40,26,51],[34,44,26,54,"op"],[34,46,26,56],[34,47,26,57,"input"],[34,52,26,62],[34,53,26,63],[35,12,27,20],[35,16,27,26,"url"],[35,19,27,29],[35,22,27,32],[35,26,27,32,"getUrl"],[35,43,27,38],[35,45,27,39],[36,14,28,24],[36,17,28,27,"resolvedOpts"],[36,29,28,39],[37,14,29,24,"type"],[37,18,29,28],[38,14,30,24,"path"],[38,18,30,28],[39,14,31,24,"inputs"],[39,20,31,30],[40,14,32,24,"signal"],[40,20,32,30],[40,22,32,32],[41,12,33,20],[41,13,33,21],[41,14,33,22],[42,12,34,20],[42,19,34,27,"url"],[42,22,34,30],[42,23,34,31,"length"],[42,29,34,37],[42,33,34,41,"maxURLLength"],[42,45,34,53],[43,10,35,16],[43,11,35,17],[44,10,36,22,"fetch"],[44,15,36,27,"fetch"],[44,16,36,29,"batchOps"],[44,24,36,37],[44,26,36,39],[45,12,36,39],[45,23,36,39,"_asyncToGenerator2"],[45,41,36,39],[45,42,36,39,"default"],[45,49,36,39],[46,14,37,20],[46,18,37,26,"path"],[46,22,37,30],[46,25,37,33,"batchOps"],[46,33,37,41],[46,34,37,42,"map"],[46,37,37,45],[46,38,37,47,"op"],[46,40,37,49],[46,44,37,52,"op"],[46,46,37,54],[46,47,37,55,"path"],[46,51,37,59],[46,52,37,60],[46,53,37,61,"join"],[46,57,37,65],[46,58,37,66],[46,61,37,69],[46,62,37,70],[47,14,38,20],[47,18,38,26,"inputs"],[47,24,38,32],[47,27,38,35,"batchOps"],[47,35,38,43],[47,36,38,44,"map"],[47,39,38,47],[47,40,38,49,"op"],[47,42,38,51],[47,46,38,54,"op"],[47,48,38,56],[47,49,38,57,"input"],[47,54,38,62],[47,55,38,63],[48,14,39,20],[48,18,39,26,"batchSignals"],[48,30,39,38],[48,33,39,41],[48,37,39,41,"allAbortSignals"],[48,61,39,56],[48,63,39,57],[48,66,39,60,"batchOps"],[48,74,39,68],[48,75,39,69,"map"],[48,78,39,72],[48,79,39,74,"op"],[48,81,39,76],[48,85,39,79,"op"],[48,87,39,81],[48,88,39,82,"signal"],[48,94,39,88],[48,95,39,89],[48,96,39,90],[49,14,40,20],[49,18,40,26,"abortController"],[49,33,40,41],[49,36,40,44],[49,40,40,48,"AbortController"],[49,55,40,63],[49,56,40,64],[49,57,40,65],[50,14,41,20],[50,18,41,26,"responsePromise"],[50,33,41,41],[50,36,41,44],[50,40,41,44,"fetchHTTPResponse"],[50,68,41,61],[50,70,41,62],[51,16,42,24],[51,19,42,27,"resolvedOpts"],[51,31,42,39],[52,16,43,24,"signal"],[52,22,43,30],[52,24,43,32],[52,28,43,32,"raceAbortSignals"],[52,53,43,48],[52,55,43,49,"batchSignals"],[52,67,43,61],[52,69,43,63,"abortController"],[52,84,43,78],[52,85,43,79,"signal"],[52,91,43,85],[52,92,43,86],[53,16,44,24,"type"],[53,20,44,28],[54,16,45,24,"contentTypeHeader"],[54,33,45,41],[54,35,45,43],[54,53,45,61],[55,16,46,24,"trpcAcceptHeader"],[55,32,46,40],[55,34,46,42],[55,53,46,61],[56,16,47,24,"getUrl"],[56,22,47,30],[56,24,47,24,"getUrl"],[56,41,47,30],[57,16,48,24,"getBody"],[57,23,48,31],[57,25,48,24,"getBody"],[57,43,48,31],[58,16,49,24,"inputs"],[58,22,49,30],[59,16,50,24,"path"],[59,20,50,28],[60,16,51,24,"headers"],[60,23,51,31,"headers"],[60,24,51,31],[60,26,51,35],[61,18,52,28],[61,22,52,32],[61,23,52,33,"opts"],[61,27,52,37],[61,28,52,38,"headers"],[61,35,52,45],[61,37,52,47],[62,20,53,32],[62,27,53,39],[62,28,53,40],[62,29,53,41],[63,18,54,28],[64,18,55,28],[64,22,55,32],[64,29,55,39,"opts"],[64,33,55,43],[64,34,55,44,"headers"],[64,41,55,51],[64,46,55,56],[64,56,55,66],[64,58,55,68],[65,20,56,32],[65,27,56,39,"opts"],[65,31,56,43],[65,32,56,44,"headers"],[65,39,56,51],[65,40,56,52],[66,22,57,36,"opList"],[66,28,57,42],[66,30,57,44,"batchOps"],[67,20,58,32],[67,21,58,33],[67,22,58,34],[68,18,59,28],[69,18,60,28],[69,25,60,35,"opts"],[69,29,60,39],[69,30,60,40,"headers"],[69,37,60,47],[70,16,61,24],[71,14,62,20],[71,15,62,21],[71,16,62,22],[72,14,63,20],[72,18,63,26,"res"],[72,21,63,29],[72,30,63,38,"responsePromise"],[72,45,63,53],[73,14,64,20],[73,18,64,20,"_yield$jsonlStreamCon"],[73,39,64,20],[73,48,64,41],[73,52,64,41,"jsonlStreamConsumer"],[73,96,64,60],[73,98,64,61],[74,18,65,24],[75,18,66,24,"from"],[75,22,66,28],[75,24,66,30,"res"],[75,27,66,33],[75,28,66,34,"body"],[75,32,66,38],[76,18,67,24,"deserialize"],[76,29,67,35],[76,31,67,37,"resolvedOpts"],[76,43,67,49],[76,44,67,50,"transformer"],[76,55,67,61],[76,56,67,62,"output"],[76,62,67,68],[76,63,67,69,"deserialize"],[76,74,67,80],[77,18,68,24],[78,18,69,24,"formatError"],[78,29,69,35,"formatError"],[78,30,69,37,"opts"],[78,34,69,41],[78,36,69,43],[79,20,70,28],[79,24,70,34,"error"],[79,29,70,39],[79,32,70,42,"opts"],[79,36,70,46],[79,37,70,47,"error"],[79,42,70,52],[80,20,71,28],[80,27,71,35,"TRPCClientError"],[80,59,71,50],[80,60,71,51,"from"],[80,64,71,55],[80,65,71,56],[81,22,72,32,"error"],[82,20,73,28],[82,21,73,29],[82,22,73,30],[83,18,74,24],[83,19,74,25],[84,18,75,24,"abortController"],[85,16,76,20],[85,17,76,21],[85,18,76,22],[86,16,76,22,"_yield$jsonlStreamCon2"],[86,38,76,22],[86,45,76,22,"_slicedToArray2"],[86,60,76,22],[86,61,76,22,"default"],[86,68,76,22],[86,70,76,22,"_yield$jsonlStreamCon"],[86,91,76,22],[87,16,64,27,"head"],[87,20,64,31],[87,23,64,31,"_yield$jsonlStreamCon2"],[87,45,64,31],[88,14,77,20],[88,18,77,26,"promises"],[88,26,77,34],[88,29,77,37,"Object"],[88,35,77,43],[88,36,77,44,"keys"],[88,40,77,48],[88,41,77,49,"batchOps"],[88,49,77,57],[88,50,77,58],[88,51,77,59,"map"],[88,54,77,62],[89,16,77,62],[89,20,77,62,"_ref"],[89,24,77,62],[89,31,77,62,"_asyncToGenerator2"],[89,49,77,62],[89,50,77,62,"default"],[89,57,77,62],[89,59,77,63],[89,70,77,70,"key"],[89,73,77,73],[89,75,77,76],[90,18,78,24],[90,22,78,28,"json"],[90,26,78,32],[90,35,78,41,"Promise"],[90,42,78,48],[90,43,78,49,"resolve"],[90,50,78,56],[90,51,78,57,"head"],[90,55,78,61],[90,56,78,62,"key"],[90,59,78,65],[90,60,78,66],[90,61,78,67],[91,18,79,24],[91,22,79,28],[91,30,79,36],[91,34,79,40,"json"],[91,38,79,44],[91,40,79,46],[92,20,80,28],[93,0,81,0],[94,0,82,0],[95,0,83,0],[96,20,83,20],[96,24,83,26,"result"],[96,30,83,32],[96,39,83,41,"Promise"],[96,46,83,48],[96,47,83,49,"resolve"],[96,54,83,56],[96,55,83,57,"json"],[96,59,83,61],[96,60,83,62,"result"],[96,66,83,68],[96,67,83,69],[97,20,84,28,"json"],[97,24,84,32],[97,27,84,35],[98,22,85,32,"result"],[98,28,85,38],[98,30,85,40],[99,24,86,36,"data"],[99,28,86,40],[99,36,86,48,"Promise"],[99,43,86,55],[99,44,86,56,"resolve"],[99,51,86,63],[99,52,86,64,"result"],[99,58,86,70],[99,59,86,71,"data"],[99,63,86,75],[100,22,87,32],[101,20,88,28],[101,21,88,29],[102,18,89,24],[103,18,90,24],[103,25,90,31],[104,20,91,28,"json"],[104,24,91,32],[105,20,92,28,"meta"],[105,24,92,32],[105,26,92,34],[106,22,93,32,"response"],[106,30,93,40],[106,32,93,42,"res"],[107,20,94,28],[108,18,95,24],[108,19,95,25],[109,16,96,20],[109,17,96,21],[110,16,96,21],[110,33,96,21,"_x"],[110,35,96,21],[111,18,96,21],[111,25,96,21,"_ref"],[111,29,96,21],[111,30,96,21,"apply"],[111,35,96,21],[111,42,96,21,"arguments"],[111,51,96,21],[112,16,96,21],[113,14,96,21],[113,18,96,22],[114,14,97,20],[114,21,97,27,"promises"],[114,29,97,35],[115,12,97,36],[116,10,98,16],[117,8,99,12],[117,9,99,13],[118,6,100,8],[118,7,100,9],[119,6,101,8],[119,10,101,14,"query"],[119,15,101,19],[119,18,101,22],[119,22,101,22,"dataLoader"],[119,44,101,32],[119,46,101,33,"batchLoader"],[119,57,101,44],[119,58,101,45],[119,65,101,52],[119,66,101,53],[119,67,101,54],[120,6,102,8],[120,10,102,14,"mutation"],[120,18,102,22],[120,21,102,25],[120,25,102,25,"dataLoader"],[120,47,102,35],[120,49,102,36,"batchLoader"],[120,60,102,47],[120,61,102,48],[120,71,102,58],[120,72,102,59],[120,73,102,60],[121,6,103,8],[121,10,103,14,"loaders"],[121,17,103,21],[121,20,103,24],[122,8,104,12,"query"],[122,13,104,17],[123,8,105,12,"mutation"],[124,6,106,8],[124,7,106,9],[125,6,107,8],[125,13,107,15,"_ref2"],[125,18,107,15],[125,22,107,25],[126,8,107,25],[126,12,107,18,"op"],[126,14,107,20],[126,17,107,20,"_ref2"],[126,22,107,20],[126,23,107,18,"op"],[126,25,107,20],[127,8,108,12],[127,15,108,19],[127,19,108,19,"observable"],[127,41,108,29],[127,43,108,31,"observer"],[127,51,108,39],[127,55,108,42],[128,10,109,16],[128,47,109,54],[128,51,109,58,"op"],[128,53,109,60],[128,54,109,61,"type"],[128,58,109,65],[128,63,109,70],[128,77,109,84],[128,79,109,86],[129,12,110,20],[129,18,110,26],[129,22,110,30,"Error"],[129,27,110,35],[129,28,110,36],[129,125,110,133],[129,126,110,134],[130,10,111,16],[131,10,112,16],[131,14,112,22,"loader"],[131,20,112,28],[131,23,112,31,"loaders"],[131,30,112,38],[131,31,112,39,"op"],[131,33,112,41],[131,34,112,42,"type"],[131,38,112,46],[131,39,112,47],[132,10,113,16],[132,14,113,22,"promise"],[132,21,113,29],[132,24,113,32,"loader"],[132,30,113,38],[132,31,113,39,"load"],[132,35,113,43],[132,36,113,44,"op"],[132,38,113,46],[132,39,113,47],[133,10,114,16],[133,14,114,20,"_res"],[133,18,114,24],[133,21,114,27,"undefined"],[133,30,114,36],[134,10,115,16,"promise"],[134,17,115,23],[134,18,115,24,"then"],[134,22,115,28],[134,23,115,30,"res"],[134,26,115,33],[134,30,115,36],[135,12,116,20,"_res"],[135,16,116,24],[135,19,116,27,"res"],[135,22,116,30],[136,12,117,20],[136,16,117,24],[136,23,117,31],[136,27,117,35,"res"],[136,30,117,38],[136,31,117,39,"json"],[136,35,117,43],[136,37,117,45],[137,14,118,24,"observer"],[137,22,118,32],[137,23,118,33,"error"],[137,28,118,38],[137,29,118,39,"TRPCClientError"],[137,61,118,54],[137,62,118,55,"from"],[137,66,118,59],[137,67,118,60,"res"],[137,70,118,63],[137,71,118,64,"json"],[137,75,118,68],[137,77,118,70],[138,16,119,28,"meta"],[138,20,119,32],[138,22,119,34,"res"],[138,25,119,37],[138,26,119,38,"meta"],[139,14,120,24],[139,15,120,25],[139,16,120,26],[139,17,120,27],[140,14,121,24],[141,12,122,20],[141,13,122,21],[141,19,122,27],[141,23,122,31],[141,31,122,39],[141,35,122,43,"res"],[141,38,122,46],[141,39,122,47,"json"],[141,43,122,51],[141,45,122,53],[142,14,123,24,"observer"],[142,22,123,32],[142,23,123,33,"next"],[142,27,123,37],[142,28,123,38],[143,16,124,28,"context"],[143,23,124,35],[143,25,124,37,"res"],[143,28,124,40],[143,29,124,41,"meta"],[143,33,124,45],[144,16,125,28,"result"],[144,22,125,34],[144,24,125,36,"res"],[144,27,125,39],[144,28,125,40,"json"],[144,32,125,44],[144,33,125,45,"result"],[145,14,126,24],[145,15,126,25],[145,16,126,26],[146,14,127,24,"observer"],[146,22,127,32],[146,23,127,33,"complete"],[146,31,127,41],[146,32,127,42],[146,33,127,43],[147,14,128,24],[148,12,129,20],[149,12,130,20,"observer"],[149,20,130,28],[149,21,130,29,"complete"],[149,29,130,37],[149,30,130,38],[149,31,130,39],[150,10,131,16],[150,11,131,17],[150,12,131,18],[150,13,131,19,"catch"],[150,18,131,24],[150,19,131,26,"err"],[150,22,131,29],[150,26,131,32],[151,12,132,20,"observer"],[151,20,132,28],[151,21,132,29,"error"],[151,26,132,34],[151,27,132,35,"TRPCClientError"],[151,59,132,50],[151,60,132,51,"from"],[151,64,132,55],[151,65,132,56,"err"],[151,68,132,59],[151,70,132,61],[152,14,133,24,"meta"],[152,18,133,28],[152,20,133,30,"_res"],[152,24,133,34],[152,26,133,36,"meta"],[153,12,134,20],[153,13,134,21],[153,14,134,22],[153,15,134,23],[154,10,135,16],[154,11,135,17],[154,12,135,18],[155,10,136,16],[155,17,136,23],[155,23,136,27],[156,12,137,16],[157,10,137,16],[157,11,138,17],[158,8,139,12],[158,9,139,13],[158,10,139,14],[159,6,140,8],[159,7,140,9],[160,4,141,4],[160,5,141,5],[161,2,142,0],[162,0,142,1],[162,3]],"functionMap":{"names":["<global>","unstable_httpBatchStreamLink","<anonymous>","batchLoader","validate","batchOps.map$argument_0","fetch","fetchHTTPResponse$argument_0.headers","jsonlStreamConsumer$argument_0.formatError","Object.keys.map$argument_0","observable$argument_0","promise.then$argument_0","promise.then._catch$argument_0"],"mappings":"AAA;ICS;WCI;4BCC;gBCE;8CCQ,aD;gDCC,cD;iBDS;gBGC;8CDC,aC;gDDC,cC;yEDC,eC;wBCY;yBDU;wBEQ;yBFK;+DGG;qBHmB;iBHE;SDE;8BQQ;6BCO;iBDgB,QE;iBFI;uBRC;iBQE;aRC;KDE;CDC"}},"type":"js/module"}]}