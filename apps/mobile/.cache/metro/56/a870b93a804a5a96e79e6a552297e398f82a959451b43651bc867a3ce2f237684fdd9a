{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":571,"column":0,"index":21288}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":571,"column":0,"index":21288}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":571,"column":0,"index":21288}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"@babel/runtime/helpers/awaitAsyncGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":571,"column":0,"index":21288}}],"key":"KCCfGbYhud/8hhSaB9A6dGsbQ8Y="}},{"name":"@babel/runtime/helpers/wrapAsyncGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":571,"column":0,"index":21288}}],"key":"Q34jBtfqFEZOuHnQUQqZu1j3ZM4="}},{"name":"../../observable/observable.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":90,"index":90}}],"key":"PxEObmVf+WMAUuFPKiU275c+X2U="}},{"name":"../error/getErrorShape.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":91},"end":{"line":2,"column":59,"index":150}}],"key":"VTTqY6KWYSwYey1t8OBkuHkJYcQ="}},{"name":"../error/TRPCError.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":151},"end":{"line":3,"column":76,"index":227}}],"key":"9ib1RjUnEdxHK//Di4rQ4LyNNns="}},{"name":"../stream/jsonl.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":0,"index":228},"end":{"line":4,"column":69,"index":297}}],"key":"F6YxrvHJNHqgcJ5VpXjd7gBaWbA="}},{"name":"../stream/sse.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":0,"index":298},"end":{"line":5,"column":66,"index":364}}],"key":"GeiZmXC5zPNFL0/HwC+KmWdKOE0="}},{"name":"../transformer.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":0,"index":365},"end":{"line":6,"column":59,"index":424}}],"key":"kVpryIaOZ/6ChCV0BrjYwBpFqow="}},{"name":"../utils.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":7,"column":0,"index":425},"end":{"line":7,"column":62,"index":487}}],"key":"Fat1H7ILw/aiXtTd5J3KzMpI+dk="}},{"name":"./contentType.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":8,"column":0,"index":488},"end":{"line":8,"column":51,"index":539}}],"key":"OeqwrKQl13PiUaU3JBCLVWJkZ6o="}},{"name":"./getHTTPStatusCode.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":9,"column":0,"index":540},"end":{"line":9,"column":60,"index":600}}],"key":"/XFbSfturztKFuY21w7RpPiyySA="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.resolveResponse = resolveResponse;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/slicedToArray\"));\n  var _awaitAsyncGenerator2 = _interopRequireDefault(require(_dependencyMap[3], \"@babel/runtime/helpers/awaitAsyncGenerator\"));\n  var _wrapAsyncGenerator2 = _interopRequireDefault(require(_dependencyMap[4], \"@babel/runtime/helpers/wrapAsyncGenerator\"));\n  var _observable = require(_dependencyMap[5], \"../../observable/observable.mjs\");\n  var _getErrorShape = require(_dependencyMap[6], \"../error/getErrorShape.mjs\");\n  var _TRPCError = require(_dependencyMap[7], \"../error/TRPCError.mjs\");\n  var _jsonl = require(_dependencyMap[8], \"../stream/jsonl.mjs\");\n  var _sse = require(_dependencyMap[9], \"../stream/sse.mjs\");\n  var _transformer = require(_dependencyMap[10], \"../transformer.mjs\");\n  var _utils = require(_dependencyMap[11], \"../utils.mjs\");\n  var _contentType = require(_dependencyMap[12], \"./contentType.mjs\");\n  var _getHTTPStatusCode = require(_dependencyMap[13], \"./getHTTPStatusCode.mjs\");\n  function errorToAsyncIterable(err) {\n    return (0, _utils.run)(/*#__PURE__*/(0, _wrapAsyncGenerator2.default)(function* () {\n      throw err;\n    }));\n  }\n  var TYPE_ACCEPTED_METHOD_MAP = {\n    mutation: ['POST'],\n    query: ['GET'],\n    subscription: ['GET']\n  };\n  var TYPE_ACCEPTED_METHOD_MAP_WITH_METHOD_OVERRIDE = {\n    // never allow GET to do a mutation\n    mutation: ['POST'],\n    query: ['GET', 'POST'],\n    subscription: ['GET', 'POST']\n  };\n  function initResponse(initOpts) {\n    var ctx = initOpts.ctx,\n      info = initOpts.info,\n      responseMeta = initOpts.responseMeta,\n      untransformedJSON = initOpts.untransformedJSON,\n      _initOpts$errors = initOpts.errors,\n      errors = _initOpts$errors === void 0 ? [] : _initOpts$errors,\n      headers = initOpts.headers;\n    var status = untransformedJSON ? (0, _getHTTPStatusCode.getHTTPStatusCode)(untransformedJSON) : 200;\n    var eagerGeneration = !untransformedJSON;\n    var data = eagerGeneration ? [] : Array.isArray(untransformedJSON) ? untransformedJSON : [untransformedJSON];\n    var meta = responseMeta?.({\n      ctx,\n      info,\n      paths: info?.calls.map(call => call.path),\n      data,\n      errors,\n      eagerGeneration,\n      type: info?.calls.find(call => call.procedure?._def.type)?.procedure?._def.type ?? 'unknown'\n    }) ?? {};\n    if (meta.headers) {\n      if (meta.headers instanceof Headers) {\n        for (var _ref2 of meta.headers.entries()) {\n          var _ref3 = (0, _slicedToArray2.default)(_ref2, 2);\n          var key = _ref3[0];\n          var value = _ref3[1];\n          headers.append(key, value);\n        }\n      } else {\n        /**\n        * @deprecated, delete in v12\n        */\n        for (var _ref4 of Object.entries(meta.headers)) {\n          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2);\n          var _key = _ref5[0];\n          var _value = _ref5[1];\n          if (Array.isArray(_value)) {\n            for (var v of _value) {\n              headers.append(_key, v);\n            }\n          } else if (typeof _value === 'string') {\n            headers.set(_key, _value);\n          }\n        }\n      }\n    }\n    if (meta.status) {\n      status = meta.status;\n    }\n    return {\n      status\n    };\n  }\n  function caughtErrorToData(cause, errorOpts) {\n    var _errorOpts$opts = errorOpts.opts,\n      router = _errorOpts$opts.router,\n      req = _errorOpts$opts.req,\n      onError = _errorOpts$opts.onError;\n    var error = (0, _TRPCError.getTRPCErrorFromUnknown)(cause);\n    onError?.({\n      error,\n      path: errorOpts.path,\n      input: errorOpts.input,\n      ctx: errorOpts.ctx,\n      type: errorOpts.type,\n      req\n    });\n    var untransformedJSON = {\n      error: (0, _getErrorShape.getErrorShape)({\n        config: router._def._config,\n        error,\n        type: errorOpts.type,\n        path: errorOpts.path,\n        input: errorOpts.input,\n        ctx: errorOpts.ctx\n      })\n    };\n    var transformedJSON = (0, _transformer.transformTRPCResponse)(router._def._config, untransformedJSON);\n    var body = JSON.stringify(transformedJSON);\n    return {\n      error,\n      untransformedJSON,\n      body\n    };\n  }\n  /**\n   * Check if a value is a stream-like object\n   * - if it's an async iterable\n   * - if it's an object with async iterables or promises\n   */\n  function isDataStream(v) {\n    if (!(0, _utils.isObject)(v)) {\n      return false;\n    }\n    if ((0, _utils.isAsyncIterable)(v)) {\n      return true;\n    }\n    return Object.values(v).some(_jsonl.isPromise) || Object.values(v).some(_utils.isAsyncIterable);\n  }\n  function resolveResponse(_x) {\n    return _resolveResponse.apply(this, arguments);\n  }\n  function _resolveResponse() {\n    _resolveResponse = (0, _asyncToGenerator2.default)(function* (opts) {\n      var router = opts.router,\n        req = opts.req;\n      var headers = new Headers([['vary', 'trpc-accept']]);\n      var config = router._def._config;\n      var url = new URL(req.url);\n      if (req.method === 'HEAD') {\n        // can be used for lambda warmup\n        return new Response(null, {\n          status: 204\n        });\n      }\n      var allowBatching = opts.allowBatching ?? opts.batching?.enabled ?? true;\n      var allowMethodOverride = (opts.allowMethodOverride ?? false) && req.method === 'POST';\n      var infoTuple = yield (0, _utils.run)(/*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n        try {\n          return [undefined, yield (0, _contentType.getRequestInfo)({\n            req,\n            path: decodeURIComponent(opts.path),\n            router,\n            searchParams: url.searchParams,\n            headers: opts.req.headers,\n            url\n          })];\n        } catch (cause) {\n          return [(0, _TRPCError.getTRPCErrorFromUnknown)(cause), undefined];\n        }\n      }));\n      var ctxManager = (0, _utils.run)(() => {\n        var result = undefined;\n        return {\n          valueOrUndefined: () => {\n            if (!result) {\n              return undefined;\n            }\n            return result[1];\n          },\n          value: () => {\n            var _result = result,\n              _result2 = (0, _slicedToArray2.default)(_result, 2),\n              err = _result2[0],\n              ctx = _result2[1];\n            if (err) {\n              throw err;\n            }\n            return ctx;\n          },\n          create: function () {\n            var _ref7 = (0, _asyncToGenerator2.default)(function* (info) {\n              if (result) {\n                throw new Error('This should only be called once - report a bug in tRPC');\n              }\n              try {\n                var ctx = yield opts.createContext({\n                  info\n                });\n                result = [undefined, ctx];\n              } catch (cause) {\n                result = [(0, _TRPCError.getTRPCErrorFromUnknown)(cause), undefined];\n              }\n            });\n            return function create(_x2) {\n              return _ref7.apply(this, arguments);\n            };\n          }()\n        };\n      });\n      var methodMapper = allowMethodOverride ? TYPE_ACCEPTED_METHOD_MAP_WITH_METHOD_OVERRIDE : TYPE_ACCEPTED_METHOD_MAP;\n      /**\n      * @deprecated\n      */\n      var isStreamCall = req.headers.get('trpc-accept') === 'application/jsonl';\n      var experimentalSSE = config.sse?.enabled ?? true;\n      try {\n        var _infoTuple = (0, _slicedToArray2.default)(infoTuple, 2),\n          infoError = _infoTuple[0],\n          info = _infoTuple[1];\n        if (infoError) {\n          throw infoError;\n        }\n        if (info.isBatchCall && !allowBatching) {\n          throw new _TRPCError.TRPCError({\n            code: 'BAD_REQUEST',\n            message: `Batching is not enabled on the server`\n          });\n        }\n        /* istanbul ignore if -- @preserve */\n        if (isStreamCall && !info.isBatchCall) {\n          throw new _TRPCError.TRPCError({\n            message: `Streaming requests must be batched (you can do a batch of 1)`,\n            code: 'BAD_REQUEST'\n          });\n        }\n        yield ctxManager.create(info);\n        var rpcCalls = info.calls.map(/*#__PURE__*/function () {\n          var _ref8 = (0, _asyncToGenerator2.default)(function* (call) {\n            var proc = call.procedure;\n            try {\n              if (opts.error) {\n                throw opts.error;\n              }\n              if (!proc) {\n                throw new _TRPCError.TRPCError({\n                  code: 'NOT_FOUND',\n                  message: `No procedure found on path \"${call.path}\"`\n                });\n              }\n              if (!methodMapper[proc._def.type].includes(req.method)) {\n                throw new _TRPCError.TRPCError({\n                  code: 'METHOD_NOT_SUPPORTED',\n                  message: `Unsupported ${req.method}-request to ${proc._def.type} procedure at path \"${call.path}\"`\n                });\n              }\n              if (proc._def.type === 'subscription') {\n                /* istanbul ignore if -- @preserve */if (info.isBatchCall) {\n                  throw new _TRPCError.TRPCError({\n                    code: 'BAD_REQUEST',\n                    message: `Cannot batch subscription calls`\n                  });\n                }\n              }\n              var data = yield proc({\n                path: call.path,\n                getRawInput: call.getRawInput,\n                ctx: ctxManager.value(),\n                type: proc._def.type,\n                signal: opts.req.signal\n              });\n              return [undefined, {\n                data\n              }];\n            } catch (cause) {\n              var error = (0, _TRPCError.getTRPCErrorFromUnknown)(cause);\n              var input = call.result();\n              opts.onError?.({\n                error,\n                path: call.path,\n                input,\n                ctx: ctxManager.valueOrUndefined(),\n                type: call.procedure?._def.type ?? 'unknown',\n                req: opts.req\n              });\n              return [error, undefined];\n            }\n          });\n          return function (_x3) {\n            return _ref8.apply(this, arguments);\n          };\n        }());\n        // ----------- response handlers -----------\n        if (!info.isBatchCall) {\n          var _info$calls = (0, _slicedToArray2.default)(info.calls, 1),\n            call = _info$calls[0];\n          var _yield$rpcCalls$ = yield rpcCalls[0],\n            _yield$rpcCalls$2 = (0, _slicedToArray2.default)(_yield$rpcCalls$, 2),\n            error = _yield$rpcCalls$2[0],\n            result = _yield$rpcCalls$2[1];\n          switch (info.type) {\n            case 'unknown':\n            case 'mutation':\n            case 'query':\n              {\n                // httpLink\n                headers.set('content-type', 'application/json');\n                if (isDataStream(result?.data)) {\n                  throw new _TRPCError.TRPCError({\n                    code: 'UNSUPPORTED_MEDIA_TYPE',\n                    message: 'Cannot use stream-like response in non-streaming request - use httpBatchStreamLink'\n                  });\n                }\n                var res = error ? {\n                  error: (0, _getErrorShape.getErrorShape)({\n                    config,\n                    ctx: ctxManager.valueOrUndefined(),\n                    error,\n                    input: call.result(),\n                    path: call.path,\n                    type: info.type\n                  })\n                } : {\n                  result: {\n                    data: result.data\n                  }\n                };\n                var _headResponse = initResponse({\n                  ctx: ctxManager.valueOrUndefined(),\n                  info,\n                  responseMeta: opts.responseMeta,\n                  errors: error ? [error] : [],\n                  headers,\n                  untransformedJSON: [res]\n                });\n                return new Response(JSON.stringify((0, _transformer.transformTRPCResponse)(config, res)), {\n                  status: _headResponse.status,\n                  headers\n                });\n              }\n            case 'subscription':\n              {\n                // httpSubscriptionLink\n                var iterable = (0, _utils.run)(() => {\n                  if (error) {\n                    return errorToAsyncIterable(error);\n                  }\n                  if (!experimentalSSE) {\n                    return errorToAsyncIterable(new _TRPCError.TRPCError({\n                      code: 'METHOD_NOT_SUPPORTED',\n                      message: 'Missing experimental flag \"sseSubscriptions\"'\n                    }));\n                  }\n                  if (!(0, _observable.isObservable)(result.data) && !(0, _utils.isAsyncIterable)(result.data)) {\n                    return errorToAsyncIterable(new _TRPCError.TRPCError({\n                      message: `Subscription ${call.path} did not return an observable or a AsyncGenerator`,\n                      code: 'INTERNAL_SERVER_ERROR'\n                    }));\n                  }\n                  var dataAsIterable = (0, _observable.isObservable)(result.data) ? (0, _observable.observableToAsyncIterable)(result.data, opts.req.signal) : result.data;\n                  return dataAsIterable;\n                });\n                var stream = (0, _sse.sseStreamProducer)({\n                  ...config.sse,\n                  data: iterable,\n                  serialize: v => config.transformer.output.serialize(v),\n                  formatError(errorOpts) {\n                    var error = (0, _TRPCError.getTRPCErrorFromUnknown)(errorOpts.error);\n                    var input = call?.result();\n                    var path = call?.path;\n                    var type = call?.procedure?._def.type ?? 'unknown';\n                    opts.onError?.({\n                      error,\n                      path,\n                      input,\n                      ctx: ctxManager.valueOrUndefined(),\n                      req: opts.req,\n                      type\n                    });\n                    var shape = (0, _getErrorShape.getErrorShape)({\n                      config,\n                      ctx: ctxManager.valueOrUndefined(),\n                      error,\n                      input,\n                      path,\n                      type\n                    });\n                    return shape;\n                  }\n                });\n                for (var _ref9 of Object.entries(_sse.sseHeaders)) {\n                  var _ref10 = (0, _slicedToArray2.default)(_ref9, 2);\n                  var key = _ref10[0];\n                  var value = _ref10[1];\n                  headers.set(key, value);\n                }\n                var _headResponse2 = initResponse({\n                  ctx: ctxManager.valueOrUndefined(),\n                  info,\n                  responseMeta: opts.responseMeta,\n                  errors: [],\n                  headers,\n                  untransformedJSON: null\n                });\n                return new Response(stream, {\n                  headers,\n                  status: _headResponse2.status\n                });\n              }\n          }\n        }\n        // batch response handlers\n        if (info.accept === 'application/jsonl') {\n          // httpBatchStreamLink\n          headers.set('content-type', 'application/json');\n          headers.set('transfer-encoding', 'chunked');\n          var _headResponse3 = initResponse({\n            ctx: ctxManager.valueOrUndefined(),\n            info,\n            responseMeta: opts.responseMeta,\n            errors: [],\n            headers,\n            untransformedJSON: null\n          });\n          var _stream = (0, _jsonl.jsonlStreamProducer)({\n            ...config.jsonl,\n            /**\n            * Example structure for `maxDepth: 4`:\n            * {\n            *   // 1\n            *   0: {\n            *     // 2\n            *     result: {\n            *       // 3\n            *       data: // 4\n            *     }\n            *   }\n            * }\n            */\n            maxDepth: Infinity,\n            data: rpcCalls.map(/*#__PURE__*/function () {\n              var _ref11 = (0, _asyncToGenerator2.default)(function* (res) {\n                var _yield$res = yield res,\n                  _yield$res2 = (0, _slicedToArray2.default)(_yield$res, 2),\n                  error = _yield$res2[0],\n                  result = _yield$res2[1];\n                var call = info.calls[0];\n                if (error) {\n                  return {\n                    error: (0, _getErrorShape.getErrorShape)({\n                      config,\n                      ctx: ctxManager.valueOrUndefined(),\n                      error,\n                      input: call.result(),\n                      path: call.path,\n                      type: call.procedure?._def.type ?? 'unknown'\n                    })\n                  };\n                }\n                /**\n                * Not very pretty, but we need to wrap nested data in promises\n                * Our stream producer will only resolve top-level async values or async values that are directly nested in another async value\n                */\n                var iterable = (0, _observable.isObservable)(result.data) ? (0, _observable.observableToAsyncIterable)(result.data, opts.req.signal) : Promise.resolve(result.data);\n                return {\n                  result: Promise.resolve({\n                    data: iterable\n                  })\n                };\n              });\n              return function (_x4) {\n                return _ref11.apply(this, arguments);\n              };\n            }()),\n            serialize: config.transformer.output.serialize,\n            onError: cause => {\n              opts.onError?.({\n                error: (0, _TRPCError.getTRPCErrorFromUnknown)(cause),\n                path: undefined,\n                input: undefined,\n                ctx: ctxManager.valueOrUndefined(),\n                req: opts.req,\n                type: info?.type ?? 'unknown'\n              });\n            },\n            formatError(errorOpts) {\n              var call = info?.calls[errorOpts.path[0]];\n              var error = (0, _TRPCError.getTRPCErrorFromUnknown)(errorOpts.error);\n              var input = call?.result();\n              var path = call?.path;\n              var type = call?.procedure?._def.type ?? 'unknown';\n              // no need to call `onError` here as it will be propagated through the stream itself\n              var shape = (0, _getErrorShape.getErrorShape)({\n                config,\n                ctx: ctxManager.valueOrUndefined(),\n                error,\n                input,\n                path,\n                type\n              });\n              return shape;\n            }\n          });\n          return new Response(_stream, {\n            headers,\n            status: _headResponse3.status\n          });\n        }\n        // httpBatchLink\n        /**\n        * Non-streaming response:\n        * - await all responses in parallel, blocking on the slowest one\n        * - create headers with known response body\n        * - return a complete HTTPResponse\n        */\n        headers.set('content-type', 'application/json');\n        var results = (yield Promise.all(rpcCalls)).map(res => {\n          var _res = (0, _slicedToArray2.default)(res, 2),\n            error = _res[0],\n            result = _res[1];\n          if (error) {\n            return res;\n          }\n          if (isDataStream(result.data)) {\n            return [new _TRPCError.TRPCError({\n              code: 'UNSUPPORTED_MEDIA_TYPE',\n              message: 'Cannot use stream-like response in non-streaming request - use httpBatchStreamLink'\n            }), undefined];\n          }\n          return res;\n        });\n        var resultAsRPCResponse = results.map((_ref12, index) => {\n          var _ref13 = (0, _slicedToArray2.default)(_ref12, 2),\n            error = _ref13[0],\n            result = _ref13[1];\n          var call = info.calls[index];\n          if (error) {\n            return {\n              error: (0, _getErrorShape.getErrorShape)({\n                config,\n                ctx: ctxManager.valueOrUndefined(),\n                error,\n                input: call.result(),\n                path: call.path,\n                type: call.procedure?._def.type ?? 'unknown'\n              })\n            };\n          }\n          return {\n            result: {\n              data: result.data\n            }\n          };\n        });\n        var errors = results.map(_ref14 => {\n          var _ref15 = (0, _slicedToArray2.default)(_ref14, 1),\n            error = _ref15[0];\n          return error;\n        }).filter(Boolean);\n        var headResponse = initResponse({\n          ctx: ctxManager.valueOrUndefined(),\n          info,\n          responseMeta: opts.responseMeta,\n          untransformedJSON: resultAsRPCResponse,\n          errors,\n          headers\n        });\n        return new Response(JSON.stringify((0, _transformer.transformTRPCResponse)(config, resultAsRPCResponse)), {\n          status: headResponse.status,\n          headers\n        });\n      } catch (cause) {\n        var _infoTuple2 = (0, _slicedToArray2.default)(infoTuple, 2),\n          _infoError = _infoTuple2[0],\n          _info = _infoTuple2[1];\n        var ctx = ctxManager.valueOrUndefined();\n        // we get here if\n        // - batching is called when it's not enabled\n        // - `createContext()` throws\n        // - `router._def._config.transformer.output.serialize()` throws\n        // - post body is too large\n        // - input deserialization fails\n        // - `errorFormatter` return value is malformed\n        var _caughtErrorToData = caughtErrorToData(cause, {\n            opts,\n            ctx: ctxManager.valueOrUndefined(),\n            type: _info?.type ?? 'unknown'\n          }),\n          _error = _caughtErrorToData.error,\n          untransformedJSON = _caughtErrorToData.untransformedJSON,\n          body = _caughtErrorToData.body;\n        var _headResponse4 = initResponse({\n          ctx,\n          info: _info,\n          responseMeta: opts.responseMeta,\n          untransformedJSON,\n          errors: [_error],\n          headers\n        });\n        return new Response(body, {\n          status: _headResponse4.status,\n          headers\n        });\n      }\n    });\n    return _resolveResponse.apply(this, arguments);\n  }\n});","lineCount":603,"map":[[11,2,1,0],[11,6,1,0,"_observable"],[11,17,1,0],[11,20,1,0,"require"],[11,27,1,0],[11,28,1,0,"_dependencyMap"],[11,42,1,0],[12,2,2,0],[12,6,2,0,"_getErrorShape"],[12,20,2,0],[12,23,2,0,"require"],[12,30,2,0],[12,31,2,0,"_dependencyMap"],[12,45,2,0],[13,2,3,0],[13,6,3,0,"_TRPCError"],[13,16,3,0],[13,19,3,0,"require"],[13,26,3,0],[13,27,3,0,"_dependencyMap"],[13,41,3,0],[14,2,4,0],[14,6,4,0,"_jsonl"],[14,12,4,0],[14,15,4,0,"require"],[14,22,4,0],[14,23,4,0,"_dependencyMap"],[14,37,4,0],[15,2,5,0],[15,6,5,0,"_sse"],[15,10,5,0],[15,13,5,0,"require"],[15,20,5,0],[15,21,5,0,"_dependencyMap"],[15,35,5,0],[16,2,6,0],[16,6,6,0,"_transformer"],[16,18,6,0],[16,21,6,0,"require"],[16,28,6,0],[16,29,6,0,"_dependencyMap"],[16,43,6,0],[17,2,7,0],[17,6,7,0,"_utils"],[17,12,7,0],[17,15,7,0,"require"],[17,22,7,0],[17,23,7,0,"_dependencyMap"],[17,37,7,0],[18,2,8,0],[18,6,8,0,"_contentType"],[18,18,8,0],[18,21,8,0,"require"],[18,28,8,0],[18,29,8,0,"_dependencyMap"],[18,43,8,0],[19,2,9,0],[19,6,9,0,"_getHTTPStatusCode"],[19,24,9,0],[19,27,9,0,"require"],[19,34,9,0],[19,35,9,0,"_dependencyMap"],[19,49,9,0],[20,2,11,0],[20,11,11,9,"errorToAsyncIterable"],[20,31,11,29,"errorToAsyncIterable"],[20,32,11,30,"err"],[20,35,11,33],[20,37,11,35],[21,4,12,4],[21,11,12,11],[21,15,12,11,"run"],[21,25,12,14],[21,44,12,14,"_wrapAsyncGenerator2"],[21,64,12,14],[21,65,12,14,"default"],[21,72,12,14],[21,74,12,15],[21,87,12,33],[22,6,13,8],[22,12,13,14,"err"],[22,15,13,17],[23,4,14,4],[23,5,14,5],[23,7,14,6],[24,2,15,0],[25,2,16,0],[25,6,16,6,"TYPE_ACCEPTED_METHOD_MAP"],[25,30,16,30],[25,33,16,33],[26,4,17,4,"mutation"],[26,12,17,12],[26,14,17,14],[26,15,18,8],[26,21,18,14],[26,22,19,5],[27,4,20,4,"query"],[27,9,20,9],[27,11,20,11],[27,12,21,8],[27,17,21,13],[27,18,22,5],[28,4,23,4,"subscription"],[28,16,23,16],[28,18,23,18],[28,19,24,8],[28,24,24,13],[29,2,26,0],[29,3,26,1],[30,2,27,0],[30,6,27,6,"TYPE_ACCEPTED_METHOD_MAP_WITH_METHOD_OVERRIDE"],[30,51,27,51],[30,54,27,54],[31,4,28,4],[32,4,29,4,"mutation"],[32,12,29,12],[32,14,29,14],[32,15,30,8],[32,21,30,14],[32,22,31,5],[33,4,32,4,"query"],[33,9,32,9],[33,11,32,11],[33,12,33,8],[33,17,33,13],[33,19,34,8],[33,25,34,14],[33,26,35,5],[34,4,36,4,"subscription"],[34,16,36,16],[34,18,36,18],[34,19,37,8],[34,24,37,13],[34,26,38,8],[34,32,38,14],[35,2,40,0],[35,3,40,1],[36,2,41,0],[36,11,41,9,"initResponse"],[36,23,41,21,"initResponse"],[36,24,41,22,"initOpts"],[36,32,41,30],[36,34,41,32],[37,4,42,4],[37,8,42,12,"ctx"],[37,11,42,15],[37,14,42,81,"initOpts"],[37,22,42,89],[37,23,42,12,"ctx"],[37,26,42,15],[38,6,42,17,"info"],[38,10,42,21],[38,13,42,81,"initOpts"],[38,21,42,89],[38,22,42,17,"info"],[38,26,42,21],[39,6,42,23,"responseMeta"],[39,18,42,35],[39,21,42,81,"initOpts"],[39,29,42,89],[39,30,42,23,"responseMeta"],[39,42,42,35],[40,6,42,37,"untransformedJSON"],[40,23,42,54],[40,26,42,81,"initOpts"],[40,34,42,89],[40,35,42,37,"untransformedJSON"],[40,52,42,54],[41,6,42,54,"_initOpts$errors"],[41,22,42,54],[41,25,42,81,"initOpts"],[41,33,42,89],[41,34,42,56,"errors"],[41,40,42,62],[42,6,42,56,"errors"],[42,12,42,62],[42,15,42,62,"_initOpts$errors"],[42,31,42,62],[42,45,42,65],[42,47,42,67],[42,50,42,67,"_initOpts$errors"],[42,66,42,67],[43,6,42,69,"headers"],[43,13,42,76],[43,16,42,81,"initOpts"],[43,24,42,89],[43,25,42,69,"headers"],[43,32,42,76],[44,4,43,4],[44,8,43,8,"status"],[44,14,43,14],[44,17,43,17,"untransformedJSON"],[44,34,43,34],[44,37,43,37],[44,41,43,37,"getHTTPStatusCode"],[44,77,43,54],[44,79,43,55,"untransformedJSON"],[44,96,43,72],[44,97,43,73],[44,100,43,76],[44,103,43,79],[45,4,44,4],[45,8,44,10,"eagerGeneration"],[45,23,44,25],[45,26,44,28],[45,27,44,29,"untransformedJSON"],[45,44,44,46],[46,4,45,4],[46,8,45,10,"data"],[46,12,45,14],[46,15,45,17,"eagerGeneration"],[46,30,45,32],[46,33,45,35],[46,35,45,37],[46,38,45,40,"Array"],[46,43,45,45],[46,44,45,46,"isArray"],[46,51,45,53],[46,52,45,54,"untransformedJSON"],[46,69,45,71],[46,70,45,72],[46,73,45,75,"untransformedJSON"],[46,90,45,92],[46,93,45,95],[46,94,46,8,"untransformedJSON"],[46,111,46,25],[46,112,47,5],[47,4,48,4],[47,8,48,10,"meta"],[47,12,48,14],[47,15,48,17,"responseMeta"],[47,27,48,29],[47,30,48,32],[48,6,49,8,"ctx"],[48,9,49,11],[49,6,50,8,"info"],[49,10,50,12],[50,6,51,8,"paths"],[50,11,51,13],[50,13,51,15,"info"],[50,17,51,19],[50,19,51,21,"calls"],[50,24,51,26],[50,25,51,27,"map"],[50,28,51,30],[50,29,51,32,"call"],[50,33,51,36],[50,37,51,39,"call"],[50,41,51,43],[50,42,51,44,"path"],[50,46,51,48],[50,47,51,49],[51,6,52,8,"data"],[51,10,52,12],[52,6,53,8,"errors"],[52,12,53,14],[53,6,54,8,"eagerGeneration"],[53,21,54,23],[54,6,55,8,"type"],[54,10,55,12],[54,12,55,14,"info"],[54,16,55,18],[54,18,55,20,"calls"],[54,23,55,25],[54,24,55,26,"find"],[54,28,55,30],[54,29,55,32,"call"],[54,33,55,36],[54,37,55,39,"call"],[54,41,55,43],[54,42,55,44,"procedure"],[54,51,55,53],[54,53,55,55,"_def"],[54,57,55,59],[54,58,55,60,"type"],[54,62,55,64],[54,63,55,65],[54,65,55,67,"procedure"],[54,74,55,76],[54,76,55,78,"_def"],[54,80,55,82],[54,81,55,83,"type"],[54,85,55,87],[54,89,55,91],[55,4,56,4],[55,5,56,5],[55,6,56,6],[55,10,56,10],[55,11,56,11],[55,12,56,12],[56,4,57,4],[56,8,57,8,"meta"],[56,12,57,12],[56,13,57,13,"headers"],[56,20,57,20],[56,22,57,22],[57,6,58,8],[57,10,58,12,"meta"],[57,14,58,16],[57,15,58,17,"headers"],[57,22,58,24],[57,34,58,36,"Headers"],[57,41,58,43],[57,43,58,45],[58,8,59,12],[58,17,59,12,"_ref2"],[58,22,59,12],[58,26,59,39,"meta"],[58,30,59,43],[58,31,59,44,"headers"],[58,38,59,51],[58,39,59,52,"entries"],[58,46,59,59],[58,47,59,60],[58,48,59,61],[58,50,59,62],[59,10,59,62],[59,14,59,62,"_ref3"],[59,19,59,62],[59,26,59,62,"_slicedToArray2"],[59,41,59,62],[59,42,59,62,"default"],[59,49,59,62],[59,51,59,62,"_ref2"],[59,56,59,62],[60,10,59,62],[60,14,59,24,"key"],[60,17,59,27],[60,20,59,27,"_ref3"],[60,25,59,27],[61,10,59,27],[61,14,59,29,"value"],[61,19,59,34],[61,22,59,34,"_ref3"],[61,27,59,34],[62,10,60,16,"headers"],[62,17,60,23],[62,18,60,24,"append"],[62,24,60,30],[62,25,60,31,"key"],[62,28,60,34],[62,30,60,36,"value"],[62,35,60,41],[62,36,60,42],[63,8,61,12],[64,6,62,8],[64,7,62,9],[64,13,62,15],[65,8,63,12],[66,0,64,0],[67,0,65,0],[68,8,65,10],[68,17,65,10,"_ref4"],[68,22,65,10],[68,26,65,37,"Object"],[68,32,65,43],[68,33,65,44,"entries"],[68,40,65,51],[68,41,65,52,"meta"],[68,45,65,56],[68,46,65,57,"headers"],[68,53,65,64],[68,54,65,65],[68,56,65,66],[69,10,65,66],[69,14,65,66,"_ref5"],[69,19,65,66],[69,26,65,66,"_slicedToArray2"],[69,41,65,66],[69,42,65,66,"default"],[69,49,65,66],[69,51,65,66,"_ref4"],[69,56,65,66],[70,10,65,66],[70,14,65,22,"key"],[70,18,65,25],[70,21,65,25,"_ref5"],[70,26,65,25],[71,10,65,25],[71,14,65,27,"value"],[71,20,65,32],[71,23,65,32,"_ref5"],[71,28,65,32],[72,10,66,16],[72,14,66,20,"Array"],[72,19,66,25],[72,20,66,26,"isArray"],[72,27,66,33],[72,28,66,34,"value"],[72,34,66,39],[72,35,66,40],[72,37,66,42],[73,12,67,20],[73,17,67,25],[73,21,67,31,"v"],[73,22,67,32],[73,26,67,36,"value"],[73,32,67,41],[73,34,67,42],[74,14,68,24,"headers"],[74,21,68,31],[74,22,68,32,"append"],[74,28,68,38],[74,29,68,39,"key"],[74,33,68,42],[74,35,68,44,"v"],[74,36,68,45],[74,37,68,46],[75,12,69,20],[76,10,70,16],[76,11,70,17],[76,17,70,23],[76,21,70,27],[76,28,70,34,"value"],[76,34,70,39],[76,39,70,44],[76,47,70,52],[76,49,70,54],[77,12,71,20,"headers"],[77,19,71,27],[77,20,71,28,"set"],[77,23,71,31],[77,24,71,32,"key"],[77,28,71,35],[77,30,71,37,"value"],[77,36,71,42],[77,37,71,43],[78,10,72,16],[79,8,73,12],[80,6,74,8],[81,4,75,4],[82,4,76,4],[82,8,76,8,"meta"],[82,12,76,12],[82,13,76,13,"status"],[82,19,76,19],[82,21,76,21],[83,6,77,8,"status"],[83,12,77,14],[83,15,77,17,"meta"],[83,19,77,21],[83,20,77,22,"status"],[83,26,77,28],[84,4,78,4],[85,4,79,4],[85,11,79,11],[86,6,80,8,"status"],[87,4,81,4],[87,5,81,5],[88,2,82,0],[89,2,83,0],[89,11,83,9,"caughtErrorToData"],[89,28,83,26,"caughtErrorToData"],[89,29,83,27,"cause"],[89,34,83,32],[89,36,83,34,"errorOpts"],[89,45,83,43],[89,47,83,45],[90,4,84,4],[90,8,84,4,"_errorOpts$opts"],[90,23,84,4],[90,26,84,37,"errorOpts"],[90,35,84,46],[90,36,84,47,"opts"],[90,40,84,51],[91,6,84,12,"router"],[91,12,84,18],[91,15,84,18,"_errorOpts$opts"],[91,30,84,18],[91,31,84,12,"router"],[91,37,84,18],[92,6,84,20,"req"],[92,9,84,23],[92,12,84,23,"_errorOpts$opts"],[92,27,84,23],[92,28,84,20,"req"],[92,31,84,23],[93,6,84,25,"onError"],[93,13,84,32],[93,16,84,32,"_errorOpts$opts"],[93,31,84,32],[93,32,84,25,"onError"],[93,39,84,32],[94,4,85,4],[94,8,85,10,"error"],[94,13,85,15],[94,16,85,18],[94,20,85,18,"getTRPCErrorFromUnknown"],[94,54,85,41],[94,56,85,42,"cause"],[94,61,85,47],[94,62,85,48],[95,4,86,4,"onError"],[95,11,86,11],[95,14,86,14],[96,6,87,8,"error"],[96,11,87,13],[97,6,88,8,"path"],[97,10,88,12],[97,12,88,14,"errorOpts"],[97,21,88,23],[97,22,88,24,"path"],[97,26,88,28],[98,6,89,8,"input"],[98,11,89,13],[98,13,89,15,"errorOpts"],[98,22,89,24],[98,23,89,25,"input"],[98,28,89,30],[99,6,90,8,"ctx"],[99,9,90,11],[99,11,90,13,"errorOpts"],[99,20,90,22],[99,21,90,23,"ctx"],[99,24,90,26],[100,6,91,8,"type"],[100,10,91,12],[100,12,91,14,"errorOpts"],[100,21,91,23],[100,22,91,24,"type"],[100,26,91,28],[101,6,92,8,"req"],[102,4,93,4],[102,5,93,5],[102,6,93,6],[103,4,94,4],[103,8,94,10,"untransformedJSON"],[103,25,94,27],[103,28,94,30],[104,6,95,8,"error"],[104,11,95,13],[104,13,95,15],[104,17,95,15,"getErrorShape"],[104,45,95,28],[104,47,95,29],[105,8,96,12,"config"],[105,14,96,18],[105,16,96,20,"router"],[105,22,96,26],[105,23,96,27,"_def"],[105,27,96,31],[105,28,96,32,"_config"],[105,35,96,39],[106,8,97,12,"error"],[106,13,97,17],[107,8,98,12,"type"],[107,12,98,16],[107,14,98,18,"errorOpts"],[107,23,98,27],[107,24,98,28,"type"],[107,28,98,32],[108,8,99,12,"path"],[108,12,99,16],[108,14,99,18,"errorOpts"],[108,23,99,27],[108,24,99,28,"path"],[108,28,99,32],[109,8,100,12,"input"],[109,13,100,17],[109,15,100,19,"errorOpts"],[109,24,100,28],[109,25,100,29,"input"],[109,30,100,34],[110,8,101,12,"ctx"],[110,11,101,15],[110,13,101,17,"errorOpts"],[110,22,101,26],[110,23,101,27,"ctx"],[111,6,102,8],[111,7,102,9],[112,4,103,4],[112,5,103,5],[113,4,104,4],[113,8,104,10,"transformedJSON"],[113,23,104,25],[113,26,104,28],[113,30,104,28,"transformTRPCResponse"],[113,64,104,49],[113,66,104,50,"router"],[113,72,104,56],[113,73,104,57,"_def"],[113,77,104,61],[113,78,104,62,"_config"],[113,85,104,69],[113,87,104,71,"untransformedJSON"],[113,104,104,88],[113,105,104,89],[114,4,105,4],[114,8,105,10,"body"],[114,12,105,14],[114,15,105,17,"JSON"],[114,19,105,21],[114,20,105,22,"stringify"],[114,29,105,31],[114,30,105,32,"transformedJSON"],[114,45,105,47],[114,46,105,48],[115,4,106,4],[115,11,106,11],[116,6,107,8,"error"],[116,11,107,13],[117,6,108,8,"untransformedJSON"],[117,23,108,25],[118,6,109,8,"body"],[119,4,110,4],[119,5,110,5],[120,2,111,0],[121,2,112,0],[122,0,113,0],[123,0,114,0],[124,0,115,0],[125,0,116,0],[126,2,116,4],[126,11,116,13,"isDataStream"],[126,23,116,25,"isDataStream"],[126,24,116,26,"v"],[126,25,116,27],[126,27,116,29],[127,4,117,4],[127,8,117,8],[127,9,117,9],[127,13,117,9,"isObject"],[127,28,117,17],[127,30,117,18,"v"],[127,31,117,19],[127,32,117,20],[127,34,117,22],[128,6,118,8],[128,13,118,15],[128,18,118,20],[129,4,119,4],[130,4,120,4],[130,8,120,8],[130,12,120,8,"isAsyncIterable"],[130,34,120,23],[130,36,120,24,"v"],[130,37,120,25],[130,38,120,26],[130,40,120,28],[131,6,121,8],[131,13,121,15],[131,17,121,19],[132,4,122,4],[133,4,123,4],[133,11,123,11,"Object"],[133,17,123,17],[133,18,123,18,"values"],[133,24,123,24],[133,25,123,25,"v"],[133,26,123,26],[133,27,123,27],[133,28,123,28,"some"],[133,32,123,32],[133,33,123,33,"isPromise"],[133,49,123,42],[133,50,123,43],[133,54,123,47,"Object"],[133,60,123,53],[133,61,123,54,"values"],[133,67,123,60],[133,68,123,61,"v"],[133,69,123,62],[133,70,123,63],[133,71,123,64,"some"],[133,75,123,68],[133,76,123,69,"isAsyncIterable"],[133,98,123,84],[133,99,123,85],[134,2,124,0],[135,2,124,1],[135,11,125,15,"resolveResponse"],[135,26,125,30,"resolveResponse"],[135,27,125,30,"_x"],[135,29,125,30],[136,4,125,30],[136,11,125,30,"_resolveResponse"],[136,27,125,30],[136,28,125,30,"apply"],[136,33,125,30],[136,40,125,30,"arguments"],[136,49,125,30],[137,2,125,30],[138,2,125,30],[138,11,125,30,"_resolveResponse"],[138,28,125,30],[139,4,125,30,"_resolveResponse"],[139,20,125,30],[139,27,125,30,"_asyncToGenerator2"],[139,45,125,30],[139,46,125,30,"default"],[139,53,125,30],[139,55,125,0],[139,66,125,31,"opts"],[139,70,125,35],[139,72,125,37],[140,6,126,4],[140,10,126,12,"router"],[140,16,126,18],[140,19,126,28,"opts"],[140,23,126,32],[140,24,126,12,"router"],[140,30,126,18],[141,8,126,20,"req"],[141,11,126,23],[141,14,126,28,"opts"],[141,18,126,32],[141,19,126,20,"req"],[141,22,126,23],[142,6,127,4],[142,10,127,10,"headers"],[142,17,127,17],[142,20,127,20],[142,24,127,24,"Headers"],[142,31,127,31],[142,32,127,32],[142,33,128,8],[142,34,129,12],[142,40,129,18],[142,42,130,12],[142,55,130,25],[142,56,131,9],[142,57,132,5],[142,58,132,6],[143,6,133,4],[143,10,133,10,"config"],[143,16,133,16],[143,19,133,19,"router"],[143,25,133,25],[143,26,133,26,"_def"],[143,30,133,30],[143,31,133,31,"_config"],[143,38,133,38],[144,6,134,4],[144,10,134,10,"url"],[144,13,134,13],[144,16,134,16],[144,20,134,20,"URL"],[144,23,134,23],[144,24,134,24,"req"],[144,27,134,27],[144,28,134,28,"url"],[144,31,134,31],[144,32,134,32],[145,6,135,4],[145,10,135,8,"req"],[145,13,135,11],[145,14,135,12,"method"],[145,20,135,18],[145,25,135,23],[145,31,135,29],[145,33,135,31],[146,8,136,8],[147,8,137,8],[147,15,137,15],[147,19,137,19,"Response"],[147,27,137,27],[147,28,137,28],[147,32,137,32],[147,34,137,34],[148,10,138,12,"status"],[148,16,138,18],[148,18,138,20],[149,8,139,8],[149,9,139,9],[149,10,139,10],[150,6,140,4],[151,6,141,4],[151,10,141,10,"allowBatching"],[151,23,141,23],[151,26,141,26,"opts"],[151,30,141,30],[151,31,141,31,"allowBatching"],[151,44,141,44],[151,48,141,48,"opts"],[151,52,141,52],[151,53,141,53,"batching"],[151,61,141,61],[151,63,141,63,"enabled"],[151,70,141,70],[151,74,141,74],[151,78,141,78],[152,6,142,4],[152,10,142,10,"allowMethodOverride"],[152,29,142,29],[152,32,142,32],[152,33,142,33,"opts"],[152,37,142,37],[152,38,142,38,"allowMethodOverride"],[152,57,142,57],[152,61,142,61],[152,66,142,66],[152,71,142,71,"req"],[152,74,142,74],[152,75,142,75,"method"],[152,81,142,81],[152,86,142,86],[152,92,142,92],[153,6,143,4],[153,10,143,10,"infoTuple"],[153,19,143,19],[153,28,143,28],[153,32,143,28,"run"],[153,42,143,31],[153,61,143,31,"_asyncToGenerator2"],[153,79,143,31],[153,80,143,31,"default"],[153,87,143,31],[153,89,143,32],[153,102,143,42],[154,8,144,8],[154,12,144,12],[155,10,145,12],[155,17,145,19],[155,18,146,16,"undefined"],[155,27,146,25],[155,35,147,22],[155,39,147,22,"getRequestInfo"],[155,66,147,36],[155,68,147,37],[156,12,148,20,"req"],[156,15,148,23],[157,12,149,20,"path"],[157,16,149,24],[157,18,149,26,"decodeURIComponent"],[157,36,149,44],[157,37,149,45,"opts"],[157,41,149,49],[157,42,149,50,"path"],[157,46,149,54],[157,47,149,55],[158,12,150,20,"router"],[158,18,150,26],[159,12,151,20,"searchParams"],[159,24,151,32],[159,26,151,34,"url"],[159,29,151,37],[159,30,151,38,"searchParams"],[159,42,151,50],[160,12,152,20,"headers"],[160,19,152,27],[160,21,152,29,"opts"],[160,25,152,33],[160,26,152,34,"req"],[160,29,152,37],[160,30,152,38,"headers"],[160,37,152,45],[161,12,153,20,"url"],[162,10,154,16],[162,11,154,17],[162,12,154,18],[162,13,155,13],[163,8,156,8],[163,9,156,9],[163,10,156,10],[163,17,156,17,"cause"],[163,22,156,22],[163,24,156,24],[164,10,157,12],[164,17,157,19],[164,18,158,16],[164,22,158,16,"getTRPCErrorFromUnknown"],[164,56,158,39],[164,58,158,40,"cause"],[164,63,158,45],[164,64,158,46],[164,66,159,16,"undefined"],[164,75,159,25],[164,76,160,13],[165,8,161,8],[166,6,162,4],[166,7,162,5],[166,9,162,6],[167,6,163,4],[167,10,163,10,"ctxManager"],[167,20,163,20],[167,23,163,23],[167,27,163,23,"run"],[167,37,163,26],[167,39,163,27],[167,45,163,31],[168,8,164,8],[168,12,164,12,"result"],[168,18,164,18],[168,21,164,21,"undefined"],[168,30,164,30],[169,8,165,8],[169,15,165,15],[170,10,166,12,"valueOrUndefined"],[170,26,166,28],[170,28,166,30,"valueOrUndefined"],[170,29,166,30],[170,34,166,34],[171,12,167,16],[171,16,167,20],[171,17,167,21,"result"],[171,23,167,27],[171,25,167,29],[172,14,168,20],[172,21,168,27,"undefined"],[172,30,168,36],[173,12,169,16],[174,12,170,16],[174,19,170,23,"result"],[174,25,170,29],[174,26,170,30],[174,27,170,31],[174,28,170,32],[175,10,171,12],[175,11,171,13],[176,10,172,12,"value"],[176,15,172,17],[176,17,172,19,"value"],[176,18,172,19],[176,23,172,23],[177,12,173,16],[177,16,173,16,"_result"],[177,23,173,16],[177,26,173,35,"result"],[177,32,173,41],[178,14,173,41,"_result2"],[178,22,173,41],[178,29,173,41,"_slicedToArray2"],[178,44,173,41],[178,45,173,41,"default"],[178,52,173,41],[178,54,173,41,"_result"],[178,61,173,41],[179,14,173,23,"err"],[179,17,173,26],[179,20,173,26,"_result2"],[179,28,173,26],[180,14,173,28,"ctx"],[180,17,173,31],[180,20,173,31,"_result2"],[180,28,173,31],[181,12,174,16],[181,16,174,20,"err"],[181,19,174,23],[181,21,174,25],[182,14,175,20],[182,20,175,26,"err"],[182,23,175,29],[183,12,176,16],[184,12,177,16],[184,19,177,23,"ctx"],[184,22,177,26],[185,10,178,12],[185,11,178,13],[186,10,179,12,"create"],[186,16,179,18],[187,12,179,18],[187,16,179,18,"_ref7"],[187,21,179,18],[187,28,179,18,"_asyncToGenerator2"],[187,46,179,18],[187,47,179,18,"default"],[187,54,179,18],[187,56,179,20],[187,67,179,27,"info"],[187,71,179,31],[187,73,179,34],[188,14,180,16],[188,18,180,20,"result"],[188,24,180,26],[188,26,180,28],[189,16,181,20],[189,22,181,26],[189,26,181,30,"Error"],[189,31,181,35],[189,32,181,36],[189,88,181,92],[189,89,181,93],[190,14,182,16],[191,14,183,16],[191,18,183,20],[192,16,184,20],[192,20,184,26,"ctx"],[192,23,184,29],[192,32,184,38,"opts"],[192,36,184,42],[192,37,184,43,"createContext"],[192,50,184,56],[192,51,184,57],[193,18,185,24,"info"],[194,16,186,20],[194,17,186,21],[194,18,186,22],[195,16,187,20,"result"],[195,22,187,26],[195,25,187,29],[195,26,188,24,"undefined"],[195,35,188,33],[195,37,189,24,"ctx"],[195,40,189,27],[195,41,190,21],[196,14,191,16],[196,15,191,17],[196,16,191,18],[196,23,191,25,"cause"],[196,28,191,30],[196,30,191,32],[197,16,192,20,"result"],[197,22,192,26],[197,25,192,29],[197,26,193,24],[197,30,193,24,"getTRPCErrorFromUnknown"],[197,64,193,47],[197,66,193,48,"cause"],[197,71,193,53],[197,72,193,54],[197,74,194,24,"undefined"],[197,83,194,33],[197,84,195,21],[198,14,196,16],[199,12,197,12],[199,13,197,13],[200,12,197,13],[200,28,179,12,"create"],[200,34,179,18,"create"],[200,35,179,18,"_x2"],[200,38,179,18],[201,14,179,18],[201,21,179,18,"_ref7"],[201,26,179,18],[201,27,179,18,"apply"],[201,32,179,18],[201,39,179,18,"arguments"],[201,48,179,18],[202,12,179,18],[203,10,179,18],[204,8,198,8],[204,9,198,9],[205,6,199,4],[205,7,199,5],[205,8,199,6],[206,6,200,4],[206,10,200,10,"methodMapper"],[206,22,200,22],[206,25,200,25,"allowMethodOverride"],[206,44,200,44],[206,47,200,47,"TYPE_ACCEPTED_METHOD_MAP_WITH_METHOD_OVERRIDE"],[206,92,200,92],[206,95,200,95,"TYPE_ACCEPTED_METHOD_MAP"],[206,119,200,119],[207,6,201,4],[208,0,202,0],[209,0,203,0],[210,6,203,6],[210,10,203,12,"isStreamCall"],[210,22,203,24],[210,25,203,27,"req"],[210,28,203,30],[210,29,203,31,"headers"],[210,36,203,38],[210,37,203,39,"get"],[210,40,203,42],[210,41,203,43],[210,54,203,56],[210,55,203,57],[210,60,203,62],[210,79,203,81],[211,6,204,4],[211,10,204,10,"experimentalSSE"],[211,25,204,25],[211,28,204,28,"config"],[211,34,204,34],[211,35,204,35,"sse"],[211,38,204,38],[211,40,204,40,"enabled"],[211,47,204,47],[211,51,204,51],[211,55,204,55],[212,6,205,4],[212,10,205,8],[213,8,206,8],[213,12,206,8,"_infoTuple"],[213,22,206,8],[213,29,206,8,"_slicedToArray2"],[213,44,206,8],[213,45,206,8,"default"],[213,52,206,8],[213,54,206,34,"infoTuple"],[213,63,206,43],[214,10,206,15,"infoError"],[214,19,206,24],[214,22,206,24,"_infoTuple"],[214,32,206,24],[215,10,206,26,"info"],[215,14,206,30],[215,17,206,30,"_infoTuple"],[215,27,206,30],[216,8,207,8],[216,12,207,12,"infoError"],[216,21,207,21],[216,23,207,23],[217,10,208,12],[217,16,208,18,"infoError"],[217,25,208,27],[218,8,209,8],[219,8,210,8],[219,12,210,12,"info"],[219,16,210,16],[219,17,210,17,"isBatchCall"],[219,28,210,28],[219,32,210,32],[219,33,210,33,"allowBatching"],[219,46,210,46],[219,48,210,48],[220,10,211,12],[220,16,211,18],[220,20,211,22,"TRPCError"],[220,40,211,31],[220,41,211,32],[221,12,212,16,"code"],[221,16,212,20],[221,18,212,22],[221,31,212,35],[222,12,213,16,"message"],[222,19,213,23],[222,21,213,25],[223,10,214,12],[223,11,214,13],[223,12,214,14],[224,8,215,8],[225,8,216,8],[226,8,216,46],[226,12,216,50,"isStreamCall"],[226,24,216,62],[226,28,216,66],[226,29,216,67,"info"],[226,33,216,71],[226,34,216,72,"isBatchCall"],[226,45,216,83],[226,47,216,85],[227,10,217,12],[227,16,217,18],[227,20,217,22,"TRPCError"],[227,40,217,31],[227,41,217,32],[228,12,218,16,"message"],[228,19,218,23],[228,21,218,25],[228,83,218,87],[229,12,219,16,"code"],[229,16,219,20],[229,18,219,22],[230,10,220,12],[230,11,220,13],[230,12,220,14],[231,8,221,8],[232,8,222,8],[232,14,222,14,"ctxManager"],[232,24,222,24],[232,25,222,25,"create"],[232,31,222,31],[232,32,222,32,"info"],[232,36,222,36],[232,37,222,37],[233,8,223,8],[233,12,223,14,"rpcCalls"],[233,20,223,22],[233,23,223,25,"info"],[233,27,223,29],[233,28,223,30,"calls"],[233,33,223,35],[233,34,223,36,"map"],[233,37,223,39],[234,10,223,39],[234,14,223,39,"_ref8"],[234,19,223,39],[234,26,223,39,"_asyncToGenerator2"],[234,44,223,39],[234,45,223,39,"default"],[234,52,223,39],[234,54,223,40],[234,65,223,47,"call"],[234,69,223,51],[234,71,223,54],[235,12,224,12],[235,16,224,18,"proc"],[235,20,224,22],[235,23,224,25,"call"],[235,27,224,29],[235,28,224,30,"procedure"],[235,37,224,39],[236,12,225,12],[236,16,225,16],[237,14,226,16],[237,18,226,20,"opts"],[237,22,226,24],[237,23,226,25,"error"],[237,28,226,30],[237,30,226,32],[238,16,227,20],[238,22,227,26,"opts"],[238,26,227,30],[238,27,227,31,"error"],[238,32,227,36],[239,14,228,16],[240,14,229,16],[240,18,229,20],[240,19,229,21,"proc"],[240,23,229,25],[240,25,229,27],[241,16,230,20],[241,22,230,26],[241,26,230,30,"TRPCError"],[241,46,230,39],[241,47,230,40],[242,18,231,24,"code"],[242,22,231,28],[242,24,231,30],[242,35,231,41],[243,18,232,24,"message"],[243,25,232,31],[243,27,232,33],[243,58,232,64,"call"],[243,62,232,68],[243,63,232,69,"path"],[243,67,232,73],[244,16,233,20],[244,17,233,21],[244,18,233,22],[245,14,234,16],[246,14,235,16],[246,18,235,20],[246,19,235,21,"methodMapper"],[246,31,235,33],[246,32,235,34,"proc"],[246,36,235,38],[246,37,235,39,"_def"],[246,41,235,43],[246,42,235,44,"type"],[246,46,235,48],[246,47,235,49],[246,48,235,50,"includes"],[246,56,235,58],[246,57,235,59,"req"],[246,60,235,62],[246,61,235,63,"method"],[246,67,235,69],[246,68,235,70],[246,70,235,72],[247,16,236,20],[247,22,236,26],[247,26,236,30,"TRPCError"],[247,46,236,39],[247,47,236,40],[248,18,237,24,"code"],[248,22,237,28],[248,24,237,30],[248,46,237,52],[249,18,238,24,"message"],[249,25,238,31],[249,27,238,33],[249,42,238,48,"req"],[249,45,238,51],[249,46,238,52,"method"],[249,52,238,58],[249,67,238,73,"proc"],[249,71,238,77],[249,72,238,78,"_def"],[249,76,238,82],[249,77,238,83,"type"],[249,81,238,87],[249,104,238,110,"call"],[249,108,238,114],[249,109,238,115,"path"],[249,113,238,119],[250,16,239,20],[250,17,239,21],[250,18,239,22],[251,14,240,16],[252,14,241,16],[252,18,241,20,"proc"],[252,22,241,24],[252,23,241,25,"_def"],[252,27,241,29],[252,28,241,30,"type"],[252,32,241,34],[252,37,241,39],[252,51,241,53],[252,53,241,55],[253,16,242,20],[253,53,242,58],[253,57,242,62,"info"],[253,61,242,66],[253,62,242,67,"isBatchCall"],[253,73,242,78],[253,75,242,80],[254,18,243,24],[254,24,243,30],[254,28,243,34,"TRPCError"],[254,48,243,43],[254,49,243,44],[255,20,244,28,"code"],[255,24,244,32],[255,26,244,34],[255,39,244,47],[256,20,245,28,"message"],[256,27,245,35],[256,29,245,37],[257,18,246,24],[257,19,246,25],[257,20,246,26],[258,16,247,20],[259,14,248,16],[260,14,249,16],[260,18,249,22,"data"],[260,22,249,26],[260,31,249,35,"proc"],[260,35,249,39],[260,36,249,40],[261,16,250,20,"path"],[261,20,250,24],[261,22,250,26,"call"],[261,26,250,30],[261,27,250,31,"path"],[261,31,250,35],[262,16,251,20,"getRawInput"],[262,27,251,31],[262,29,251,33,"call"],[262,33,251,37],[262,34,251,38,"getRawInput"],[262,45,251,49],[263,16,252,20,"ctx"],[263,19,252,23],[263,21,252,25,"ctxManager"],[263,31,252,35],[263,32,252,36,"value"],[263,37,252,41],[263,38,252,42],[263,39,252,43],[264,16,253,20,"type"],[264,20,253,24],[264,22,253,26,"proc"],[264,26,253,30],[264,27,253,31,"_def"],[264,31,253,35],[264,32,253,36,"type"],[264,36,253,40],[265,16,254,20,"signal"],[265,22,254,26],[265,24,254,28,"opts"],[265,28,254,32],[265,29,254,33,"req"],[265,32,254,36],[265,33,254,37,"signal"],[266,14,255,16],[266,15,255,17],[266,16,255,18],[267,14,256,16],[267,21,256,23],[267,22,257,20,"undefined"],[267,31,257,29],[267,33,258,20],[268,16,259,24,"data"],[269,14,260,20],[269,15,260,21],[269,16,261,17],[270,12,262,12],[270,13,262,13],[270,14,262,14],[270,21,262,21,"cause"],[270,26,262,26],[270,28,262,28],[271,14,263,16],[271,18,263,22,"error"],[271,23,263,27],[271,26,263,30],[271,30,263,30,"getTRPCErrorFromUnknown"],[271,64,263,53],[271,66,263,54,"cause"],[271,71,263,59],[271,72,263,60],[272,14,264,16],[272,18,264,22,"input"],[272,23,264,27],[272,26,264,30,"call"],[272,30,264,34],[272,31,264,35,"result"],[272,37,264,41],[272,38,264,42],[272,39,264,43],[273,14,265,16,"opts"],[273,18,265,20],[273,19,265,21,"onError"],[273,26,265,28],[273,29,265,31],[274,16,266,20,"error"],[274,21,266,25],[275,16,267,20,"path"],[275,20,267,24],[275,22,267,26,"call"],[275,26,267,30],[275,27,267,31,"path"],[275,31,267,35],[276,16,268,20,"input"],[276,21,268,25],[277,16,269,20,"ctx"],[277,19,269,23],[277,21,269,25,"ctxManager"],[277,31,269,35],[277,32,269,36,"valueOrUndefined"],[277,48,269,52],[277,49,269,53],[277,50,269,54],[278,16,270,20,"type"],[278,20,270,24],[278,22,270,26,"call"],[278,26,270,30],[278,27,270,31,"procedure"],[278,36,270,40],[278,38,270,42,"_def"],[278,42,270,46],[278,43,270,47,"type"],[278,47,270,51],[278,51,270,55],[278,60,270,64],[279,16,271,20,"req"],[279,19,271,23],[279,21,271,25,"opts"],[279,25,271,29],[279,26,271,30,"req"],[280,14,272,16],[280,15,272,17],[280,16,272,18],[281,14,273,16],[281,21,273,23],[281,22,274,20,"error"],[281,27,274,25],[281,29,275,20,"undefined"],[281,38,275,29],[281,39,276,17],[282,12,277,12],[283,10,278,8],[283,11,278,9],[284,10,278,9],[284,27,278,9,"_x3"],[284,30,278,9],[285,12,278,9],[285,19,278,9,"_ref8"],[285,24,278,9],[285,25,278,9,"apply"],[285,30,278,9],[285,37,278,9,"arguments"],[285,46,278,9],[286,10,278,9],[287,8,278,9],[287,12,278,10],[288,8,279,8],[289,8,280,8],[289,12,280,12],[289,13,280,13,"info"],[289,17,280,17],[289,18,280,18,"isBatchCall"],[289,29,280,29],[289,31,280,31],[290,10,281,12],[290,14,281,12,"_info$calls"],[290,25,281,12],[290,32,281,12,"_slicedToArray2"],[290,47,281,12],[290,48,281,12,"default"],[290,55,281,12],[290,57,281,27,"info"],[290,61,281,31],[290,62,281,32,"calls"],[290,67,281,37],[291,12,281,19,"call"],[291,16,281,23],[291,19,281,23,"_info$calls"],[291,30,281,23],[292,10,282,12],[292,14,282,12,"_yield$rpcCalls$"],[292,30,282,12],[292,39,282,42,"rpcCalls"],[292,47,282,50],[292,48,282,51],[292,49,282,52],[292,50,282,53],[293,12,282,53,"_yield$rpcCalls$2"],[293,29,282,53],[293,36,282,53,"_slicedToArray2"],[293,51,282,53],[293,52,282,53,"default"],[293,59,282,53],[293,61,282,53,"_yield$rpcCalls$"],[293,77,282,53],[294,12,282,19,"error"],[294,17,282,24],[294,20,282,24,"_yield$rpcCalls$2"],[294,37,282,24],[295,12,282,26,"result"],[295,18,282,32],[295,21,282,32,"_yield$rpcCalls$2"],[295,38,282,32],[296,10,283,12],[296,18,283,19,"info"],[296,22,283,23],[296,23,283,24,"type"],[296,27,283,28],[297,12,284,16],[297,17,284,21],[297,26,284,30],[298,12,285,16],[298,17,285,21],[298,27,285,31],[299,12,286,16],[299,17,286,21],[299,24,286,28],[300,14,287,20],[301,16,288,24],[302,16,289,24,"headers"],[302,23,289,31],[302,24,289,32,"set"],[302,27,289,35],[302,28,289,36],[302,42,289,50],[302,44,289,52],[302,62,289,70],[302,63,289,71],[303,16,290,24],[303,20,290,28,"isDataStream"],[303,32,290,40],[303,33,290,41,"result"],[303,39,290,47],[303,41,290,49,"data"],[303,45,290,53],[303,46,290,54],[303,48,290,56],[304,18,291,28],[304,24,291,34],[304,28,291,38,"TRPCError"],[304,48,291,47],[304,49,291,48],[305,20,292,32,"code"],[305,24,292,36],[305,26,292,38],[305,50,292,62],[306,20,293,32,"message"],[306,27,293,39],[306,29,293,41],[307,18,294,28],[307,19,294,29],[307,20,294,30],[308,16,295,24],[309,16,296,24],[309,20,296,30,"res"],[309,23,296,33],[309,26,296,36,"error"],[309,31,296,41],[309,34,296,44],[310,18,297,28,"error"],[310,23,297,33],[310,25,297,35],[310,29,297,35,"getErrorShape"],[310,57,297,48],[310,59,297,49],[311,20,298,32,"config"],[311,26,298,38],[312,20,299,32,"ctx"],[312,23,299,35],[312,25,299,37,"ctxManager"],[312,35,299,47],[312,36,299,48,"valueOrUndefined"],[312,52,299,64],[312,53,299,65],[312,54,299,66],[313,20,300,32,"error"],[313,25,300,37],[314,20,301,32,"input"],[314,25,301,37],[314,27,301,39,"call"],[314,31,301,43],[314,32,301,44,"result"],[314,38,301,50],[314,39,301,51],[314,40,301,52],[315,20,302,32,"path"],[315,24,302,36],[315,26,302,38,"call"],[315,30,302,42],[315,31,302,43,"path"],[315,35,302,47],[316,20,303,32,"type"],[316,24,303,36],[316,26,303,38,"info"],[316,30,303,42],[316,31,303,43,"type"],[317,18,304,28],[317,19,304,29],[318,16,305,24],[318,17,305,25],[318,20,305,28],[319,18,306,28,"result"],[319,24,306,34],[319,26,306,36],[320,20,307,32,"data"],[320,24,307,36],[320,26,307,38,"result"],[320,32,307,44],[320,33,307,45,"data"],[321,18,308,28],[322,16,309,24],[322,17,309,25],[323,16,310,24],[323,20,310,30,"headResponse"],[323,33,310,42],[323,36,310,45,"initResponse"],[323,48,310,57],[323,49,310,58],[324,18,311,28,"ctx"],[324,21,311,31],[324,23,311,33,"ctxManager"],[324,33,311,43],[324,34,311,44,"valueOrUndefined"],[324,50,311,60],[324,51,311,61],[324,52,311,62],[325,18,312,28,"info"],[325,22,312,32],[326,18,313,28,"responseMeta"],[326,30,313,40],[326,32,313,42,"opts"],[326,36,313,46],[326,37,313,47,"responseMeta"],[326,49,313,59],[327,18,314,28,"errors"],[327,24,314,34],[327,26,314,36,"error"],[327,31,314,41],[327,34,314,44],[327,35,315,32,"error"],[327,40,315,37],[327,41,316,29],[327,44,316,32],[327,46,316,34],[328,18,317,28,"headers"],[328,25,317,35],[329,18,318,28,"untransformedJSON"],[329,35,318,45],[329,37,318,47],[329,38,319,32,"res"],[329,41,319,35],[330,16,321,24],[330,17,321,25],[330,18,321,26],[331,16,322,24],[331,23,322,31],[331,27,322,35,"Response"],[331,35,322,43],[331,36,322,44,"JSON"],[331,40,322,48],[331,41,322,49,"stringify"],[331,50,322,58],[331,51,322,59],[331,55,322,59,"transformTRPCResponse"],[331,89,322,80],[331,91,322,81,"config"],[331,97,322,87],[331,99,322,89,"res"],[331,102,322,92],[331,103,322,93],[331,104,322,94],[331,106,322,96],[332,18,323,28,"status"],[332,24,323,34],[332,26,323,36,"headResponse"],[332,39,323,48],[332,40,323,49,"status"],[332,46,323,55],[333,18,324,28,"headers"],[334,16,325,24],[334,17,325,25],[334,18,325,26],[335,14,326,20],[336,12,327,16],[336,17,327,21],[336,31,327,35],[337,14,328,20],[338,16,329,24],[339,16,330,24],[339,20,330,30,"iterable"],[339,28,330,38],[339,31,330,41],[339,35,330,41,"run"],[339,45,330,44],[339,47,330,45],[339,53,330,49],[340,18,331,28],[340,22,331,32,"error"],[340,27,331,37],[340,29,331,39],[341,20,332,32],[341,27,332,39,"errorToAsyncIterable"],[341,47,332,59],[341,48,332,60,"error"],[341,53,332,65],[341,54,332,66],[342,18,333,28],[343,18,334,28],[343,22,334,32],[343,23,334,33,"experimentalSSE"],[343,38,334,48],[343,40,334,50],[344,20,335,32],[344,27,335,39,"errorToAsyncIterable"],[344,47,335,59],[344,48,335,60],[344,52,335,64,"TRPCError"],[344,72,335,73],[344,73,335,74],[345,22,336,36,"code"],[345,26,336,40],[345,28,336,42],[345,50,336,64],[346,22,337,36,"message"],[346,29,337,43],[346,31,337,45],[347,20,338,32],[347,21,338,33],[347,22,338,34],[347,23,338,35],[348,18,339,28],[349,18,340,28],[349,22,340,32],[349,23,340,33],[349,27,340,33,"isObservable"],[349,51,340,45],[349,53,340,46,"result"],[349,59,340,52],[349,60,340,53,"data"],[349,64,340,57],[349,65,340,58],[349,69,340,62],[349,70,340,63],[349,74,340,63,"isAsyncIterable"],[349,96,340,78],[349,98,340,79,"result"],[349,104,340,85],[349,105,340,86,"data"],[349,109,340,90],[349,110,340,91],[349,112,340,93],[350,20,341,32],[350,27,341,39,"errorToAsyncIterable"],[350,47,341,59],[350,48,341,60],[350,52,341,64,"TRPCError"],[350,72,341,73],[350,73,341,74],[351,22,342,36,"message"],[351,29,342,43],[351,31,342,45],[351,47,342,61,"call"],[351,51,342,65],[351,52,342,66,"path"],[351,56,342,70],[351,107,342,121],[352,22,343,36,"code"],[352,26,343,40],[352,28,343,42],[353,20,344,32],[353,21,344,33],[353,22,344,34],[353,23,344,35],[354,18,345,28],[355,18,346,28],[355,22,346,34,"dataAsIterable"],[355,36,346,48],[355,39,346,51],[355,43,346,51,"isObservable"],[355,67,346,63],[355,69,346,64,"result"],[355,75,346,70],[355,76,346,71,"data"],[355,80,346,75],[355,81,346,76],[355,84,346,79],[355,88,346,79,"observableToAsyncIterable"],[355,125,346,104],[355,127,346,105,"result"],[355,133,346,111],[355,134,346,112,"data"],[355,138,346,116],[355,140,346,118,"opts"],[355,144,346,122],[355,145,346,123,"req"],[355,148,346,126],[355,149,346,127,"signal"],[355,155,346,133],[355,156,346,134],[355,159,346,137,"result"],[355,165,346,143],[355,166,346,144,"data"],[355,170,346,148],[356,18,347,28],[356,25,347,35,"dataAsIterable"],[356,39,347,49],[357,16,348,24],[357,17,348,25],[357,18,348,26],[358,16,349,24],[358,20,349,30,"stream"],[358,26,349,36],[358,29,349,39],[358,33,349,39,"sseStreamProducer"],[358,55,349,56],[358,57,349,57],[359,18,350,28],[359,21,350,31,"config"],[359,27,350,37],[359,28,350,38,"sse"],[359,31,350,41],[360,18,351,28,"data"],[360,22,351,32],[360,24,351,34,"iterable"],[360,32,351,42],[361,18,352,28,"serialize"],[361,27,352,37],[361,29,352,40,"v"],[361,30,352,41],[361,34,352,44,"config"],[361,40,352,50],[361,41,352,51,"transformer"],[361,52,352,62],[361,53,352,63,"output"],[361,59,352,69],[361,60,352,70,"serialize"],[361,69,352,79],[361,70,352,80,"v"],[361,71,352,81],[361,72,352,82],[362,18,353,28,"formatError"],[362,29,353,39,"formatError"],[362,30,353,41,"errorOpts"],[362,39,353,50],[362,41,353,52],[363,20,354,32],[363,24,354,38,"error"],[363,29,354,43],[363,32,354,46],[363,36,354,46,"getTRPCErrorFromUnknown"],[363,70,354,69],[363,72,354,70,"errorOpts"],[363,81,354,79],[363,82,354,80,"error"],[363,87,354,85],[363,88,354,86],[364,20,355,32],[364,24,355,38,"input"],[364,29,355,43],[364,32,355,46,"call"],[364,36,355,50],[364,38,355,52,"result"],[364,44,355,58],[364,45,355,59],[364,46,355,60],[365,20,356,32],[365,24,356,38,"path"],[365,28,356,42],[365,31,356,45,"call"],[365,35,356,49],[365,37,356,51,"path"],[365,41,356,55],[366,20,357,32],[366,24,357,38,"type"],[366,28,357,42],[366,31,357,45,"call"],[366,35,357,49],[366,37,357,51,"procedure"],[366,46,357,60],[366,48,357,62,"_def"],[366,52,357,66],[366,53,357,67,"type"],[366,57,357,71],[366,61,357,75],[366,70,357,84],[367,20,358,32,"opts"],[367,24,358,36],[367,25,358,37,"onError"],[367,32,358,44],[367,35,358,47],[368,22,359,36,"error"],[368,27,359,41],[369,22,360,36,"path"],[369,26,360,40],[370,22,361,36,"input"],[370,27,361,41],[371,22,362,36,"ctx"],[371,25,362,39],[371,27,362,41,"ctxManager"],[371,37,362,51],[371,38,362,52,"valueOrUndefined"],[371,54,362,68],[371,55,362,69],[371,56,362,70],[372,22,363,36,"req"],[372,25,363,39],[372,27,363,41,"opts"],[372,31,363,45],[372,32,363,46,"req"],[372,35,363,49],[373,22,364,36,"type"],[374,20,365,32],[374,21,365,33],[374,22,365,34],[375,20,366,32],[375,24,366,38,"shape"],[375,29,366,43],[375,32,366,46],[375,36,366,46,"getErrorShape"],[375,64,366,59],[375,66,366,60],[376,22,367,36,"config"],[376,28,367,42],[377,22,368,36,"ctx"],[377,25,368,39],[377,27,368,41,"ctxManager"],[377,37,368,51],[377,38,368,52,"valueOrUndefined"],[377,54,368,68],[377,55,368,69],[377,56,368,70],[378,22,369,36,"error"],[378,27,369,41],[379,22,370,36,"input"],[379,27,370,41],[380,22,371,36,"path"],[380,26,371,40],[381,22,372,36,"type"],[382,20,373,32],[382,21,373,33],[382,22,373,34],[383,20,374,32],[383,27,374,39,"shape"],[383,32,374,44],[384,18,375,28],[385,16,376,24],[385,17,376,25],[385,18,376,26],[386,16,377,24],[386,25,377,24,"_ref9"],[386,30,377,24],[386,34,377,51,"Object"],[386,40,377,57],[386,41,377,58,"entries"],[386,48,377,65],[386,49,377,66,"sseHeaders"],[386,64,377,76],[386,65,377,77],[386,67,377,78],[387,18,377,78],[387,22,377,78,"_ref10"],[387,28,377,78],[387,35,377,78,"_slicedToArray2"],[387,50,377,78],[387,51,377,78,"default"],[387,58,377,78],[387,60,377,78,"_ref9"],[387,65,377,78],[388,18,377,78],[388,22,377,36,"key"],[388,25,377,39],[388,28,377,39,"_ref10"],[388,34,377,39],[389,18,377,39],[389,22,377,41,"value"],[389,27,377,46],[389,30,377,46,"_ref10"],[389,36,377,46],[390,18,378,28,"headers"],[390,25,378,35],[390,26,378,36,"set"],[390,29,378,39],[390,30,378,40,"key"],[390,33,378,43],[390,35,378,45,"value"],[390,40,378,50],[390,41,378,51],[391,16,379,24],[392,16,380,24],[392,20,380,30,"headResponse"],[392,34,380,42],[392,37,380,45,"initResponse"],[392,49,380,57],[392,50,380,58],[393,18,381,28,"ctx"],[393,21,381,31],[393,23,381,33,"ctxManager"],[393,33,381,43],[393,34,381,44,"valueOrUndefined"],[393,50,381,60],[393,51,381,61],[393,52,381,62],[394,18,382,28,"info"],[394,22,382,32],[395,18,383,28,"responseMeta"],[395,30,383,40],[395,32,383,42,"opts"],[395,36,383,46],[395,37,383,47,"responseMeta"],[395,49,383,59],[396,18,384,28,"errors"],[396,24,384,34],[396,26,384,36],[396,28,384,38],[397,18,385,28,"headers"],[397,25,385,35],[398,18,386,28,"untransformedJSON"],[398,35,386,45],[398,37,386,47],[399,16,387,24],[399,17,387,25],[399,18,387,26],[400,16,388,24],[400,23,388,31],[400,27,388,35,"Response"],[400,35,388,43],[400,36,388,44,"stream"],[400,42,388,50],[400,44,388,52],[401,18,389,28,"headers"],[401,25,389,35],[402,18,390,28,"status"],[402,24,390,34],[402,26,390,36,"headResponse"],[402,40,390,48],[402,41,390,49,"status"],[403,16,391,24],[403,17,391,25],[403,18,391,26],[404,14,392,20],[405,10,393,12],[406,8,394,8],[407,8,395,8],[408,8,396,8],[408,12,396,12,"info"],[408,16,396,16],[408,17,396,17,"accept"],[408,23,396,23],[408,28,396,28],[408,47,396,47],[408,49,396,49],[409,10,397,12],[410,10,398,12,"headers"],[410,17,398,19],[410,18,398,20,"set"],[410,21,398,23],[410,22,398,24],[410,36,398,38],[410,38,398,40],[410,56,398,58],[410,57,398,59],[411,10,399,12,"headers"],[411,17,399,19],[411,18,399,20,"set"],[411,21,399,23],[411,22,399,24],[411,41,399,43],[411,43,399,45],[411,52,399,54],[411,53,399,55],[412,10,400,12],[412,14,400,18,"headResponse"],[412,28,400,30],[412,31,400,33,"initResponse"],[412,43,400,45],[412,44,400,46],[413,12,401,16,"ctx"],[413,15,401,19],[413,17,401,21,"ctxManager"],[413,27,401,31],[413,28,401,32,"valueOrUndefined"],[413,44,401,48],[413,45,401,49],[413,46,401,50],[414,12,402,16,"info"],[414,16,402,20],[415,12,403,16,"responseMeta"],[415,24,403,28],[415,26,403,30,"opts"],[415,30,403,34],[415,31,403,35,"responseMeta"],[415,43,403,47],[416,12,404,16,"errors"],[416,18,404,22],[416,20,404,24],[416,22,404,26],[417,12,405,16,"headers"],[417,19,405,23],[418,12,406,16,"untransformedJSON"],[418,29,406,33],[418,31,406,35],[419,10,407,12],[419,11,407,13],[419,12,407,14],[420,10,408,12],[420,14,408,18,"stream"],[420,21,408,24],[420,24,408,27],[420,28,408,27,"jsonlStreamProducer"],[420,54,408,46],[420,56,408,47],[421,12,409,16],[421,15,409,19,"config"],[421,21,409,25],[421,22,409,26,"jsonl"],[421,27,409,31],[422,12,410,16],[423,0,411,0],[424,0,412,0],[425,0,413,0],[426,0,414,0],[427,0,415,0],[428,0,416,0],[429,0,417,0],[430,0,418,0],[431,0,419,0],[432,0,420,0],[433,0,421,0],[434,0,422,0],[435,12,422,12,"maxDepth"],[435,20,422,20],[435,22,422,22,"Infinity"],[435,30,422,30],[436,12,423,16,"data"],[436,16,423,20],[436,18,423,22,"rpcCalls"],[436,26,423,30],[436,27,423,31,"map"],[436,30,423,34],[437,14,423,34],[437,18,423,34,"_ref11"],[437,24,423,34],[437,31,423,34,"_asyncToGenerator2"],[437,49,423,34],[437,50,423,34,"default"],[437,57,423,34],[437,59,423,35],[437,70,423,42,"res"],[437,73,423,45],[437,75,423,48],[438,16,424,20],[438,20,424,20,"_yield$res"],[438,30,424,20],[438,39,424,50,"res"],[438,42,424,53],[439,18,424,53,"_yield$res2"],[439,29,424,53],[439,36,424,53,"_slicedToArray2"],[439,51,424,53],[439,52,424,53,"default"],[439,59,424,53],[439,61,424,53,"_yield$res"],[439,71,424,53],[440,18,424,27,"error"],[440,23,424,32],[440,26,424,32,"_yield$res2"],[440,37,424,32],[441,18,424,34,"result"],[441,24,424,40],[441,27,424,40,"_yield$res2"],[441,38,424,40],[442,16,425,20],[442,20,425,26,"call"],[442,24,425,30],[442,27,425,33,"info"],[442,31,425,37],[442,32,425,38,"calls"],[442,37,425,43],[442,38,425,44],[442,39,425,45],[442,40,425,46],[443,16,426,20],[443,20,426,24,"error"],[443,25,426,29],[443,27,426,31],[444,18,427,24],[444,25,427,31],[445,20,428,28,"error"],[445,25,428,33],[445,27,428,35],[445,31,428,35,"getErrorShape"],[445,59,428,48],[445,61,428,49],[446,22,429,32,"config"],[446,28,429,38],[447,22,430,32,"ctx"],[447,25,430,35],[447,27,430,37,"ctxManager"],[447,37,430,47],[447,38,430,48,"valueOrUndefined"],[447,54,430,64],[447,55,430,65],[447,56,430,66],[448,22,431,32,"error"],[448,27,431,37],[449,22,432,32,"input"],[449,27,432,37],[449,29,432,39,"call"],[449,33,432,43],[449,34,432,44,"result"],[449,40,432,50],[449,41,432,51],[449,42,432,52],[450,22,433,32,"path"],[450,26,433,36],[450,28,433,38,"call"],[450,32,433,42],[450,33,433,43,"path"],[450,37,433,47],[451,22,434,32,"type"],[451,26,434,36],[451,28,434,38,"call"],[451,32,434,42],[451,33,434,43,"procedure"],[451,42,434,52],[451,44,434,54,"_def"],[451,48,434,58],[451,49,434,59,"type"],[451,53,434,63],[451,57,434,67],[452,20,435,28],[452,21,435,29],[453,18,436,24],[453,19,436,25],[454,16,437,20],[455,16,438,20],[456,0,439,0],[457,0,440,0],[458,0,441,0],[459,16,441,14],[459,20,441,20,"iterable"],[459,28,441,28],[459,31,441,31],[459,35,441,31,"isObservable"],[459,59,441,43],[459,61,441,44,"result"],[459,67,441,50],[459,68,441,51,"data"],[459,72,441,55],[459,73,441,56],[459,76,441,59],[459,80,441,59,"observableToAsyncIterable"],[459,117,441,84],[459,119,441,85,"result"],[459,125,441,91],[459,126,441,92,"data"],[459,130,441,96],[459,132,441,98,"opts"],[459,136,441,102],[459,137,441,103,"req"],[459,140,441,106],[459,141,441,107,"signal"],[459,147,441,113],[459,148,441,114],[459,151,441,117,"Promise"],[459,158,441,124],[459,159,441,125,"resolve"],[459,166,441,132],[459,167,441,133,"result"],[459,173,441,139],[459,174,441,140,"data"],[459,178,441,144],[459,179,441,145],[460,16,442,20],[460,23,442,27],[461,18,443,24,"result"],[461,24,443,30],[461,26,443,32,"Promise"],[461,33,443,39],[461,34,443,40,"resolve"],[461,41,443,47],[461,42,443,48],[462,20,444,28,"data"],[462,24,444,32],[462,26,444,34,"iterable"],[463,18,445,24],[463,19,445,25],[464,16,446,20],[464,17,446,21],[465,14,447,16],[465,15,447,17],[466,14,447,17],[466,31,447,17,"_x4"],[466,34,447,17],[467,16,447,17],[467,23,447,17,"_ref11"],[467,29,447,17],[467,30,447,17,"apply"],[467,35,447,17],[467,42,447,17,"arguments"],[467,51,447,17],[468,14,447,17],[469,12,447,17],[469,16,447,18],[470,12,448,16,"serialize"],[470,21,448,25],[470,23,448,27,"config"],[470,29,448,33],[470,30,448,34,"transformer"],[470,41,448,45],[470,42,448,46,"output"],[470,48,448,52],[470,49,448,53,"serialize"],[470,58,448,62],[471,12,449,16,"onError"],[471,19,449,23],[471,21,449,26,"cause"],[471,26,449,31],[471,30,449,34],[472,14,450,20,"opts"],[472,18,450,24],[472,19,450,25,"onError"],[472,26,450,32],[472,29,450,35],[473,16,451,24,"error"],[473,21,451,29],[473,23,451,31],[473,27,451,31,"getTRPCErrorFromUnknown"],[473,61,451,54],[473,63,451,55,"cause"],[473,68,451,60],[473,69,451,61],[474,16,452,24,"path"],[474,20,452,28],[474,22,452,30,"undefined"],[474,31,452,39],[475,16,453,24,"input"],[475,21,453,29],[475,23,453,31,"undefined"],[475,32,453,40],[476,16,454,24,"ctx"],[476,19,454,27],[476,21,454,29,"ctxManager"],[476,31,454,39],[476,32,454,40,"valueOrUndefined"],[476,48,454,56],[476,49,454,57],[476,50,454,58],[477,16,455,24,"req"],[477,19,455,27],[477,21,455,29,"opts"],[477,25,455,33],[477,26,455,34,"req"],[477,29,455,37],[478,16,456,24,"type"],[478,20,456,28],[478,22,456,30,"info"],[478,26,456,34],[478,28,456,36,"type"],[478,32,456,40],[478,36,456,44],[479,14,457,20],[479,15,457,21],[479,16,457,22],[480,12,458,16],[480,13,458,17],[481,12,459,16,"formatError"],[481,23,459,27,"formatError"],[481,24,459,29,"errorOpts"],[481,33,459,38],[481,35,459,40],[482,14,460,20],[482,18,460,26,"call"],[482,22,460,30],[482,25,460,33,"info"],[482,29,460,37],[482,31,460,39,"calls"],[482,36,460,44],[482,37,460,45,"errorOpts"],[482,46,460,54],[482,47,460,55,"path"],[482,51,460,59],[482,52,460,60],[482,53,460,61],[482,54,460,62],[482,55,460,63],[483,14,461,20],[483,18,461,26,"error"],[483,23,461,31],[483,26,461,34],[483,30,461,34,"getTRPCErrorFromUnknown"],[483,64,461,57],[483,66,461,58,"errorOpts"],[483,75,461,67],[483,76,461,68,"error"],[483,81,461,73],[483,82,461,74],[484,14,462,20],[484,18,462,26,"input"],[484,23,462,31],[484,26,462,34,"call"],[484,30,462,38],[484,32,462,40,"result"],[484,38,462,46],[484,39,462,47],[484,40,462,48],[485,14,463,20],[485,18,463,26,"path"],[485,22,463,30],[485,25,463,33,"call"],[485,29,463,37],[485,31,463,39,"path"],[485,35,463,43],[486,14,464,20],[486,18,464,26,"type"],[486,22,464,30],[486,25,464,33,"call"],[486,29,464,37],[486,31,464,39,"procedure"],[486,40,464,48],[486,42,464,50,"_def"],[486,46,464,54],[486,47,464,55,"type"],[486,51,464,59],[486,55,464,63],[486,64,464,72],[487,14,465,20],[488,14,466,20],[488,18,466,26,"shape"],[488,23,466,31],[488,26,466,34],[488,30,466,34,"getErrorShape"],[488,58,466,47],[488,60,466,48],[489,16,467,24,"config"],[489,22,467,30],[490,16,468,24,"ctx"],[490,19,468,27],[490,21,468,29,"ctxManager"],[490,31,468,39],[490,32,468,40,"valueOrUndefined"],[490,48,468,56],[490,49,468,57],[490,50,468,58],[491,16,469,24,"error"],[491,21,469,29],[492,16,470,24,"input"],[492,21,470,29],[493,16,471,24,"path"],[493,20,471,28],[494,16,472,24,"type"],[495,14,473,20],[495,15,473,21],[495,16,473,22],[496,14,474,20],[496,21,474,27,"shape"],[496,26,474,32],[497,12,475,16],[498,10,476,12],[498,11,476,13],[498,12,476,14],[499,10,477,12],[499,17,477,19],[499,21,477,23,"Response"],[499,29,477,31],[499,30,477,32,"stream"],[499,37,477,38],[499,39,477,40],[500,12,478,16,"headers"],[500,19,478,23],[501,12,479,16,"status"],[501,18,479,22],[501,20,479,24,"headResponse"],[501,34,479,36],[501,35,479,37,"status"],[502,10,480,12],[502,11,480,13],[502,12,480,14],[503,8,481,8],[504,8,482,8],[505,8,483,8],[506,0,484,0],[507,0,485,0],[508,0,486,0],[509,0,487,0],[510,0,488,0],[511,8,488,8,"headers"],[511,15,488,15],[511,16,488,16,"set"],[511,19,488,19],[511,20,488,20],[511,34,488,34],[511,36,488,36],[511,54,488,54],[511,55,488,55],[512,8,489,8],[512,12,489,14,"results"],[512,19,489,21],[512,22,489,24],[512,29,489,31,"Promise"],[512,36,489,38],[512,37,489,39,"all"],[512,40,489,42],[512,41,489,43,"rpcCalls"],[512,49,489,51],[512,50,489,52],[512,52,489,54,"map"],[512,55,489,57],[512,56,489,59,"res"],[512,59,489,62],[512,63,489,65],[513,10,490,12],[513,14,490,12,"_res"],[513,18,490,12],[513,25,490,12,"_slicedToArray2"],[513,40,490,12],[513,41,490,12,"default"],[513,48,490,12],[513,50,490,36,"res"],[513,53,490,39],[514,12,490,19,"error"],[514,17,490,24],[514,20,490,24,"_res"],[514,24,490,24],[515,12,490,26,"result"],[515,18,490,32],[515,21,490,32,"_res"],[515,25,490,32],[516,10,491,12],[516,14,491,16,"error"],[516,19,491,21],[516,21,491,23],[517,12,492,16],[517,19,492,23,"res"],[517,22,492,26],[518,10,493,12],[519,10,494,12],[519,14,494,16,"isDataStream"],[519,26,494,28],[519,27,494,29,"result"],[519,33,494,35],[519,34,494,36,"data"],[519,38,494,40],[519,39,494,41],[519,41,494,43],[520,12,495,16],[520,19,495,23],[520,20,496,20],[520,24,496,24,"TRPCError"],[520,44,496,33],[520,45,496,34],[521,14,497,24,"code"],[521,18,497,28],[521,20,497,30],[521,44,497,54],[522,14,498,24,"message"],[522,21,498,31],[522,23,498,33],[523,12,499,20],[523,13,499,21],[523,14,499,22],[523,16,500,20,"undefined"],[523,25,500,29],[523,26,501,17],[524,10,502,12],[525,10,503,12],[525,17,503,19,"res"],[525,20,503,22],[526,8,504,8],[526,9,504,9],[526,10,504,10],[527,8,505,8],[527,12,505,14,"resultAsRPCResponse"],[527,31,505,33],[527,34,505,36,"results"],[527,41,505,43],[527,42,505,44,"map"],[527,45,505,47],[527,46,505,48],[527,47,505,48,"_ref12"],[527,53,505,48],[527,55,505,66,"index"],[527,60,505,71],[527,65,505,74],[528,10,505,74],[528,14,505,74,"_ref13"],[528,20,505,74],[528,27,505,74,"_slicedToArray2"],[528,42,505,74],[528,43,505,74,"default"],[528,50,505,74],[528,52,505,74,"_ref12"],[528,58,505,74],[529,12,505,50,"error"],[529,17,505,55],[529,20,505,55,"_ref13"],[529,26,505,55],[530,12,505,57,"result"],[530,18,505,63],[530,21,505,63,"_ref13"],[530,27,505,63],[531,10,506,12],[531,14,506,18,"call"],[531,18,506,22],[531,21,506,25,"info"],[531,25,506,29],[531,26,506,30,"calls"],[531,31,506,35],[531,32,506,36,"index"],[531,37,506,41],[531,38,506,42],[532,10,507,12],[532,14,507,16,"error"],[532,19,507,21],[532,21,507,23],[533,12,508,16],[533,19,508,23],[534,14,509,20,"error"],[534,19,509,25],[534,21,509,27],[534,25,509,27,"getErrorShape"],[534,53,509,40],[534,55,509,41],[535,16,510,24,"config"],[535,22,510,30],[536,16,511,24,"ctx"],[536,19,511,27],[536,21,511,29,"ctxManager"],[536,31,511,39],[536,32,511,40,"valueOrUndefined"],[536,48,511,56],[536,49,511,57],[536,50,511,58],[537,16,512,24,"error"],[537,21,512,29],[538,16,513,24,"input"],[538,21,513,29],[538,23,513,31,"call"],[538,27,513,35],[538,28,513,36,"result"],[538,34,513,42],[538,35,513,43],[538,36,513,44],[539,16,514,24,"path"],[539,20,514,28],[539,22,514,30,"call"],[539,26,514,34],[539,27,514,35,"path"],[539,31,514,39],[540,16,515,24,"type"],[540,20,515,28],[540,22,515,30,"call"],[540,26,515,34],[540,27,515,35,"procedure"],[540,36,515,44],[540,38,515,46,"_def"],[540,42,515,50],[540,43,515,51,"type"],[540,47,515,55],[540,51,515,59],[541,14,516,20],[541,15,516,21],[542,12,517,16],[542,13,517,17],[543,10,518,12],[544,10,519,12],[544,17,519,19],[545,12,520,16,"result"],[545,18,520,22],[545,20,520,24],[546,14,521,20,"data"],[546,18,521,24],[546,20,521,26,"result"],[546,26,521,32],[546,27,521,33,"data"],[547,12,522,16],[548,10,523,12],[548,11,523,13],[549,8,524,8],[549,9,524,9],[549,10,524,10],[550,8,525,8],[550,12,525,14,"errors"],[550,18,525,20],[550,21,525,23,"results"],[550,28,525,30],[550,29,525,31,"map"],[550,32,525,34],[550,33,525,35,"_ref14"],[550,39,525,35],[551,10,525,35],[551,14,525,35,"_ref15"],[551,20,525,35],[551,27,525,35,"_slicedToArray2"],[551,42,525,35],[551,43,525,35,"default"],[551,50,525,35],[551,52,525,35,"_ref14"],[551,58,525,35],[552,12,525,37,"error"],[552,17,525,42],[552,20,525,42,"_ref15"],[552,26,525,42],[553,10,525,42],[553,17,525,46,"error"],[553,22,525,51],[554,8,525,51],[554,10,525,52],[554,11,525,53,"filter"],[554,17,525,59],[554,18,525,60,"Boolean"],[554,25,525,67],[554,26,525,68],[555,8,526,8],[555,12,526,14,"headResponse"],[555,24,526,26],[555,27,526,29,"initResponse"],[555,39,526,41],[555,40,526,42],[556,10,527,12,"ctx"],[556,13,527,15],[556,15,527,17,"ctxManager"],[556,25,527,27],[556,26,527,28,"valueOrUndefined"],[556,42,527,44],[556,43,527,45],[556,44,527,46],[557,10,528,12,"info"],[557,14,528,16],[558,10,529,12,"responseMeta"],[558,22,529,24],[558,24,529,26,"opts"],[558,28,529,30],[558,29,529,31,"responseMeta"],[558,41,529,43],[559,10,530,12,"untransformedJSON"],[559,27,530,29],[559,29,530,31,"resultAsRPCResponse"],[559,48,530,50],[560,10,531,12,"errors"],[560,16,531,18],[561,10,532,12,"headers"],[562,8,533,8],[562,9,533,9],[562,10,533,10],[563,8,534,8],[563,15,534,15],[563,19,534,19,"Response"],[563,27,534,27],[563,28,534,28,"JSON"],[563,32,534,32],[563,33,534,33,"stringify"],[563,42,534,42],[563,43,534,43],[563,47,534,43,"transformTRPCResponse"],[563,81,534,64],[563,83,534,65,"config"],[563,89,534,71],[563,91,534,73,"resultAsRPCResponse"],[563,110,534,92],[563,111,534,93],[563,112,534,94],[563,114,534,96],[564,10,535,12,"status"],[564,16,535,18],[564,18,535,20,"headResponse"],[564,30,535,32],[564,31,535,33,"status"],[564,37,535,39],[565,10,536,12,"headers"],[566,8,537,8],[566,9,537,9],[566,10,537,10],[567,6,538,4],[567,7,538,5],[567,8,538,6],[567,15,538,13,"cause"],[567,20,538,18],[567,22,538,20],[568,8,539,8],[568,12,539,8,"_infoTuple2"],[568,23,539,8],[568,30,539,8,"_slicedToArray2"],[568,45,539,8],[568,46,539,8,"default"],[568,53,539,8],[568,55,539,35,"infoTuple"],[568,64,539,44],[569,10,539,15,"_infoError"],[569,20,539,25],[569,23,539,25,"_infoTuple2"],[569,34,539,25],[570,10,539,27,"info"],[570,15,539,31],[570,18,539,31,"_infoTuple2"],[570,29,539,31],[571,8,540,8],[571,12,540,14,"ctx"],[571,15,540,17],[571,18,540,20,"ctxManager"],[571,28,540,30],[571,29,540,31,"valueOrUndefined"],[571,45,540,47],[571,46,540,48],[571,47,540,49],[572,8,541,8],[573,8,542,8],[574,8,543,8],[575,8,544,8],[576,8,545,8],[577,8,546,8],[578,8,547,8],[579,8,548,8],[579,12,548,8,"_caughtErrorToData"],[579,30,548,8],[579,33,548,51,"caughtErrorToData"],[579,50,548,68],[579,51,548,69,"cause"],[579,56,548,74],[579,58,548,76],[580,12,549,12,"opts"],[580,16,549,16],[581,12,550,12,"ctx"],[581,15,550,15],[581,17,550,17,"ctxManager"],[581,27,550,27],[581,28,550,28,"valueOrUndefined"],[581,44,550,44],[581,45,550,45],[581,46,550,46],[582,12,551,12,"type"],[582,16,551,16],[582,18,551,18,"info"],[582,23,551,22],[582,25,551,24,"type"],[582,29,551,28],[582,33,551,32],[583,10,552,8],[583,11,552,9],[583,12,552,10],[584,10,548,16,"error"],[584,16,548,21],[584,19,548,21,"_caughtErrorToData"],[584,37,548,21],[584,38,548,16,"error"],[584,43,548,21],[585,10,548,23,"untransformedJSON"],[585,27,548,40],[585,30,548,40,"_caughtErrorToData"],[585,48,548,40],[585,49,548,23,"untransformedJSON"],[585,66,548,40],[586,10,548,42,"body"],[586,14,548,46],[586,17,548,46,"_caughtErrorToData"],[586,35,548,46],[586,36,548,42,"body"],[586,40,548,46],[587,8,553,8],[587,12,553,14,"headResponse"],[587,26,553,26],[587,29,553,29,"initResponse"],[587,41,553,41],[587,42,553,42],[588,10,554,12,"ctx"],[588,13,554,15],[589,10,555,12,"info"],[589,14,555,16],[589,16,555,12,"info"],[589,21,555,16],[590,10,556,12,"responseMeta"],[590,22,556,24],[590,24,556,26,"opts"],[590,28,556,30],[590,29,556,31,"responseMeta"],[590,41,556,43],[591,10,557,12,"untransformedJSON"],[591,27,557,29],[592,10,558,12,"errors"],[592,16,558,18],[592,18,558,20],[592,19,559,16,"error"],[592,25,559,21],[592,26,560,13],[593,10,561,12,"headers"],[594,8,562,8],[594,9,562,9],[594,10,562,10],[595,8,563,8],[595,15,563,15],[595,19,563,19,"Response"],[595,27,563,27],[595,28,563,28,"body"],[595,32,563,32],[595,34,563,34],[596,10,564,12,"status"],[596,16,564,18],[596,18,564,20,"headResponse"],[596,32,564,32],[596,33,564,33,"status"],[596,39,564,39],[597,10,565,12,"headers"],[598,8,566,8],[598,9,566,9],[598,10,566,10],[599,6,567,4],[600,4,568,0],[600,5,568,1],[601,4,568,1],[601,11,568,1,"_resolveResponse"],[601,27,568,1],[601,28,568,1,"apply"],[601,33,568,1],[601,40,568,1,"arguments"],[601,49,568,1],[602,2,568,1],[603,0,568,1],[603,3]],"functionMap":{"names":["<global>","errorToAsyncIterable","run$argument_0","initResponse","info.calls.map$argument_0","info.calls.find$argument_0","caughtErrorToData","isDataStream","resolveResponse","valueOrUndefined","value","create","sseStreamProducer$argument_0.serialize","sseStreamProducer$argument_0.formatError","rpcCalls.map$argument_0","jsonlStreamProducer$argument_0.onError","jsonlStreamProducer$argument_0.formatError","map$argument_0","results.map$argument_0"],"mappings":"AAA;ACU;eCC;KDE;CDC;AG0B;+BCU,iBD;+BEI,iCF;CH2B;AMC;CN4B;IOK;CPQ;AQC;gCNkB;KMmB;2BNC;8BOG;aPK;mBQC;aRM;oBSC;aTkB;KME;wCJwB;SIuD;6CNoD;yBMkB;uCII,2CJ;4BKC;6BLsB;mCMgD;iBNwB;yBOE;iBPS;gBQC;iBRgB;0DSc;STe;gDUC;SVmB;mCUC,gBV;CR2C"}},"type":"js/module"}]}