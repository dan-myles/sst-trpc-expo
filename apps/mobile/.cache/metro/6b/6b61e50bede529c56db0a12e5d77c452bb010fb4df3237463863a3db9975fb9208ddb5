{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createNotifyManager = createNotifyManager;\n  exports.notifyManager = void 0;\n  // src/notifyManager.ts\n  function createNotifyManager() {\n    var queue = [];\n    var transactions = 0;\n    var notifyFn = callback => {\n      callback();\n    };\n    var batchNotifyFn = callback => {\n      callback();\n    };\n    var scheduleFn = cb => setTimeout(cb, 0);\n    var schedule = callback => {\n      if (transactions) {\n        queue.push(callback);\n      } else {\n        scheduleFn(() => {\n          notifyFn(callback);\n        });\n      }\n    };\n    var flush = () => {\n      var originalQueue = queue;\n      queue = [];\n      if (originalQueue.length) {\n        scheduleFn(() => {\n          batchNotifyFn(() => {\n            originalQueue.forEach(callback => {\n              notifyFn(callback);\n            });\n          });\n        });\n      }\n    };\n    return {\n      batch: callback => {\n        var result;\n        transactions++;\n        try {\n          result = callback();\n        } finally {\n          transactions--;\n          if (!transactions) {\n            flush();\n          }\n        }\n        return result;\n      },\n      /**\n       * All calls to the wrapped function will be batched.\n       */\n      batchCalls: callback => {\n        return function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          schedule(() => {\n            callback(...args);\n          });\n        };\n      },\n      schedule,\n      /**\n       * Use this method to set a custom notify function.\n       * This can be used to for example wrap notifications with `React.act` while running tests.\n       */\n      setNotifyFunction: fn => {\n        notifyFn = fn;\n      },\n      /**\n       * Use this method to set a custom function to batch notifications together into a single tick.\n       * By default React Query will use the batch function provided by ReactDOM or React Native.\n       */\n      setBatchNotifyFunction: fn => {\n        batchNotifyFn = fn;\n      },\n      setScheduler: fn => {\n        scheduleFn = fn;\n      }\n    };\n  }\n  var notifyManager = exports.notifyManager = createNotifyManager();\n});","lineCount":88,"map":[[7,2,1,0],[8,2,2,0],[8,11,2,9,"createNotifyManager"],[8,30,2,28,"createNotifyManager"],[8,31,2,28],[8,33,2,31],[9,4,3,2],[9,8,3,6,"queue"],[9,13,3,11],[9,16,3,14],[9,18,3,16],[10,4,4,2],[10,8,4,6,"transactions"],[10,20,4,18],[10,23,4,21],[10,24,4,22],[11,4,5,2],[11,8,5,6,"notifyFn"],[11,16,5,14],[11,19,5,18,"callback"],[11,27,5,26],[11,31,5,31],[12,6,6,4,"callback"],[12,14,6,12],[12,15,6,13],[12,16,6,14],[13,4,7,2],[13,5,7,3],[14,4,8,2],[14,8,8,6,"batchNotifyFn"],[14,21,8,19],[14,24,8,23,"callback"],[14,32,8,31],[14,36,8,36],[15,6,9,4,"callback"],[15,14,9,12],[15,15,9,13],[15,16,9,14],[16,4,10,2],[16,5,10,3],[17,4,11,2],[17,8,11,6,"scheduleFn"],[17,18,11,16],[17,21,11,20,"cb"],[17,23,11,22],[17,27,11,27,"setTimeout"],[17,37,11,37],[17,38,11,38,"cb"],[17,40,11,40],[17,42,11,42],[17,43,11,43],[17,44,11,44],[18,4,12,2],[18,8,12,8,"schedule"],[18,16,12,16],[18,19,12,20,"callback"],[18,27,12,28],[18,31,12,33],[19,6,13,4],[19,10,13,8,"transactions"],[19,22,13,20],[19,24,13,22],[20,8,14,6,"queue"],[20,13,14,11],[20,14,14,12,"push"],[20,18,14,16],[20,19,14,17,"callback"],[20,27,14,25],[20,28,14,26],[21,6,15,4],[21,7,15,5],[21,13,15,11],[22,8,16,6,"scheduleFn"],[22,18,16,16],[22,19,16,17],[22,25,16,23],[23,10,17,8,"notifyFn"],[23,18,17,16],[23,19,17,17,"callback"],[23,27,17,25],[23,28,17,26],[24,8,18,6],[24,9,18,7],[24,10,18,8],[25,6,19,4],[26,4,20,2],[26,5,20,3],[27,4,21,2],[27,8,21,8,"flush"],[27,13,21,13],[27,16,21,16,"flush"],[27,17,21,16],[27,22,21,22],[28,6,22,4],[28,10,22,10,"originalQueue"],[28,23,22,23],[28,26,22,26,"queue"],[28,31,22,31],[29,6,23,4,"queue"],[29,11,23,9],[29,14,23,12],[29,16,23,14],[30,6,24,4],[30,10,24,8,"originalQueue"],[30,23,24,21],[30,24,24,22,"length"],[30,30,24,28],[30,32,24,30],[31,8,25,6,"scheduleFn"],[31,18,25,16],[31,19,25,17],[31,25,25,23],[32,10,26,8,"batchNotifyFn"],[32,23,26,21],[32,24,26,22],[32,30,26,28],[33,12,27,10,"originalQueue"],[33,25,27,23],[33,26,27,24,"forEach"],[33,33,27,31],[33,34,27,33,"callback"],[33,42,27,41],[33,46,27,46],[34,14,28,12,"notifyFn"],[34,22,28,20],[34,23,28,21,"callback"],[34,31,28,29],[34,32,28,30],[35,12,29,10],[35,13,29,11],[35,14,29,12],[36,10,30,8],[36,11,30,9],[36,12,30,10],[37,8,31,6],[37,9,31,7],[37,10,31,8],[38,6,32,4],[39,4,33,2],[39,5,33,3],[40,4,34,2],[40,11,34,9],[41,6,35,4,"batch"],[41,11,35,9],[41,13,35,12,"callback"],[41,21,35,20],[41,25,35,25],[42,8,36,6],[42,12,36,10,"result"],[42,18,36,16],[43,8,37,6,"transactions"],[43,20,37,18],[43,22,37,20],[44,8,38,6],[44,12,38,10],[45,10,39,8,"result"],[45,16,39,14],[45,19,39,17,"callback"],[45,27,39,25],[45,28,39,26],[45,29,39,27],[46,8,40,6],[46,9,40,7],[46,18,40,16],[47,10,41,8,"transactions"],[47,22,41,20],[47,24,41,22],[48,10,42,8],[48,14,42,12],[48,15,42,13,"transactions"],[48,27,42,25],[48,29,42,27],[49,12,43,10,"flush"],[49,17,43,15],[49,18,43,16],[49,19,43,17],[50,10,44,8],[51,8,45,6],[52,8,46,6],[52,15,46,13,"result"],[52,21,46,19],[53,6,47,4],[53,7,47,5],[54,6,48,4],[55,0,49,0],[56,0,50,0],[57,6,51,4,"batchCalls"],[57,16,51,14],[57,18,51,17,"callback"],[57,26,51,25],[57,30,51,30],[58,8,52,6],[58,15,52,13],[58,27,52,26],[59,10,52,26],[59,19,52,26,"_len"],[59,23,52,26],[59,26,52,26,"arguments"],[59,35,52,26],[59,36,52,26,"length"],[59,42,52,26],[59,44,52,17,"args"],[59,48,52,21],[59,55,52,21,"Array"],[59,60,52,21],[59,61,52,21,"_len"],[59,65,52,21],[59,68,52,21,"_key"],[59,72,52,21],[59,78,52,21,"_key"],[59,82,52,21],[59,85,52,21,"_len"],[59,89,52,21],[59,91,52,21,"_key"],[59,95,52,21],[60,12,52,17,"args"],[60,16,52,21],[60,17,52,21,"_key"],[60,21,52,21],[60,25,52,21,"arguments"],[60,34,52,21],[60,35,52,21,"_key"],[60,39,52,21],[61,10,52,21],[62,10,53,8,"schedule"],[62,18,53,16],[62,19,53,17],[62,25,53,23],[63,12,54,10,"callback"],[63,20,54,18],[63,21,54,19],[63,24,54,22,"args"],[63,28,54,26],[63,29,54,27],[64,10,55,8],[64,11,55,9],[64,12,55,10],[65,8,56,6],[65,9,56,7],[66,6,57,4],[66,7,57,5],[67,6,58,4,"schedule"],[67,14,58,12],[68,6,59,4],[69,0,60,0],[70,0,61,0],[71,0,62,0],[72,6,63,4,"setNotifyFunction"],[72,23,63,21],[72,25,63,24,"fn"],[72,27,63,26],[72,31,63,31],[73,8,64,6,"notifyFn"],[73,16,64,14],[73,19,64,17,"fn"],[73,21,64,19],[74,6,65,4],[74,7,65,5],[75,6,66,4],[76,0,67,0],[77,0,68,0],[78,0,69,0],[79,6,70,4,"setBatchNotifyFunction"],[79,28,70,26],[79,30,70,29,"fn"],[79,32,70,31],[79,36,70,36],[80,8,71,6,"batchNotifyFn"],[80,21,71,19],[80,24,71,22,"fn"],[80,26,71,24],[81,6,72,4],[81,7,72,5],[82,6,73,4,"setScheduler"],[82,18,73,16],[82,20,73,19,"fn"],[82,22,73,21],[82,26,73,26],[83,8,74,6,"scheduleFn"],[83,18,74,16],[83,21,74,19,"fn"],[83,23,74,21],[84,6,75,4],[85,4,76,2],[85,5,76,3],[86,2,77,0],[87,2,78,0],[87,6,78,4,"notifyManager"],[87,19,78,17],[87,22,78,17,"exports"],[87,29,78,17],[87,30,78,17,"notifyManager"],[87,43,78,17],[87,46,78,20,"createNotifyManager"],[87,65,78,39],[87,66,78,40],[87,67,78,41],[88,0,78,42],[88,3]],"functionMap":{"names":["<global>","createNotifyManager","notifyFn","batchNotifyFn","scheduleFn","schedule","scheduleFn$argument_0","flush","batchNotifyFn$argument_0","originalQueue.forEach$argument_0","batch","batchCalls","<anonymous>","schedule$argument_0","setNotifyFunction","setBatchNotifyFunction","setScheduler"],"mappings":"AAA;ACC;iBCG;GDE;sBEC;GFE;mBGC,yBH;mBIC;iBCI;ODE;GJE;gBMC;iBDI;sBEC;gCCC;WDE;SFC;OCC;GNE;WSE;KTY;gBUI;aCC;iBCC;SDE;ODC;KVC;uBaM;KbE;4BcK;KdE;kBeC;KfE;CDE"}},"type":"js/module"}]}