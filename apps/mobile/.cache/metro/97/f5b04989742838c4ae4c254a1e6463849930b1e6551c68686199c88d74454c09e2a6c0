{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":105,"column":0,"index":3847}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":105,"column":0,"index":3847}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":105,"column":0,"index":3847}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"@trpc/client","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":67,"index":67}}],"key":"F7lDHhOULB/+RRe/q4ibaBc/bJA="}},{"name":"@trpc/server","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":68},"end":{"line":2,"column":75,"index":143}}],"key":"+fWHTqxsLDe8Gq8WzfmboITJvG0="}},{"name":"./infiniteQueryOptions.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":144},"end":{"line":3,"column":70,"index":214}}],"key":"QvgoM3TQeQUs2VBbAf4TS6G8FCg="}},{"name":"./mutationOptions.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":0,"index":215},"end":{"line":4,"column":60,"index":275}}],"key":"VEuu1sWi3kNhUaWS39+HLyRVoVI="}},{"name":"./queryOptions.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":0,"index":276},"end":{"line":5,"column":54,"index":330}}],"key":"FngNWTUf6bAEBF10IdqNtdpezfU="}},{"name":"./subscriptionOptions.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":0,"index":331},"end":{"line":6,"column":68,"index":399}}],"key":"1gI9An9VS6q4at6C3nxummiOp8g="}},{"name":"./utils.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":7,"column":0,"index":400},"end":{"line":7,"column":89,"index":489}}],"key":"XZqiGndSzUFgS+0ABF5nOFWZJRU="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createTRPCOptionsProxy = createTRPCOptionsProxy;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _client = require(_dependencyMap[3], \"@trpc/client\");\n  var _server = require(_dependencyMap[4], \"@trpc/server\");\n  var _infiniteQueryOptions = require(_dependencyMap[5], \"./infiniteQueryOptions.mjs\");\n  var _mutationOptions = require(_dependencyMap[6], \"./mutationOptions.mjs\");\n  var _queryOptions = require(_dependencyMap[7], \"./queryOptions.mjs\");\n  var _subscriptionOptions = require(_dependencyMap[8], \"./subscriptionOptions.mjs\");\n  var _utils = require(_dependencyMap[9], \"./utils.mjs\");\n  function getQueryType(method) {\n    var map = {\n      queryOptions: 'query',\n      infiniteQueryOptions: 'infinite',\n      subscriptionOptions: 'any',\n      mutationOptions: 'any'\n    };\n    return map[method];\n  }\n  /**\n   * Create a typed proxy from your router types. Can also be used on the server.\n   *\n   * @see https://trpc.io/docs/client/tanstack-react-query/setup#3b-setup-without-react-context\n   * @see https://trpc.io/docs/client/tanstack-react-query/server-components#5-create-a-trpc-caller-for-server-components\n   */\n  function createTRPCOptionsProxy(opts) {\n    var callIt = type => {\n      return (path, input, trpcOpts) => {\n        if ('router' in opts) {\n          return Promise.resolve((0, _utils.unwrapLazyArg)(opts.ctx)).then(ctx => (0, _server.callTRPCProcedure)({\n            router: opts.router,\n            path: path,\n            getRawInput: function () {\n              var _ref = (0, _asyncToGenerator2.default)(function* () {\n                return input;\n              });\n              return function getRawInput() {\n                return _ref.apply(this, arguments);\n              };\n            }(),\n            ctx: ctx,\n            type: type,\n            signal: undefined\n          }));\n        }\n        var untypedClient = opts.client instanceof _client.TRPCUntypedClient ? opts.client : (0, _client.getUntypedClient)(opts.client);\n        return untypedClient[type](path, input, trpcOpts);\n      };\n    };\n    return (0, _server.createTRPCRecursiveProxy)(_ref2 => {\n      var args = _ref2.args,\n        _path = _ref2.path;\n      var path = [..._path];\n      var utilName = path.pop();\n      var _args = (0, _slicedToArray2.default)(args, 2),\n        arg1 = _args[0],\n        arg2 = _args[1];\n      function getQueryKey() {\n        var queryType = getQueryType(utilName);\n        return (0, _utils.getQueryKeyInternal)(path, arg1, queryType ?? 'any');\n      }\n      var contextMap = {\n        '~types': undefined,\n        mutationKey: () => {\n          return (0, _utils.getMutationKeyInternal)(path);\n        },\n        queryKey: () => {\n          return getQueryKey();\n        },\n        queryFilter: () => {\n          return {\n            ...arg2,\n            queryKey: getQueryKey()\n          };\n        },\n        infiniteQueryOptions: () => {\n          return (0, _infiniteQueryOptions.trpcInfiniteQueryOptions)({\n            opts: arg2,\n            path,\n            queryClient: opts.queryClient,\n            queryKey: getQueryKey(),\n            query: callIt('query')\n          });\n        },\n        queryOptions: () => {\n          return (0, _queryOptions.trpcQueryOptions)({\n            opts: arg2,\n            path,\n            queryClient: opts.queryClient,\n            queryKey: getQueryKey(),\n            query: callIt('query')\n          });\n        },\n        mutationOptions: () => {\n          return (0, _mutationOptions.trpcMutationOptions)({\n            opts: arg1,\n            path,\n            queryClient: opts.queryClient,\n            mutate: callIt('mutation'),\n            overrides: opts.overrides?.mutations\n          });\n        },\n        subscriptionOptions: () => {\n          return (0, _subscriptionOptions.trpcSubscriptionOptions)({\n            opts: arg2,\n            path,\n            queryKey: getQueryKey(),\n            subscribe: callIt('subscription')\n          });\n        }\n      };\n      return contextMap[utilName]();\n    });\n  }\n});","lineCount":120,"map":[[9,2,1,0],[9,6,1,0,"_client"],[9,13,1,0],[9,16,1,0,"require"],[9,23,1,0],[9,24,1,0,"_dependencyMap"],[9,38,1,0],[10,2,2,0],[10,6,2,0,"_server"],[10,13,2,0],[10,16,2,0,"require"],[10,23,2,0],[10,24,2,0,"_dependencyMap"],[10,38,2,0],[11,2,3,0],[11,6,3,0,"_infiniteQueryOptions"],[11,27,3,0],[11,30,3,0,"require"],[11,37,3,0],[11,38,3,0,"_dependencyMap"],[11,52,3,0],[12,2,4,0],[12,6,4,0,"_mutationOptions"],[12,22,4,0],[12,25,4,0,"require"],[12,32,4,0],[12,33,4,0,"_dependencyMap"],[12,47,4,0],[13,2,5,0],[13,6,5,0,"_queryOptions"],[13,19,5,0],[13,22,5,0,"require"],[13,29,5,0],[13,30,5,0,"_dependencyMap"],[13,44,5,0],[14,2,6,0],[14,6,6,0,"_subscriptionOptions"],[14,26,6,0],[14,29,6,0,"require"],[14,36,6,0],[14,37,6,0,"_dependencyMap"],[14,51,6,0],[15,2,7,0],[15,6,7,0,"_utils"],[15,12,7,0],[15,15,7,0,"require"],[15,22,7,0],[15,23,7,0,"_dependencyMap"],[15,37,7,0],[16,2,9,0],[16,11,9,9,"getQueryType"],[16,23,9,21,"getQueryType"],[16,24,9,22,"method"],[16,30,9,28],[16,32,9,30],[17,4,10,4],[17,8,10,10,"map"],[17,11,10,13],[17,14,10,16],[18,6,11,8,"queryOptions"],[18,18,11,20],[18,20,11,22],[18,27,11,29],[19,6,12,8,"infiniteQueryOptions"],[19,26,12,28],[19,28,12,30],[19,38,12,40],[20,6,13,8,"subscriptionOptions"],[20,25,13,27],[20,27,13,29],[20,32,13,34],[21,6,14,8,"mutationOptions"],[21,21,14,23],[21,23,14,25],[22,4,15,4],[22,5,15,5],[23,4,16,4],[23,11,16,11,"map"],[23,14,16,14],[23,15,16,15,"method"],[23,21,16,21],[23,22,16,22],[24,2,17,0],[25,2,18,0],[26,0,19,0],[27,0,20,0],[28,0,21,0],[29,0,22,0],[30,0,23,0],[31,2,23,4],[31,11,23,13,"createTRPCOptionsProxy"],[31,33,23,35,"createTRPCOptionsProxy"],[31,34,23,36,"opts"],[31,38,23,40],[31,40,23,42],[32,4,24,4],[32,8,24,10,"callIt"],[32,14,24,16],[32,17,24,20,"type"],[32,21,24,24],[32,25,24,27],[33,6,25,8],[33,13,25,15],[33,14,25,16,"path"],[33,18,25,20],[33,20,25,22,"input"],[33,25,25,27],[33,27,25,29,"trpcOpts"],[33,35,25,37],[33,40,25,40],[34,8,26,12],[34,12,26,16],[34,20,26,24],[34,24,26,28,"opts"],[34,28,26,32],[34,30,26,34],[35,10,27,16],[35,17,27,23,"Promise"],[35,24,27,30],[35,25,27,31,"resolve"],[35,32,27,38],[35,33,27,39],[35,37,27,39,"unwrapLazyArg"],[35,57,27,52],[35,59,27,53,"opts"],[35,63,27,57],[35,64,27,58,"ctx"],[35,67,27,61],[35,68,27,62],[35,69,27,63],[35,70,27,64,"then"],[35,74,27,68],[35,75,27,70,"ctx"],[35,78,27,73],[35,82,27,76],[35,86,27,76,"callTRPCProcedure"],[35,111,27,93],[35,113,27,94],[36,12,28,24,"router"],[36,18,28,30],[36,20,28,32,"opts"],[36,24,28,36],[36,25,28,37,"router"],[36,31,28,43],[37,12,29,24,"path"],[37,16,29,28],[37,18,29,30,"path"],[37,22,29,34],[38,12,30,24,"getRawInput"],[38,23,30,35],[39,14,30,35],[39,18,30,35,"_ref"],[39,22,30,35],[39,29,30,35,"_asyncToGenerator2"],[39,47,30,35],[39,48,30,35,"default"],[39,55,30,35],[39,57,30,37],[40,16,30,37],[40,23,30,47,"input"],[40,28,30,52],[41,14,30,52],[42,14,30,52],[42,30,30,24,"getRawInput"],[42,41,30,35,"getRawInput"],[42,42,30,35],[43,16,30,35],[43,23,30,35,"_ref"],[43,27,30,35],[43,28,30,35,"apply"],[43,33,30,35],[43,40,30,35,"arguments"],[43,49,30,35],[44,14,30,35],[45,12,30,35],[45,15,30,52],[46,12,31,24,"ctx"],[46,15,31,27],[46,17,31,29,"ctx"],[46,20,31,32],[47,12,32,24,"type"],[47,16,32,28],[47,18,32,30,"type"],[47,22,32,34],[48,12,33,24,"signal"],[48,18,33,30],[48,20,33,32,"undefined"],[49,10,34,20],[49,11,34,21],[49,12,34,22],[49,13,34,23],[50,8,35,12],[51,8,36,12],[51,12,36,18,"untypedClient"],[51,25,36,31],[51,28,36,34,"opts"],[51,32,36,38],[51,33,36,39,"client"],[51,39,36,45],[51,51,36,57,"TRPCUntypedClient"],[51,76,36,74],[51,79,36,77,"opts"],[51,83,36,81],[51,84,36,82,"client"],[51,90,36,88],[51,93,36,91],[51,97,36,91,"getUntypedClient"],[51,121,36,107],[51,123,36,108,"opts"],[51,127,36,112],[51,128,36,113,"client"],[51,134,36,119],[51,135,36,120],[52,8,37,12],[52,15,37,19,"untypedClient"],[52,28,37,32],[52,29,37,33,"type"],[52,33,37,37],[52,34,37,38],[52,35,37,39,"path"],[52,39,37,43],[52,41,37,45,"input"],[52,46,37,50],[52,48,37,52,"trpcOpts"],[52,56,37,60],[52,57,37,61],[53,6,38,8],[53,7,38,9],[54,4,39,4],[54,5,39,5],[55,4,40,4],[55,11,40,11],[55,15,40,11,"createTRPCRecursiveProxy"],[55,47,40,35],[55,49,40,36,"_ref2"],[55,54,40,36],[55,58,40,61],[56,6,40,61],[56,10,40,39,"args"],[56,14,40,43],[56,17,40,43,"_ref2"],[56,22,40,43],[56,23,40,39,"args"],[56,27,40,43],[57,8,40,51,"_path"],[57,13,40,56],[57,16,40,56,"_ref2"],[57,21,40,56],[57,22,40,45,"path"],[57,26,40,49],[58,6,41,8],[58,10,41,14,"path"],[58,14,41,18],[58,17,41,21],[58,18,42,12],[58,21,42,15,"_path"],[58,26,42,20],[58,27,43,9],[59,6,44,8],[59,10,44,14,"utilName"],[59,18,44,22],[59,21,44,25,"path"],[59,25,44,29],[59,26,44,30,"pop"],[59,29,44,33],[59,30,44,34],[59,31,44,35],[60,6,45,8],[60,10,45,8,"_args"],[60,15,45,8],[60,22,45,8,"_slicedToArray2"],[60,37,45,8],[60,38,45,8,"default"],[60,45,45,8],[60,47,45,29,"args"],[60,51,45,33],[61,8,45,15,"arg1"],[61,12,45,19],[61,15,45,19,"_args"],[61,20,45,19],[62,8,45,21,"arg2"],[62,12,45,25],[62,15,45,25,"_args"],[62,20,45,25],[63,6,46,8],[63,15,46,17,"getQueryKey"],[63,26,46,28,"getQueryKey"],[63,27,46,28],[63,29,46,31],[64,8,47,12],[64,12,47,18,"queryType"],[64,21,47,27],[64,24,47,30,"getQueryType"],[64,36,47,42],[64,37,47,43,"utilName"],[64,45,47,51],[64,46,47,52],[65,8,48,12],[65,15,48,19],[65,19,48,19,"getQueryKeyInternal"],[65,45,48,38],[65,47,48,39,"path"],[65,51,48,43],[65,53,48,45,"arg1"],[65,57,48,49],[65,59,48,51,"queryType"],[65,68,48,60],[65,72,48,64],[65,77,48,69],[65,78,48,70],[66,6,49,8],[67,6,50,8],[67,10,50,14,"contextMap"],[67,20,50,24],[67,23,50,27],[68,8,51,12],[68,16,51,20],[68,18,51,22,"undefined"],[68,27,51,31],[69,8,52,12,"mutationKey"],[69,19,52,23],[69,21,52,25,"mutationKey"],[69,22,52,25],[69,27,52,29],[70,10,53,16],[70,17,53,23],[70,21,53,23,"getMutationKeyInternal"],[70,50,53,45],[70,52,53,46,"path"],[70,56,53,50],[70,57,53,51],[71,8,54,12],[71,9,54,13],[72,8,55,12,"queryKey"],[72,16,55,20],[72,18,55,22,"queryKey"],[72,19,55,22],[72,24,55,26],[73,10,56,16],[73,17,56,23,"getQueryKey"],[73,28,56,34],[73,29,56,35],[73,30,56,36],[74,8,57,12],[74,9,57,13],[75,8,58,12,"queryFilter"],[75,19,58,23],[75,21,58,25,"queryFilter"],[75,22,58,25],[75,27,58,29],[76,10,59,16],[76,17,59,23],[77,12,60,20],[77,15,60,23,"arg2"],[77,19,60,27],[78,12,61,20,"queryKey"],[78,20,61,28],[78,22,61,30,"getQueryKey"],[78,33,61,41],[78,34,61,42],[79,10,62,16],[79,11,62,17],[80,8,63,12],[80,9,63,13],[81,8,64,12,"infiniteQueryOptions"],[81,28,64,32],[81,30,64,34,"infiniteQueryOptions"],[81,31,64,34],[81,36,64,38],[82,10,65,16],[82,17,65,23],[82,21,65,23,"trpcInfiniteQueryOptions"],[82,67,65,47],[82,69,65,48],[83,12,66,20,"opts"],[83,16,66,24],[83,18,66,26,"arg2"],[83,22,66,30],[84,12,67,20,"path"],[84,16,67,24],[85,12,68,20,"queryClient"],[85,23,68,31],[85,25,68,33,"opts"],[85,29,68,37],[85,30,68,38,"queryClient"],[85,41,68,49],[86,12,69,20,"queryKey"],[86,20,69,28],[86,22,69,30,"getQueryKey"],[86,33,69,41],[86,34,69,42],[86,35,69,43],[87,12,70,20,"query"],[87,17,70,25],[87,19,70,27,"callIt"],[87,25,70,33],[87,26,70,34],[87,33,70,41],[88,10,71,16],[88,11,71,17],[88,12,71,18],[89,8,72,12],[89,9,72,13],[90,8,73,12,"queryOptions"],[90,20,73,24],[90,22,73,26,"queryOptions"],[90,23,73,26],[90,28,73,30],[91,10,74,16],[91,17,74,23],[91,21,74,23,"trpcQueryOptions"],[91,51,74,39],[91,53,74,40],[92,12,75,20,"opts"],[92,16,75,24],[92,18,75,26,"arg2"],[92,22,75,30],[93,12,76,20,"path"],[93,16,76,24],[94,12,77,20,"queryClient"],[94,23,77,31],[94,25,77,33,"opts"],[94,29,77,37],[94,30,77,38,"queryClient"],[94,41,77,49],[95,12,78,20,"queryKey"],[95,20,78,28],[95,22,78,30,"getQueryKey"],[95,33,78,41],[95,34,78,42],[95,35,78,43],[96,12,79,20,"query"],[96,17,79,25],[96,19,79,27,"callIt"],[96,25,79,33],[96,26,79,34],[96,33,79,41],[97,10,80,16],[97,11,80,17],[97,12,80,18],[98,8,81,12],[98,9,81,13],[99,8,82,12,"mutationOptions"],[99,23,82,27],[99,25,82,29,"mutationOptions"],[99,26,82,29],[99,31,82,33],[100,10,83,16],[100,17,83,23],[100,21,83,23,"trpcMutationOptions"],[100,57,83,42],[100,59,83,43],[101,12,84,20,"opts"],[101,16,84,24],[101,18,84,26,"arg1"],[101,22,84,30],[102,12,85,20,"path"],[102,16,85,24],[103,12,86,20,"queryClient"],[103,23,86,31],[103,25,86,33,"opts"],[103,29,86,37],[103,30,86,38,"queryClient"],[103,41,86,49],[104,12,87,20,"mutate"],[104,18,87,26],[104,20,87,28,"callIt"],[104,26,87,34],[104,27,87,35],[104,37,87,45],[104,38,87,46],[105,12,88,20,"overrides"],[105,21,88,29],[105,23,88,31,"opts"],[105,27,88,35],[105,28,88,36,"overrides"],[105,37,88,45],[105,39,88,47,"mutations"],[106,10,89,16],[106,11,89,17],[106,12,89,18],[107,8,90,12],[107,9,90,13],[108,8,91,12,"subscriptionOptions"],[108,27,91,31],[108,29,91,33,"subscriptionOptions"],[108,30,91,33],[108,35,91,37],[109,10,92,16],[109,17,92,23],[109,21,92,23,"trpcSubscriptionOptions"],[109,65,92,46],[109,67,92,47],[110,12,93,20,"opts"],[110,16,93,24],[110,18,93,26,"arg2"],[110,22,93,30],[111,12,94,20,"path"],[111,16,94,24],[112,12,95,20,"queryKey"],[112,20,95,28],[112,22,95,30,"getQueryKey"],[112,33,95,41],[112,34,95,42],[112,35,95,43],[113,12,96,20,"subscribe"],[113,21,96,29],[113,23,96,31,"callIt"],[113,29,96,37],[113,30,96,38],[113,44,96,52],[114,10,97,16],[114,11,97,17],[114,12,97,18],[115,8,98,12],[116,6,99,8],[116,7,99,9],[117,6,100,8],[117,13,100,15,"contextMap"],[117,23,100,25],[117,24,100,26,"utilName"],[117,32,100,34],[117,33,100,35],[117,34,100,36],[117,35,100,37],[118,4,101,4],[118,5,101,5],[118,6,101,6],[119,2,102,0],[120,0,102,1],[120,3]],"functionMap":{"names":["<global>","getQueryType","createTRPCOptionsProxy","callIt","<anonymous>","Promise.resolve.then$argument_0","callTRPCProcedure$argument_0.getRawInput","createTRPCRecursiveProxy$argument_0","getQueryKey","contextMap.mutationKey","contextMap.queryKey","contextMap.queryFilter","contextMap.infiniteQueryOptions","contextMap.queryOptions","contextMap.mutationOptions","contextMap.subscriptionOptions"],"mappings":"AAA;ACQ;CDQ;IEM;mBCC;eCC;qECE;qCCG,eD;sBDI;SDI;KDC;oCKC;QCM;SDG;yBEG;aFE;sBGC;aHE;yBIC;aJK;kCKC;aLQ;0BMC;aNQ;6BOC;aPQ;iCQC;aRO;KLG;CFC"}},"type":"js/module"}]}