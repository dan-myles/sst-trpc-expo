{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":196,"column":0,"index":6034}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":196,"column":0,"index":6034}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"@babel/runtime/helpers/objectWithoutProperties","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":196,"column":0,"index":6034}}],"key":"l9ek7s8G7hY7pJY4P1vxwsk0NPM="}},{"name":"./error/TRPCError.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":75,"index":75}}],"key":"WdBNBZk8UDTZJ+aLaEfvYQAC7J4="}},{"name":"./middleware.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":76},"end":{"line":2,"column":99,"index":175}}],"key":"FLOZHEWcl71oBM9grBooH6Lq+bE="}},{"name":"./parser.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":176},"end":{"line":3,"column":42,"index":218}}],"key":"u4KUJV96RCiH+gCC1vhSxCM2vwA="}},{"name":"./utils.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":0,"index":219},"end":{"line":4,"column":52,"index":271}}],"key":"XZqiGndSzUFgS+0ABF5nOFWZJRU="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createBuilder = createBuilder;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/objectWithoutProperties\"));\n  var _TRPCError = require(_dependencyMap[3], \"./error/TRPCError.mjs\");\n  var _middleware = require(_dependencyMap[4], \"./middleware.mjs\");\n  var _parser = require(_dependencyMap[5], \"./parser.mjs\");\n  var _utils = require(_dependencyMap[6], \"./utils.mjs\");\n  var _excluded = [\"middlewares\", \"inputs\", \"meta\"];\n  function createNewBuilder(def1, def2) {\n    var _def2$middlewares = def2.middlewares,\n      middlewares = _def2$middlewares === void 0 ? [] : _def2$middlewares,\n      inputs = def2.inputs,\n      meta = def2.meta,\n      rest = (0, _objectWithoutProperties2.default)(def2, _excluded);\n    // TODO: maybe have a fn here to warn about calls\n    return createBuilder({\n      ...(0, _utils.mergeWithoutOverrides)(def1, rest),\n      inputs: [...def1.inputs, ...(inputs ?? [])],\n      middlewares: [...def1.middlewares, ...middlewares],\n      meta: def1.meta && meta ? {\n        ...def1.meta,\n        ...meta\n      } : meta ?? def1.meta\n    });\n  }\n  function createBuilder() {\n    var initDef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _def = {\n      procedure: true,\n      inputs: [],\n      middlewares: [],\n      ...initDef\n    };\n    var builder = {\n      _def,\n      input(input) {\n        var parser = (0, _parser.getParseFn)(input);\n        return createNewBuilder(_def, {\n          inputs: [input],\n          middlewares: [(0, _middleware.createInputMiddleware)(parser)]\n        });\n      },\n      output(output) {\n        var parser = (0, _parser.getParseFn)(output);\n        return createNewBuilder(_def, {\n          output,\n          middlewares: [(0, _middleware.createOutputMiddleware)(parser)]\n        });\n      },\n      meta(meta) {\n        return createNewBuilder(_def, {\n          meta\n        });\n      },\n      use(middlewareBuilderOrFn) {\n        // Distinguish between a middleware builder and a middleware function\n        var middlewares = '_middlewares' in middlewareBuilderOrFn ? middlewareBuilderOrFn._middlewares : [middlewareBuilderOrFn];\n        return createNewBuilder(_def, {\n          middlewares: middlewares\n        });\n      },\n      unstable_concat(builder) {\n        return createNewBuilder(_def, builder._def);\n      },\n      query(resolver) {\n        return createResolver({\n          ..._def,\n          type: 'query'\n        }, resolver);\n      },\n      mutation(resolver) {\n        return createResolver({\n          ..._def,\n          type: 'mutation'\n        }, resolver);\n      },\n      subscription(resolver) {\n        return createResolver({\n          ..._def,\n          type: 'subscription'\n        }, resolver);\n      },\n      experimental_caller(caller) {\n        return createNewBuilder(_def, {\n          caller\n        });\n      }\n    };\n    return builder;\n  }\n  function createResolver(_defIn, resolver) {\n    var finalBuilder = createNewBuilder(_defIn, {\n      resolver,\n      middlewares: [(/*#__PURE__*/function () {\n        var _resolveMiddleware = (0, _asyncToGenerator2.default)(function* (opts) {\n          var data = yield resolver(opts);\n          return {\n            marker: _middleware.middlewareMarker,\n            ok: true,\n            data,\n            ctx: opts.ctx\n          };\n        });\n        function resolveMiddleware(_x) {\n          return _resolveMiddleware.apply(this, arguments);\n        }\n        return resolveMiddleware;\n      }())]\n    });\n    var _def = {\n      ...finalBuilder._def,\n      type: _defIn.type,\n      experimental_caller: Boolean(finalBuilder._def.caller),\n      meta: finalBuilder._def.meta,\n      $types: null\n    };\n    var invoke = createProcedureCaller(finalBuilder._def);\n    var callerOverride = finalBuilder._def.caller;\n    if (!callerOverride) {\n      return invoke;\n    }\n    var callerWrapper = /*#__PURE__*/function () {\n      var _ref = (0, _asyncToGenerator2.default)(function* () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return yield callerOverride({\n          args,\n          invoke,\n          _def: _def\n        });\n      });\n      return function callerWrapper() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    callerWrapper._def = _def;\n    return callerWrapper;\n  }\n  var codeblock = `\nThis is a client-only function.\nIf you want to call this function on the server, see https://trpc.io/docs/v11/server/server-side-calls\n`.trim();\n  // run the middlewares recursively with the resolver as the last one\n  function callRecursive(_x2, _x3, _x4) {\n    return _callRecursive.apply(this, arguments);\n  }\n  function _callRecursive() {\n    _callRecursive = (0, _asyncToGenerator2.default)(function* (index, _def, opts) {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        var middleware = _def.middlewares[index];\n        var result = yield middleware({\n          ...opts,\n          meta: _def.meta,\n          input: opts.input,\n          next(_nextOpts) {\n            var nextOpts = _nextOpts;\n            return callRecursive(index + 1, _def, {\n              ...opts,\n              ctx: nextOpts?.ctx ? {\n                ...opts.ctx,\n                ...nextOpts.ctx\n              } : opts.ctx,\n              input: nextOpts && 'input' in nextOpts ? nextOpts.input : opts.input,\n              getRawInput: nextOpts?.getRawInput ?? opts.getRawInput\n            });\n          }\n        });\n        return result;\n      } catch (cause) {\n        return {\n          ok: false,\n          error: (0, _TRPCError.getTRPCErrorFromUnknown)(cause),\n          marker: _middleware.middlewareMarker\n        };\n      }\n    });\n    return _callRecursive.apply(this, arguments);\n  }\n  function createProcedureCaller(_def) {\n    function procedure(_x5) {\n      return _procedure.apply(this, arguments);\n    }\n    function _procedure() {\n      _procedure = (0, _asyncToGenerator2.default)(function* (opts) {\n        // is direct server-side call\n        if (!opts || !('getRawInput' in opts)) {\n          throw new Error(codeblock);\n        }\n        // there's always at least one \"next\" since we wrap this.resolver in a middleware\n        var result = yield callRecursive(0, _def, opts);\n        if (!result) {\n          throw new _TRPCError.TRPCError({\n            code: 'INTERNAL_SERVER_ERROR',\n            message: 'No result from middlewares - did you forget to `return next()`?'\n          });\n        }\n        if (!result.ok) {\n          // re-throw original error\n          throw result.error;\n        }\n        return result.data;\n      });\n      return _procedure.apply(this, arguments);\n    }\n    procedure._def = _def;\n    procedure.procedure = true;\n    // FIXME typecast shouldn't be needed - fixittt\n    return procedure;\n  }\n});","lineCount":217,"map":[[9,2,1,0],[9,6,1,0,"_TRPCError"],[9,16,1,0],[9,19,1,0,"require"],[9,26,1,0],[9,27,1,0,"_dependencyMap"],[9,41,1,0],[10,2,2,0],[10,6,2,0,"_middleware"],[10,17,2,0],[10,20,2,0,"require"],[10,27,2,0],[10,28,2,0,"_dependencyMap"],[10,42,2,0],[11,2,3,0],[11,6,3,0,"_parser"],[11,13,3,0],[11,16,3,0,"require"],[11,23,3,0],[11,24,3,0,"_dependencyMap"],[11,38,3,0],[12,2,4,0],[12,6,4,0,"_utils"],[12,12,4,0],[12,15,4,0,"require"],[12,22,4,0],[12,23,4,0,"_dependencyMap"],[12,37,4,0],[13,2,4,52],[13,6,4,52,"_excluded"],[13,15,4,52],[14,2,6,0],[14,11,6,9,"createNewBuilder"],[14,27,6,25,"createNewBuilder"],[14,28,6,26,"def1"],[14,32,6,30],[14,34,6,32,"def2"],[14,38,6,36],[14,40,6,38],[15,4,7,4],[15,8,7,4,"_def2$middlewares"],[15,25,7,4],[15,28,7,56,"def2"],[15,32,7,60],[15,33,7,12,"middlewares"],[15,44,7,23],[16,6,7,12,"middlewares"],[16,17,7,23],[16,20,7,23,"_def2$middlewares"],[16,37,7,23],[16,51,7,26],[16,53,7,28],[16,56,7,28,"_def2$middlewares"],[16,73,7,28],[17,6,7,30,"inputs"],[17,12,7,36],[17,15,7,56,"def2"],[17,19,7,60],[17,20,7,30,"inputs"],[17,26,7,36],[18,6,7,38,"meta"],[18,10,7,42],[18,13,7,56,"def2"],[18,17,7,60],[18,18,7,38,"meta"],[18,22,7,42],[19,6,7,47,"rest"],[19,10,7,51],[19,17,7,51,"_objectWithoutProperties2"],[19,42,7,51],[19,43,7,51,"default"],[19,50,7,51],[19,52,7,56,"def2"],[19,56,7,60],[19,58,7,60,"_excluded"],[19,67,7,60],[20,4,8,4],[21,4,9,4],[21,11,9,11,"createBuilder"],[21,24,9,24],[21,25,9,25],[22,6,10,8],[22,9,10,11],[22,13,10,11,"mergeWithoutOverrides"],[22,41,10,32],[22,43,10,33,"def1"],[22,47,10,37],[22,49,10,39,"rest"],[22,53,10,43],[22,54,10,44],[23,6,11,8,"inputs"],[23,12,11,14],[23,14,11,16],[23,15,12,12],[23,18,12,15,"def1"],[23,22,12,19],[23,23,12,20,"inputs"],[23,29,12,26],[23,31,13,12],[23,35,13,15,"inputs"],[23,41,13,21],[23,45,13,25],[23,47,13,27],[23,49,14,9],[24,6,15,8,"middlewares"],[24,17,15,19],[24,19,15,21],[24,20,16,12],[24,23,16,15,"def1"],[24,27,16,19],[24,28,16,20,"middlewares"],[24,39,16,31],[24,41,17,12],[24,44,17,15,"middlewares"],[24,55,17,26],[24,56,18,9],[25,6,19,8,"meta"],[25,10,19,12],[25,12,19,14,"def1"],[25,16,19,18],[25,17,19,19,"meta"],[25,21,19,23],[25,25,19,27,"meta"],[25,29,19,31],[25,32,19,34],[26,8,20,12],[26,11,20,15,"def1"],[26,15,20,19],[26,16,20,20,"meta"],[26,20,20,24],[27,8,21,12],[27,11,21,15,"meta"],[28,6,22,8],[28,7,22,9],[28,10,22,12,"meta"],[28,14,22,16],[28,18,22,20,"def1"],[28,22,22,24],[28,23,22,25,"meta"],[29,4,23,4],[29,5,23,5],[29,6,23,6],[30,2,24,0],[31,2,25,0],[31,11,25,9,"createBuilder"],[31,24,25,22,"createBuilder"],[31,25,25,22],[31,27,25,37],[32,4,25,37],[32,8,25,23,"initDef"],[32,15,25,30],[32,18,25,30,"arguments"],[32,27,25,30],[32,28,25,30,"length"],[32,34,25,30],[32,42,25,30,"arguments"],[32,51,25,30],[32,59,25,30,"undefined"],[32,68,25,30],[32,71,25,30,"arguments"],[32,80,25,30],[32,86,25,33],[32,87,25,34],[32,88,25,35],[33,4,26,4],[33,8,26,10,"_def"],[33,12,26,14],[33,15,26,17],[34,6,27,8,"procedure"],[34,15,27,17],[34,17,27,19],[34,21,27,23],[35,6,28,8,"inputs"],[35,12,28,14],[35,14,28,16],[35,16,28,18],[36,6,29,8,"middlewares"],[36,17,29,19],[36,19,29,21],[36,21,29,23],[37,6,30,8],[37,9,30,11,"initDef"],[38,4,31,4],[38,5,31,5],[39,4,32,4],[39,8,32,10,"builder"],[39,15,32,17],[39,18,32,20],[40,6,33,8,"_def"],[40,10,33,12],[41,6,34,8,"input"],[41,11,34,13,"input"],[41,12,34,15,"input"],[41,17,34,20],[41,19,34,22],[42,8,35,12],[42,12,35,18,"parser"],[42,18,35,24],[42,21,35,27],[42,25,35,27,"getParseFn"],[42,43,35,37],[42,45,35,38,"input"],[42,50,35,43],[42,51,35,44],[43,8,36,12],[43,15,36,19,"createNewBuilder"],[43,31,36,35],[43,32,36,36,"_def"],[43,36,36,40],[43,38,36,42],[44,10,37,16,"inputs"],[44,16,37,22],[44,18,37,24],[44,19,38,20,"input"],[44,24,38,25],[44,25,39,17],[45,10,40,16,"middlewares"],[45,21,40,27],[45,23,40,29],[45,24,41,20],[45,28,41,20,"createInputMiddleware"],[45,61,41,41],[45,63,41,42,"parser"],[45,69,41,48],[45,70,41,49],[46,8,43,12],[46,9,43,13],[46,10,43,14],[47,6,44,8],[47,7,44,9],[48,6,45,8,"output"],[48,12,45,14,"output"],[48,13,45,16,"output"],[48,19,45,22],[48,21,45,24],[49,8,46,12],[49,12,46,18,"parser"],[49,18,46,24],[49,21,46,27],[49,25,46,27,"getParseFn"],[49,43,46,37],[49,45,46,38,"output"],[49,51,46,44],[49,52,46,45],[50,8,47,12],[50,15,47,19,"createNewBuilder"],[50,31,47,35],[50,32,47,36,"_def"],[50,36,47,40],[50,38,47,42],[51,10,48,16,"output"],[51,16,48,22],[52,10,49,16,"middlewares"],[52,21,49,27],[52,23,49,29],[52,24,50,20],[52,28,50,20,"createOutputMiddleware"],[52,62,50,42],[52,64,50,43,"parser"],[52,70,50,49],[52,71,50,50],[53,8,52,12],[53,9,52,13],[53,10,52,14],[54,6,53,8],[54,7,53,9],[55,6,54,8,"meta"],[55,10,54,12,"meta"],[55,11,54,14,"meta"],[55,15,54,18],[55,17,54,20],[56,8,55,12],[56,15,55,19,"createNewBuilder"],[56,31,55,35],[56,32,55,36,"_def"],[56,36,55,40],[56,38,55,42],[57,10,56,16,"meta"],[58,8,57,12],[58,9,57,13],[58,10,57,14],[59,6,58,8],[59,7,58,9],[60,6,59,8,"use"],[60,9,59,11,"use"],[60,10,59,13,"middlewareBuilderOrFn"],[60,31,59,34],[60,33,59,36],[61,8,60,12],[62,8,61,12],[62,12,61,18,"middlewares"],[62,23,61,29],[62,26,61,32],[62,40,61,46],[62,44,61,50,"middlewareBuilderOrFn"],[62,65,61,71],[62,68,61,74,"middlewareBuilderOrFn"],[62,89,61,95],[62,90,61,96,"_middlewares"],[62,102,61,108],[62,105,61,111],[62,106,62,16,"middlewareBuilderOrFn"],[62,127,62,37],[62,128,63,13],[63,8,64,12],[63,15,64,19,"createNewBuilder"],[63,31,64,35],[63,32,64,36,"_def"],[63,36,64,40],[63,38,64,42],[64,10,65,16,"middlewares"],[64,21,65,27],[64,23,65,29,"middlewares"],[65,8,66,12],[65,9,66,13],[65,10,66,14],[66,6,67,8],[66,7,67,9],[67,6,68,8,"unstable_concat"],[67,21,68,23,"unstable_concat"],[67,22,68,25,"builder"],[67,29,68,32],[67,31,68,34],[68,8,69,12],[68,15,69,19,"createNewBuilder"],[68,31,69,35],[68,32,69,36,"_def"],[68,36,69,40],[68,38,69,42,"builder"],[68,45,69,49],[68,46,69,50,"_def"],[68,50,69,54],[68,51,69,55],[69,6,70,8],[69,7,70,9],[70,6,71,8,"query"],[70,11,71,13,"query"],[70,12,71,15,"resolver"],[70,20,71,23],[70,22,71,25],[71,8,72,12],[71,15,72,19,"createResolver"],[71,29,72,33],[71,30,72,34],[72,10,73,16],[72,13,73,19,"_def"],[72,17,73,23],[73,10,74,16,"type"],[73,14,74,20],[73,16,74,22],[74,8,75,12],[74,9,75,13],[74,11,75,15,"resolver"],[74,19,75,23],[74,20,75,24],[75,6,76,8],[75,7,76,9],[76,6,77,8,"mutation"],[76,14,77,16,"mutation"],[76,15,77,18,"resolver"],[76,23,77,26],[76,25,77,28],[77,8,78,12],[77,15,78,19,"createResolver"],[77,29,78,33],[77,30,78,34],[78,10,79,16],[78,13,79,19,"_def"],[78,17,79,23],[79,10,80,16,"type"],[79,14,80,20],[79,16,80,22],[80,8,81,12],[80,9,81,13],[80,11,81,15,"resolver"],[80,19,81,23],[80,20,81,24],[81,6,82,8],[81,7,82,9],[82,6,83,8,"subscription"],[82,18,83,20,"subscription"],[82,19,83,22,"resolver"],[82,27,83,30],[82,29,83,32],[83,8,84,12],[83,15,84,19,"createResolver"],[83,29,84,33],[83,30,84,34],[84,10,85,16],[84,13,85,19,"_def"],[84,17,85,23],[85,10,86,16,"type"],[85,14,86,20],[85,16,86,22],[86,8,87,12],[86,9,87,13],[86,11,87,15,"resolver"],[86,19,87,23],[86,20,87,24],[87,6,88,8],[87,7,88,9],[88,6,89,8,"experimental_caller"],[88,25,89,27,"experimental_caller"],[88,26,89,29,"caller"],[88,32,89,35],[88,34,89,37],[89,8,90,12],[89,15,90,19,"createNewBuilder"],[89,31,90,35],[89,32,90,36,"_def"],[89,36,90,40],[89,38,90,42],[90,10,91,16,"caller"],[91,8,92,12],[91,9,92,13],[91,10,92,14],[92,6,93,8],[93,4,94,4],[93,5,94,5],[94,4,95,4],[94,11,95,11,"builder"],[94,18,95,18],[95,2,96,0],[96,2,97,0],[96,11,97,9,"createResolver"],[96,25,97,23,"createResolver"],[96,26,97,24,"_defIn"],[96,32,97,30],[96,34,97,32,"resolver"],[96,42,97,40],[96,44,97,42],[97,4,98,4],[97,8,98,10,"finalBuilder"],[97,20,98,22],[97,23,98,25,"createNewBuilder"],[97,39,98,41],[97,40,98,42,"_defIn"],[97,46,98,48],[97,48,98,50],[98,6,99,8,"resolver"],[98,14,99,16],[99,6,100,8,"middlewares"],[99,17,100,19],[99,19,100,21],[100,8,100,21],[100,12,100,21,"_resolveMiddleware"],[100,30,100,21],[100,37,100,21,"_asyncToGenerator2"],[100,55,100,21],[100,56,100,21,"default"],[100,63,100,21],[100,65,101,12],[100,76,101,45,"opts"],[100,80,101,49],[100,82,101,51],[101,10,102,16],[101,14,102,22,"data"],[101,18,102,26],[101,27,102,35,"resolver"],[101,35,102,43],[101,36,102,44,"opts"],[101,40,102,48],[101,41,102,49],[102,10,103,16],[102,17,103,23],[103,12,104,20,"marker"],[103,18,104,26],[103,20,104,28,"middlewareMarker"],[103,48,104,44],[104,12,105,20,"ok"],[104,14,105,22],[104,16,105,24],[104,20,105,28],[105,12,106,20,"data"],[105,16,106,24],[106,12,107,20,"ctx"],[106,15,107,23],[106,17,107,25,"opts"],[106,21,107,29],[106,22,107,30,"ctx"],[107,10,108,16],[107,11,108,17],[108,8,109,12],[108,9,109,13],[109,8,109,13],[109,17,101,27,"resolveMiddleware"],[109,34,101,44,"resolveMiddleware"],[109,35,101,44,"_x"],[109,37,101,44],[110,10,101,44],[110,17,101,44,"_resolveMiddleware"],[110,35,101,44],[110,36,101,44,"apply"],[110,41,101,44],[110,48,101,44,"arguments"],[110,57,101,44],[111,8,101,44],[112,8,101,44],[112,15,101,27,"resolveMiddleware"],[112,32,101,44],[113,6,101,44],[114,4,111,4],[114,5,111,5],[114,6,111,6],[115,4,112,4],[115,8,112,10,"_def"],[115,12,112,14],[115,15,112,17],[116,6,113,8],[116,9,113,11,"finalBuilder"],[116,21,113,23],[116,22,113,24,"_def"],[116,26,113,28],[117,6,114,8,"type"],[117,10,114,12],[117,12,114,14,"_defIn"],[117,18,114,20],[117,19,114,21,"type"],[117,23,114,25],[118,6,115,8,"experimental_caller"],[118,25,115,27],[118,27,115,29,"Boolean"],[118,34,115,36],[118,35,115,37,"finalBuilder"],[118,47,115,49],[118,48,115,50,"_def"],[118,52,115,54],[118,53,115,55,"caller"],[118,59,115,61],[118,60,115,62],[119,6,116,8,"meta"],[119,10,116,12],[119,12,116,14,"finalBuilder"],[119,24,116,26],[119,25,116,27,"_def"],[119,29,116,31],[119,30,116,32,"meta"],[119,34,116,36],[120,6,117,8,"$types"],[120,12,117,14],[120,14,117,16],[121,4,118,4],[121,5,118,5],[122,4,119,4],[122,8,119,10,"invoke"],[122,14,119,16],[122,17,119,19,"createProcedureCaller"],[122,38,119,40],[122,39,119,41,"finalBuilder"],[122,51,119,53],[122,52,119,54,"_def"],[122,56,119,58],[122,57,119,59],[123,4,120,4],[123,8,120,10,"callerOverride"],[123,22,120,24],[123,25,120,27,"finalBuilder"],[123,37,120,39],[123,38,120,40,"_def"],[123,42,120,44],[123,43,120,45,"caller"],[123,49,120,51],[124,4,121,4],[124,8,121,8],[124,9,121,9,"callerOverride"],[124,23,121,23],[124,25,121,25],[125,6,122,8],[125,13,122,15,"invoke"],[125,19,122,21],[126,4,123,4],[127,4,124,4],[127,8,124,10,"callerWrapper"],[127,21,124,23],[128,6,124,23],[128,10,124,23,"_ref"],[128,14,124,23],[128,21,124,23,"_asyncToGenerator2"],[128,39,124,23],[128,40,124,23,"default"],[128,47,124,23],[128,49,124,26],[128,62,124,43],[129,8,124,43],[129,17,124,43,"_len"],[129,21,124,43],[129,24,124,43,"arguments"],[129,33,124,43],[129,34,124,43,"length"],[129,40,124,43],[129,42,124,36,"args"],[129,46,124,40],[129,53,124,40,"Array"],[129,58,124,40],[129,59,124,40,"_len"],[129,63,124,40],[129,66,124,40,"_key"],[129,70,124,40],[129,76,124,40,"_key"],[129,80,124,40],[129,83,124,40,"_len"],[129,87,124,40],[129,89,124,40,"_key"],[129,93,124,40],[130,10,124,36,"args"],[130,14,124,40],[130,15,124,40,"_key"],[130,19,124,40],[130,23,124,40,"arguments"],[130,32,124,40],[130,33,124,40,"_key"],[130,37,124,40],[131,8,124,40],[132,8,125,8],[132,21,125,21,"callerOverride"],[132,35,125,35],[132,36,125,36],[133,10,126,12,"args"],[133,14,126,16],[134,10,127,12,"invoke"],[134,16,127,18],[135,10,128,12,"_def"],[135,14,128,16],[135,16,128,18,"_def"],[136,8,129,8],[136,9,129,9],[136,10,129,10],[137,6,130,4],[137,7,130,5],[138,6,130,5],[138,22,124,10,"callerWrapper"],[138,35,124,23,"callerWrapper"],[138,36,124,23],[139,8,124,23],[139,15,124,23,"_ref"],[139,19,124,23],[139,20,124,23,"apply"],[139,25,124,23],[139,32,124,23,"arguments"],[139,41,124,23],[140,6,124,23],[141,4,124,23],[141,7,130,5],[142,4,131,4,"callerWrapper"],[142,17,131,17],[142,18,131,18,"_def"],[142,22,131,22],[142,25,131,25,"_def"],[142,29,131,29],[143,4,132,4],[143,11,132,11,"callerWrapper"],[143,24,132,24],[144,2,133,0],[145,2,134,0],[145,6,134,6,"codeblock"],[145,15,134,15],[145,18,134,18],[146,0,135,0],[147,0,136,0],[148,0,137,0],[148,1,137,1],[148,2,137,2,"trim"],[148,6,137,6],[148,7,137,7],[148,8,137,8],[149,2,138,0],[150,2,138,0],[150,11,139,15,"callRecursive"],[150,24,139,28,"callRecursive"],[150,25,139,28,"_x2"],[150,28,139,28],[150,30,139,28,"_x3"],[150,33,139,28],[150,35,139,28,"_x4"],[150,38,139,28],[151,4,139,28],[151,11,139,28,"_callRecursive"],[151,25,139,28],[151,26,139,28,"apply"],[151,31,139,28],[151,38,139,28,"arguments"],[151,47,139,28],[152,2,139,28],[153,2,139,28],[153,11,139,28,"_callRecursive"],[153,26,139,28],[154,4,139,28,"_callRecursive"],[154,18,139,28],[154,25,139,28,"_asyncToGenerator2"],[154,43,139,28],[154,44,139,28,"default"],[154,51,139,28],[154,53,139,0],[154,64,139,29,"index"],[154,69,139,34],[154,71,139,36,"_def"],[154,75,139,40],[154,77,139,42,"opts"],[154,81,139,46],[154,83,139,48],[155,6,140,4],[155,10,140,8],[156,8,141,8],[157,8,142,8],[157,12,142,14,"middleware"],[157,22,142,24],[157,25,142,27,"_def"],[157,29,142,31],[157,30,142,32,"middlewares"],[157,41,142,43],[157,42,142,44,"index"],[157,47,142,49],[157,48,142,50],[158,8,143,8],[158,12,143,14,"result"],[158,18,143,20],[158,27,143,29,"middleware"],[158,37,143,39],[158,38,143,40],[159,10,144,12],[159,13,144,15,"opts"],[159,17,144,19],[160,10,145,12,"meta"],[160,14,145,16],[160,16,145,18,"_def"],[160,20,145,22],[160,21,145,23,"meta"],[160,25,145,27],[161,10,146,12,"input"],[161,15,146,17],[161,17,146,19,"opts"],[161,21,146,23],[161,22,146,24,"input"],[161,27,146,29],[162,10,147,12,"next"],[162,14,147,16,"next"],[162,15,147,18,"_nextOpts"],[162,24,147,27],[162,26,147,29],[163,12,148,16],[163,16,148,22,"nextOpts"],[163,24,148,30],[163,27,148,33,"_nextOpts"],[163,36,148,42],[164,12,149,16],[164,19,149,23,"callRecursive"],[164,32,149,36],[164,33,149,37,"index"],[164,38,149,42],[164,41,149,45],[164,42,149,46],[164,44,149,48,"_def"],[164,48,149,52],[164,50,149,54],[165,14,150,20],[165,17,150,23,"opts"],[165,21,150,27],[166,14,151,20,"ctx"],[166,17,151,23],[166,19,151,25,"nextOpts"],[166,27,151,33],[166,29,151,35,"ctx"],[166,32,151,38],[166,35,151,41],[167,16,152,24],[167,19,152,27,"opts"],[167,23,152,31],[167,24,152,32,"ctx"],[167,27,152,35],[168,16,153,24],[168,19,153,27,"nextOpts"],[168,27,153,35],[168,28,153,36,"ctx"],[169,14,154,20],[169,15,154,21],[169,18,154,24,"opts"],[169,22,154,28],[169,23,154,29,"ctx"],[169,26,154,32],[170,14,155,20,"input"],[170,19,155,25],[170,21,155,27,"nextOpts"],[170,29,155,35],[170,33,155,39],[170,40,155,46],[170,44,155,50,"nextOpts"],[170,52,155,58],[170,55,155,61,"nextOpts"],[170,63,155,69],[170,64,155,70,"input"],[170,69,155,75],[170,72,155,78,"opts"],[170,76,155,82],[170,77,155,83,"input"],[170,82,155,88],[171,14,156,20,"getRawInput"],[171,25,156,31],[171,27,156,33,"nextOpts"],[171,35,156,41],[171,37,156,43,"getRawInput"],[171,48,156,54],[171,52,156,58,"opts"],[171,56,156,62],[171,57,156,63,"getRawInput"],[172,12,157,16],[172,13,157,17],[172,14,157,18],[173,10,158,12],[174,8,159,8],[174,9,159,9],[174,10,159,10],[175,8,160,8],[175,15,160,15,"result"],[175,21,160,21],[176,6,161,4],[176,7,161,5],[176,8,161,6],[176,15,161,13,"cause"],[176,20,161,18],[176,22,161,20],[177,8,162,8],[177,15,162,15],[178,10,163,12,"ok"],[178,12,163,14],[178,14,163,16],[178,19,163,21],[179,10,164,12,"error"],[179,15,164,17],[179,17,164,19],[179,21,164,19,"getTRPCErrorFromUnknown"],[179,55,164,42],[179,57,164,43,"cause"],[179,62,164,48],[179,63,164,49],[180,10,165,12,"marker"],[180,16,165,18],[180,18,165,20,"middlewareMarker"],[181,8,166,8],[181,9,166,9],[182,6,167,4],[183,4,168,0],[183,5,168,1],[184,4,168,1],[184,11,168,1,"_callRecursive"],[184,25,168,1],[184,26,168,1,"apply"],[184,31,168,1],[184,38,168,1,"arguments"],[184,47,168,1],[185,2,168,1],[186,2,169,0],[186,11,169,9,"createProcedureCaller"],[186,32,169,30,"createProcedureCaller"],[186,33,169,31,"_def"],[186,37,169,35],[186,39,169,37],[187,4,169,37],[187,13,170,19,"procedure"],[187,22,170,28,"procedure"],[187,23,170,28,"_x5"],[187,26,170,28],[188,6,170,28],[188,13,170,28,"_procedure"],[188,23,170,28],[188,24,170,28,"apply"],[188,29,170,28],[188,36,170,28,"arguments"],[188,45,170,28],[189,4,170,28],[190,4,170,28],[190,13,170,28,"_procedure"],[190,24,170,28],[191,6,170,28,"_procedure"],[191,16,170,28],[191,23,170,28,"_asyncToGenerator2"],[191,41,170,28],[191,42,170,28,"default"],[191,49,170,28],[191,51,170,4],[191,62,170,29,"opts"],[191,66,170,33],[191,68,170,35],[192,8,171,8],[193,8,172,8],[193,12,172,12],[193,13,172,13,"opts"],[193,17,172,17],[193,21,172,21],[193,23,172,23],[193,36,172,36],[193,40,172,40,"opts"],[193,44,172,44],[193,45,172,45],[193,47,172,47],[194,10,173,12],[194,16,173,18],[194,20,173,22,"Error"],[194,25,173,27],[194,26,173,28,"codeblock"],[194,35,173,37],[194,36,173,38],[195,8,174,8],[196,8,175,8],[197,8,176,8],[197,12,176,14,"result"],[197,18,176,20],[197,27,176,29,"callRecursive"],[197,40,176,42],[197,41,176,43],[197,42,176,44],[197,44,176,46,"_def"],[197,48,176,50],[197,50,176,52,"opts"],[197,54,176,56],[197,55,176,57],[198,8,177,8],[198,12,177,12],[198,13,177,13,"result"],[198,19,177,19],[198,21,177,21],[199,10,178,12],[199,16,178,18],[199,20,178,22,"TRPCError"],[199,40,178,31],[199,41,178,32],[200,12,179,16,"code"],[200,16,179,20],[200,18,179,22],[200,41,179,45],[201,12,180,16,"message"],[201,19,180,23],[201,21,180,25],[202,10,181,12],[202,11,181,13],[202,12,181,14],[203,8,182,8],[204,8,183,8],[204,12,183,12],[204,13,183,13,"result"],[204,19,183,19],[204,20,183,20,"ok"],[204,22,183,22],[204,24,183,24],[205,10,184,12],[206,10,185,12],[206,16,185,18,"result"],[206,22,185,24],[206,23,185,25,"error"],[206,28,185,30],[207,8,186,8],[208,8,187,8],[208,15,187,15,"result"],[208,21,187,21],[208,22,187,22,"data"],[208,26,187,26],[209,6,188,4],[209,7,188,5],[210,6,188,5],[210,13,188,5,"_procedure"],[210,23,188,5],[210,24,188,5,"apply"],[210,29,188,5],[210,36,188,5,"arguments"],[210,45,188,5],[211,4,188,5],[212,4,189,4,"procedure"],[212,13,189,13],[212,14,189,14,"_def"],[212,18,189,18],[212,21,189,21,"_def"],[212,25,189,25],[213,4,190,4,"procedure"],[213,13,190,13],[213,14,190,14,"procedure"],[213,23,190,23],[213,26,190,26],[213,30,190,30],[214,4,191,4],[215,4,192,4],[215,11,192,11,"procedure"],[215,20,192,20],[216,2,193,0],[217,0,193,1],[217,3]],"functionMap":{"names":["<global>","createNewBuilder","createBuilder","builder.input","builder.output","builder.meta","builder.use","builder.unstable_concat","builder.query","builder.mutation","builder.subscription","builder.experimental_caller","createResolver","resolveMiddleware","callerWrapper","callRecursive","middleware$argument_0.next","createProcedureCaller","procedure"],"mappings":"AAA;ACK;CDkB;AEC;QCS;SDU;QEC;SFQ;QGC;SHI;QIC;SJQ;QKC;SLE;QMC;SNK;QOC;SPK;QQC;SRK;QSC;STI;CFG;AYC;YCI;aDQ;0BEe;KFM;CZG;AeM;YCQ;aDW;CfU;AiBC;ICC;KDkB;CjBK"}},"type":"js/module"}]}