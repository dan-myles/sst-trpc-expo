{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":303,"column":44,"index":12334}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"query-string","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":27,"column":33,"index":1227},"end":{"line":27,"column":56,"index":1250}}],"key":"GFSDDT7dIJnvWSebFhtcKgwXBCQ="}},{"name":"./getPathFromState-forks","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":28,"column":26,"index":1279},"end":{"line":28,"column":61,"index":1314}}],"key":"0jhtinFbCJO2FpQ/0MZEN6C03us="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function () {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.appendBaseUrl = exports.getPathDataFromState = exports.getPathFromState = void 0;\n  var queryString = __importStar(require(_dependencyMap[1], \"query-string\"));\n  var expo = __importStar(require(_dependencyMap[2], \"./getPathFromState-forks\"));\n  // END FORK\n  var getActiveRoute = state => {\n    var route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n    if (route.state) {\n      return getActiveRoute(route.state);\n    }\n    return route;\n  };\n  var cachedNormalizedConfigs = [undefined, {}];\n  /**\n   * Utility to serialize a navigation state object to a path string.\n   *\n   * @example\n   * ```js\n   * getPathFromState(\n   *   {\n   *     routes: [\n   *       {\n   *         name: 'Chat',\n   *         params: { author: 'Jane', id: 42 },\n   *       },\n   *     ],\n   *   },\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         stringify: { author: author => author.toLowerCase() }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   *\n   * @param state Navigation state to serialize.\n   * @param options Extra options to fine-tune how to serialize the path.\n   * @returns Path representing the state, e.g. /foo/bar?count=42.\n   */\n  function getPathFromState(state, options) {\n    return getPathDataFromState(state, options).path;\n  }\n  exports.getPathFromState = getPathFromState;\n  function getPathDataFromState(state, options) {\n    if (state == null) {\n      throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n    }\n    if (options) {\n      // START FORK\n      expo.validatePathConfig(options);\n      // validatePathConfig(options);\n      // END FORK\n    }\n    // Create a normalized configs object which will be easier to use\n    if (cachedNormalizedConfigs[0] !== options?.screens) {\n      cachedNormalizedConfigs = [options?.screens, options?.screens ? createNormalizedConfigs(options.screens) : {}];\n    }\n    var configs = cachedNormalizedConfigs[1];\n    var path = '/';\n    var current = state;\n    var allParams = {};\n    var _loop = function () {\n      var index = typeof current.index === 'number' ? current.index : 0;\n      var route = current.routes[index];\n      var pattern;\n      var focusedParams;\n      var focusedRoute = getActiveRoute(state);\n      var currentOptions = configs;\n      // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n      var nestedRouteNames = [];\n      var hasNext = true;\n      while (route.name in currentOptions && hasNext) {\n        pattern = currentOptions[route.name].pattern;\n        nestedRouteNames.push(route.name);\n        if (route.params) {\n          var stringify = currentOptions[route.name]?.stringify;\n          // START FORK\n          // This mutates allParams\n          var currentParams = expo.fixCurrentParams(allParams, route, stringify);\n          // const currentParams = Object.fromEntries(\n          //   Object.entries(route.params).map(([key, value]) => [\n          //     key,\n          //     stringify?.[key] ? stringify[key](value) : String(value),\n          //   ])\n          // );\n          // if (pattern) {\n          //   Object.assign(allParams, currentParams);\n          // }\n          // END FORK\n          if (focusedRoute === route) {\n            // If this is the focused route, keep the params for later use\n            // We save it here since it's been stringified already\n            focusedParams = {\n              ...currentParams\n            };\n            pattern?.split('/').filter(p => expo.isDynamicPart(p))\n            // eslint-disable-next-line no-loop-func\n            .forEach(p => {\n              var name = expo.getParamName(p);\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n          }\n        }\n        // If there is no `screens` property or no nested state, we return pattern\n        if (!currentOptions[route.name].screens || route.state === undefined) {\n          // START FORK\n          // Expo Router can end up in some configs that React Navigation doesn't seem to support\n          // We can get around this by providing a fake state\n          var screens = currentOptions[route.name].screens;\n          var screen = route.params && 'screen' in route.params ? route.params.screen?.toString() : screens ? Object.keys(screens)[0] : undefined;\n          if (screen && screens && currentOptions[route.name].screens?.[screen]) {\n            route = {\n              ...screens[screen],\n              name: screen,\n              key: screen\n            };\n            currentOptions = screens;\n          } else {\n            hasNext = false;\n          }\n          // hasNext = false;\n          // END FORK\n        } else {\n          index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n          var nextRoute = route.state.routes[index];\n          var nestedConfig = currentOptions[route.name].screens;\n          // if there is config for next route name, we go deeper\n          if (nestedConfig && nextRoute.name in nestedConfig) {\n            route = nextRoute;\n            currentOptions = nestedConfig;\n          } else {\n            // If not, there is no sense in going deeper in config\n            hasNext = false;\n          }\n        }\n      }\n      if (pattern === undefined) {\n        pattern = nestedRouteNames.join('/');\n      }\n      if (currentOptions[route.name] !== undefined) {\n        // START FORK\n        path += expo.getPathWithConventionsCollapsed({\n          ...options,\n          pattern,\n          route,\n          params: allParams,\n          initialRouteName: configs[route.name]?.initialRouteName\n        });\n        // path += pattern\n        //   .split('/')\n        //   .map((p) => {\n        //     const name = getParamName(p);\n        //     // We don't know what to show for wildcard patterns\n        //     // Showing the route name seems ok, though whatever we show here will be incorrect\n        //     // Since the page doesn't actually exist\n        //     if (p === '*') {\n        //       return route.name;\n        //     }\n        //     // If the path has a pattern for a param, put the param in the path\n        //     if (p.startsWith(':')) {\n        //       const value = allParams[name];\n        //       if (value === undefined && p.endsWith('?')) {\n        //         // Optional params without value assigned in route.params should be ignored\n        //         return '';\n        //       }\n        //       // Valid characters according to\n        //       // https://datatracker.ietf.org/doc/html/rfc3986#section-3.3 (see pchar definition)\n        //       return String(value).replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g, (char) =>\n        //         encodeURIComponent(char)\n        //       );\n        //     }\n        //     return encodeURIComponent(p);\n        //   })\n        //   .join('/');\n        // } else {\n      } else if (!route.name.startsWith('+')) {\n        path += encodeURIComponent(route.name);\n      }\n      // END FORK\n      if (!focusedParams) {\n        focusedParams = focusedRoute.params;\n      }\n      if (route.state) {\n        path += '/';\n      } else if (focusedParams) {\n        for (var param in focusedParams) {\n          if (focusedParams[param] === 'undefined') {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete focusedParams[param];\n          }\n        }\n        // START FORK\n        delete focusedParams['#'];\n        // END FORK\n        var query = queryString.stringify(focusedParams, {\n          sort: false\n        });\n        if (query) {\n          path += `?${query}`;\n        }\n      }\n      current = route.state;\n    };\n    while (current) {\n      _loop();\n    }\n    // Remove multiple as well as trailing slashes\n    path = path.replace(/\\/+/g, '/');\n    path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n    // Include the root path if specified\n    if (options?.path) {\n      path = joinPaths(options.path, path);\n    }\n    // START FORK\n    path = expo.appendBaseUrl(path);\n    if (allParams['#']) {\n      path += `#${allParams['#']}`;\n    }\n    // END FORK\n    // START FORK\n    return {\n      path,\n      params: allParams\n    };\n    // END FORK\n  }\n  exports.getPathDataFromState = getPathDataFromState;\n  // const getParamName = (pattern: string) => pattern.replace(/^:/, '').replace(/\\?$/, '');\n  var joinPaths = function () {\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n    return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  };\n  var createConfigItem = (config, parentPattern) => {\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      var _pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      return {\n        pattern: _pattern\n      };\n    }\n    if (config.exact && config.path === undefined) {\n      throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n    }\n    // If an object is specified as the value (e.g. Foo: { ... }),\n    // It can have `path` property and `screens` prop which has nested configs\n    var pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n    var screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n    return {\n      // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n      pattern: pattern?.split('/').filter(Boolean).join('/'),\n      stringify: config.stringify,\n      screens\n    };\n  };\n  var createNormalizedConfigs = (options, pattern) => Object.fromEntries(Object.entries(options).map(_ref => {\n    var _ref2 = _slicedToArray(_ref, 2),\n      name = _ref2[0],\n      c = _ref2[1];\n    var result = createConfigItem(c, pattern);\n    return [name, result];\n  }));\n  function appendBaseUrl(path) {\n    var baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    if (process.env.NODE_ENV !== 'development') {\n      if (baseUrl) {\n        return `/${baseUrl.replace(/^\\/+/, '').replace(/\\/$/, '')}${path}`;\n      }\n    }\n    return path;\n  }\n  exports.appendBaseUrl = appendBaseUrl;\n});","lineCount":318,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[5,2,2,0],[5,6,2,4,"__createBinding"],[5,21,2,19],[5,24,2,23],[5,28,2,27],[5,32,2,31],[5,36,2,35],[5,37,2,36,"__createBinding"],[5,52,2,51],[5,57,2,57,"Object"],[5,63,2,63],[5,64,2,64,"create"],[5,70,2,70],[5,73,2,74],[5,83,2,83,"o"],[5,84,2,84],[5,86,2,86,"m"],[5,87,2,87],[5,89,2,89,"k"],[5,90,2,90],[5,92,2,92,"k2"],[5,94,2,94],[5,96,2,96],[6,4,3,4],[6,8,3,8,"k2"],[6,10,3,10],[6,15,3,15,"undefined"],[6,24,3,24],[6,26,3,26,"k2"],[6,28,3,28],[6,31,3,31,"k"],[6,32,3,32],[7,4,4,4],[7,8,4,8,"desc"],[7,12,4,12],[7,15,4,15,"Object"],[7,21,4,21],[7,22,4,22,"getOwnPropertyDescriptor"],[7,46,4,46],[7,47,4,47,"m"],[7,48,4,48],[7,50,4,50,"k"],[7,51,4,51],[7,52,4,52],[8,4,5,4],[8,8,5,8],[8,9,5,9,"desc"],[8,13,5,13],[8,18,5,18],[8,23,5,23],[8,27,5,27,"desc"],[8,31,5,31],[8,34,5,34],[8,35,5,35,"m"],[8,36,5,36],[8,37,5,37,"__esModule"],[8,47,5,47],[8,50,5,50,"desc"],[8,54,5,54],[8,55,5,55,"writable"],[8,63,5,63],[8,67,5,67,"desc"],[8,71,5,71],[8,72,5,72,"configurable"],[8,84,5,84],[8,85,5,85],[8,87,5,87],[9,6,6,6,"desc"],[9,10,6,10],[9,13,6,13],[10,8,6,15,"enumerable"],[10,18,6,25],[10,20,6,27],[10,24,6,31],[11,8,6,33,"get"],[11,11,6,36],[11,13,6,38],[11,22,6,38,"get"],[11,23,6,38],[11,25,6,49],[12,10,6,51],[12,17,6,58,"m"],[12,18,6,59],[12,19,6,60,"k"],[12,20,6,61],[12,21,6,62],[13,8,6,64],[14,6,6,66],[14,7,6,67],[15,4,7,4],[16,4,8,4,"Object"],[16,10,8,10],[16,11,8,11,"defineProperty"],[16,25,8,25],[16,26,8,26,"o"],[16,27,8,27],[16,29,8,29,"k2"],[16,31,8,31],[16,33,8,33,"desc"],[16,37,8,37],[16,38,8,38],[17,2,9,0],[17,3,9,1],[17,6,9,6],[17,16,9,15,"o"],[17,17,9,16],[17,19,9,18,"m"],[17,20,9,19],[17,22,9,21,"k"],[17,23,9,22],[17,25,9,24,"k2"],[17,27,9,26],[17,29,9,28],[18,4,10,4],[18,8,10,8,"k2"],[18,10,10,10],[18,15,10,15,"undefined"],[18,24,10,24],[18,26,10,26,"k2"],[18,28,10,28],[18,31,10,31,"k"],[18,32,10,32],[19,4,11,4,"o"],[19,5,11,5],[19,6,11,6,"k2"],[19,8,11,8],[19,9,11,9],[19,12,11,12,"m"],[19,13,11,13],[19,14,11,14,"k"],[19,15,11,15],[19,16,11,16],[20,2,12,0],[20,3,12,2],[20,4,12,3],[21,2,13,0],[21,6,13,4,"__setModuleDefault"],[21,24,13,22],[21,27,13,26],[21,31,13,30],[21,35,13,34],[21,39,13,38],[21,40,13,39,"__setModuleDefault"],[21,58,13,57],[21,63,13,63,"Object"],[21,69,13,69],[21,70,13,70,"create"],[21,76,13,76],[21,79,13,80],[21,89,13,89,"o"],[21,90,13,90],[21,92,13,92,"v"],[21,93,13,93],[21,95,13,95],[22,4,14,4,"Object"],[22,10,14,10],[22,11,14,11,"defineProperty"],[22,25,14,25],[22,26,14,26,"o"],[22,27,14,27],[22,29,14,29],[22,38,14,38],[22,40,14,40],[23,6,14,42,"enumerable"],[23,16,14,52],[23,18,14,54],[23,22,14,58],[24,6,14,60,"value"],[24,11,14,65],[24,13,14,67,"v"],[25,4,14,69],[25,5,14,70],[25,6,14,71],[26,2,15,0],[26,3,15,1],[26,6,15,5],[26,16,15,14,"o"],[26,17,15,15],[26,19,15,17,"v"],[26,20,15,18],[26,22,15,20],[27,4,16,4,"o"],[27,5,16,5],[27,6,16,6],[27,15,16,15],[27,16,16,16],[27,19,16,19,"v"],[27,20,16,20],[28,2,17,0],[28,3,17,1],[28,4,17,2],[29,2,18,0],[29,6,18,4,"__importStar"],[29,18,18,16],[29,21,18,20],[29,25,18,24],[29,29,18,28],[29,33,18,32],[29,34,18,33,"__importStar"],[29,46,18,45],[29,50,18,50],[29,60,18,60,"mod"],[29,63,18,63],[29,65,18,65],[30,4,19,4],[30,8,19,8,"mod"],[30,11,19,11],[30,15,19,15,"mod"],[30,18,19,18],[30,19,19,19,"__esModule"],[30,29,19,29],[30,31,19,31],[30,38,19,38,"mod"],[30,41,19,41],[31,4,20,4],[31,8,20,8,"result"],[31,14,20,14],[31,17,20,17],[31,18,20,18],[31,19,20,19],[32,4,21,4],[32,8,21,8,"mod"],[32,11,21,11],[32,15,21,15],[32,19,21,19],[32,21,21,21],[32,26,21,26],[32,30,21,30,"k"],[32,31,21,31],[32,35,21,35,"mod"],[32,38,21,38],[32,40,21,40],[32,44,21,44,"k"],[32,45,21,45],[32,50,21,50],[32,59,21,59],[32,63,21,63,"Object"],[32,69,21,69],[32,70,21,70,"prototype"],[32,79,21,79],[32,80,21,80,"hasOwnProperty"],[32,94,21,94],[32,95,21,95,"call"],[32,99,21,99],[32,100,21,100,"mod"],[32,103,21,103],[32,105,21,105,"k"],[32,106,21,106],[32,107,21,107],[32,109,21,109,"__createBinding"],[32,124,21,124],[32,125,21,125,"result"],[32,131,21,131],[32,133,21,133,"mod"],[32,136,21,136],[32,138,21,138,"k"],[32,139,21,139],[32,140,21,140],[33,4,22,4,"__setModuleDefault"],[33,22,22,22],[33,23,22,23,"result"],[33,29,22,29],[33,31,22,31,"mod"],[33,34,22,34],[33,35,22,35],[34,4,23,4],[34,11,23,11,"result"],[34,17,23,17],[35,2,24,0],[35,3,24,1],[36,2,25,0,"Object"],[36,8,25,6],[36,9,25,7,"defineProperty"],[36,23,25,21],[36,24,25,22,"exports"],[36,31,25,29],[36,33,25,31],[36,45,25,43],[36,47,25,45],[37,4,25,47,"value"],[37,9,25,52],[37,11,25,54],[38,2,25,59],[38,3,25,60],[38,4,25,61],[39,2,26,0,"exports"],[39,9,26,7],[39,10,26,8,"appendBaseUrl"],[39,23,26,21],[39,26,26,24,"exports"],[39,33,26,31],[39,34,26,32,"getPathDataFromState"],[39,54,26,52],[39,57,26,55,"exports"],[39,64,26,62],[39,65,26,63,"getPathFromState"],[39,81,26,79],[39,84,26,82],[39,89,26,87],[39,90,26,88],[40,2,27,0],[40,6,27,6,"queryString"],[40,17,27,17],[40,20,27,20,"__importStar"],[40,32,27,32],[40,33,27,33,"require"],[40,40,27,40],[40,41,27,40,"_dependencyMap"],[40,55,27,40],[40,74,27,55],[40,75,27,56],[40,76,27,57],[41,2,28,0],[41,6,28,6,"expo"],[41,10,28,10],[41,13,28,13,"__importStar"],[41,25,28,25],[41,26,28,26,"require"],[41,33,28,33],[41,34,28,33,"_dependencyMap"],[41,48,28,33],[41,79,28,60],[41,80,28,61],[41,81,28,62],[42,2,29,0],[43,2,30,0],[43,6,30,6,"getActiveRoute"],[43,20,30,20],[43,23,30,24,"state"],[43,28,30,29],[43,32,30,34],[44,4,31,4],[44,8,31,10,"route"],[44,13,31,15],[44,16,31,18],[44,23,31,25,"state"],[44,28,31,30],[44,29,31,31,"index"],[44,34,31,36],[44,39,31,41],[44,47,31,49],[44,50,32,10,"state"],[44,55,32,15],[44,56,32,16,"routes"],[44,62,32,22],[44,63,32,23,"state"],[44,68,32,28],[44,69,32,29,"index"],[44,74,32,34],[44,75,32,35],[44,78,33,10,"state"],[44,83,33,15],[44,84,33,16,"routes"],[44,90,33,22],[44,91,33,23,"state"],[44,96,33,28],[44,97,33,29,"routes"],[44,103,33,35],[44,104,33,36,"length"],[44,110,33,42],[44,113,33,45],[44,114,33,46],[44,115,33,47],[45,4,34,4],[45,8,34,8,"route"],[45,13,34,13],[45,14,34,14,"state"],[45,19,34,19],[45,21,34,21],[46,6,35,8],[46,13,35,15,"getActiveRoute"],[46,27,35,29],[46,28,35,30,"route"],[46,33,35,35],[46,34,35,36,"state"],[46,39,35,41],[46,40,35,42],[47,4,36,4],[48,4,37,4],[48,11,37,11,"route"],[48,16,37,16],[49,2,38,0],[49,3,38,1],[50,2,39,0],[50,6,39,4,"cachedNormalizedConfigs"],[50,29,39,27],[50,32,39,30],[50,33,40,4,"undefined"],[50,42,40,13],[50,44,41,4],[50,45,41,5],[50,46,41,6],[50,47,42,1],[51,2,43,0],[52,0,44,0],[53,0,45,0],[54,0,46,0],[55,0,47,0],[56,0,48,0],[57,0,49,0],[58,0,50,0],[59,0,51,0],[60,0,52,0],[61,0,53,0],[62,0,54,0],[63,0,55,0],[64,0,56,0],[65,0,57,0],[66,0,58,0],[67,0,59,0],[68,0,60,0],[69,0,61,0],[70,0,62,0],[71,0,63,0],[72,0,64,0],[73,0,65,0],[74,0,66,0],[75,0,67,0],[76,0,68,0],[77,0,69,0],[78,0,70,0],[79,0,71,0],[80,2,72,0],[80,11,72,9,"getPathFromState"],[80,27,72,25,"getPathFromState"],[80,28,72,26,"state"],[80,33,72,31],[80,35,72,33,"options"],[80,42,72,40],[80,44,72,42],[81,4,73,4],[81,11,73,11,"getPathDataFromState"],[81,31,73,31],[81,32,73,32,"state"],[81,37,73,37],[81,39,73,39,"options"],[81,46,73,46],[81,47,73,47],[81,48,73,48,"path"],[81,52,73,52],[82,2,74,0],[83,2,75,0,"exports"],[83,9,75,7],[83,10,75,8,"getPathFromState"],[83,26,75,24],[83,29,75,27,"getPathFromState"],[83,45,75,43],[84,2,76,0],[84,11,76,9,"getPathDataFromState"],[84,31,76,29,"getPathDataFromState"],[84,32,76,30,"state"],[84,37,76,35],[84,39,76,37,"options"],[84,46,76,44],[84,48,76,46],[85,4,77,4],[85,8,77,8,"state"],[85,13,77,13],[85,17,77,17],[85,21,77,21],[85,23,77,23],[86,6,78,8],[86,12,78,14,"Error"],[86,17,78,19],[86,18,78,20],[86,97,78,99],[86,98,78,100],[87,4,79,4],[88,4,80,4],[88,8,80,8,"options"],[88,15,80,15],[88,17,80,17],[89,6,81,8],[90,6,82,8,"expo"],[90,10,82,12],[90,11,82,13,"validatePathConfig"],[90,29,82,31],[90,30,82,32,"options"],[90,37,82,39],[90,38,82,40],[91,6,83,8],[92,6,84,8],[93,4,85,4],[94,4,86,4],[95,4,87,4],[95,8,87,8,"cachedNormalizedConfigs"],[95,31,87,31],[95,32,87,32],[95,33,87,33],[95,34,87,34],[95,39,87,39,"options"],[95,46,87,46],[95,48,87,48,"screens"],[95,55,87,55],[95,57,87,57],[96,6,88,8,"cachedNormalizedConfigs"],[96,29,88,31],[96,32,88,34],[96,33,89,12,"options"],[96,40,89,19],[96,42,89,21,"screens"],[96,49,89,28],[96,51,90,12,"options"],[96,58,90,19],[96,60,90,21,"screens"],[96,67,90,28],[96,70,90,31,"createNormalizedConfigs"],[96,93,90,54],[96,94,90,55,"options"],[96,101,90,62],[96,102,90,63,"screens"],[96,109,90,70],[96,110,90,71],[96,113,90,74],[96,114,90,75],[96,115,90,76],[96,116,91,9],[97,4,92,4],[98,4,93,4],[98,8,93,10,"configs"],[98,15,93,17],[98,18,93,20,"cachedNormalizedConfigs"],[98,41,93,43],[98,42,93,44],[98,43,93,45],[98,44,93,46],[99,4,94,4],[99,8,94,8,"path"],[99,12,94,12],[99,15,94,15],[99,18,94,18],[100,4,95,4],[100,8,95,8,"current"],[100,15,95,15],[100,18,95,18,"state"],[100,23,95,23],[101,4,96,4],[101,8,96,10,"allParams"],[101,17,96,19],[101,20,96,22],[101,21,96,23],[101,22,96,24],[102,4,96,25],[102,8,96,25,"_loop"],[102,13,96,25],[102,25,96,25,"_loop"],[102,26,96,25],[102,28,97,20],[103,6,98,8],[103,10,98,12,"index"],[103,15,98,17],[103,18,98,20],[103,25,98,27,"current"],[103,32,98,34],[103,33,98,35,"index"],[103,38,98,40],[103,43,98,45],[103,51,98,53],[103,54,98,56,"current"],[103,61,98,63],[103,62,98,64,"index"],[103,67,98,69],[103,70,98,72],[103,71,98,73],[104,6,99,8],[104,10,99,12,"route"],[104,15,99,17],[104,18,99,20,"current"],[104,25,99,27],[104,26,99,28,"routes"],[104,32,99,34],[104,33,99,35,"index"],[104,38,99,40],[104,39,99,41],[105,6,100,8],[105,10,100,12,"pattern"],[105,17,100,19],[106,6,101,8],[106,10,101,12,"focusedParams"],[106,23,101,25],[107,6,102,8],[107,10,102,14,"focusedRoute"],[107,22,102,26],[107,25,102,29,"getActiveRoute"],[107,39,102,43],[107,40,102,44,"state"],[107,45,102,49],[107,46,102,50],[108,6,103,8],[108,10,103,12,"currentOptions"],[108,24,103,26],[108,27,103,29,"configs"],[108,34,103,36],[109,6,104,8],[110,6,105,8],[110,10,105,14,"nestedRouteNames"],[110,26,105,30],[110,29,105,33],[110,31,105,35],[111,6,106,8],[111,10,106,12,"hasNext"],[111,17,106,19],[111,20,106,22],[111,24,106,26],[112,6,107,8],[112,13,107,15,"route"],[112,18,107,20],[112,19,107,21,"name"],[112,23,107,25],[112,27,107,29,"currentOptions"],[112,41,107,43],[112,45,107,47,"hasNext"],[112,52,107,54],[112,54,107,56],[113,8,108,12,"pattern"],[113,15,108,19],[113,18,108,22,"currentOptions"],[113,32,108,36],[113,33,108,37,"route"],[113,38,108,42],[113,39,108,43,"name"],[113,43,108,47],[113,44,108,48],[113,45,108,49,"pattern"],[113,52,108,56],[114,8,109,12,"nestedRouteNames"],[114,24,109,28],[114,25,109,29,"push"],[114,29,109,33],[114,30,109,34,"route"],[114,35,109,39],[114,36,109,40,"name"],[114,40,109,44],[114,41,109,45],[115,8,110,12],[115,12,110,16,"route"],[115,17,110,21],[115,18,110,22,"params"],[115,24,110,28],[115,26,110,30],[116,10,111,16],[116,14,111,22,"stringify"],[116,23,111,31],[116,26,111,34,"currentOptions"],[116,40,111,48],[116,41,111,49,"route"],[116,46,111,54],[116,47,111,55,"name"],[116,51,111,59],[116,52,111,60],[116,54,111,62,"stringify"],[116,63,111,71],[117,10,112,16],[118,10,113,16],[119,10,114,16],[119,14,114,22,"currentParams"],[119,27,114,35],[119,30,114,38,"expo"],[119,34,114,42],[119,35,114,43,"fixCurrentParams"],[119,51,114,59],[119,52,114,60,"allParams"],[119,61,114,69],[119,63,114,71,"route"],[119,68,114,76],[119,70,114,78,"stringify"],[119,79,114,87],[119,80,114,88],[120,10,115,16],[121,10,116,16],[122,10,117,16],[123,10,118,16],[124,10,119,16],[125,10,120,16],[126,10,121,16],[127,10,122,16],[128,10,123,16],[129,10,124,16],[130,10,125,16],[130,14,125,20,"focusedRoute"],[130,26,125,32],[130,31,125,37,"route"],[130,36,125,42],[130,38,125,44],[131,12,126,20],[132,12,127,20],[133,12,128,20,"focusedParams"],[133,25,128,33],[133,28,128,36],[134,14,128,38],[134,17,128,41,"currentParams"],[135,12,128,55],[135,13,128,56],[136,12,129,20,"pattern"],[136,19,129,27],[136,21,130,26,"split"],[136,26,130,31],[136,27,130,32],[136,30,130,35],[136,31,130,36],[136,32,131,25,"filter"],[136,38,131,31],[136,39,131,33,"p"],[136,40,131,34],[136,44,131,39,"expo"],[136,48,131,43],[136,49,131,44,"isDynamicPart"],[136,62,131,57],[136,63,131,58,"p"],[136,64,131,59],[136,65,131,60],[137,12,132,24],[138,12,132,24],[138,13,133,25,"forEach"],[138,20,133,32],[138,21,133,34,"p"],[138,22,133,35],[138,26,133,40],[139,14,134,24],[139,18,134,30,"name"],[139,22,134,34],[139,25,134,37,"expo"],[139,29,134,41],[139,30,134,42,"getParamName"],[139,42,134,54],[139,43,134,55,"p"],[139,44,134,56],[139,45,134,57],[140,14,135,24],[141,14,136,24],[141,18,136,28,"focusedParams"],[141,31,136,41],[141,33,136,43],[142,16,137,28],[143,16,138,28],[143,23,138,35,"focusedParams"],[143,36,138,48],[143,37,138,49,"name"],[143,41,138,53],[143,42,138,54],[144,14,139,24],[145,12,140,20],[145,13,140,21],[145,14,140,22],[146,10,141,16],[147,8,142,12],[148,8,143,12],[149,8,144,12],[149,12,144,16],[149,13,144,17,"currentOptions"],[149,27,144,31],[149,28,144,32,"route"],[149,33,144,37],[149,34,144,38,"name"],[149,38,144,42],[149,39,144,43],[149,40,144,44,"screens"],[149,47,144,51],[149,51,144,55,"route"],[149,56,144,60],[149,57,144,61,"state"],[149,62,144,66],[149,67,144,71,"undefined"],[149,76,144,80],[149,78,144,82],[150,10,145,16],[151,10,146,16],[152,10,147,16],[153,10,148,16],[153,14,148,22,"screens"],[153,21,148,29],[153,24,148,32,"currentOptions"],[153,38,148,46],[153,39,148,47,"route"],[153,44,148,52],[153,45,148,53,"name"],[153,49,148,57],[153,50,148,58],[153,51,148,59,"screens"],[153,58,148,66],[154,10,149,16],[154,14,149,22,"screen"],[154,20,149,28],[154,23,149,31,"route"],[154,28,149,36],[154,29,149,37,"params"],[154,35,149,43],[154,39,149,47],[154,47,149,55],[154,51,149,59,"route"],[154,56,149,64],[154,57,149,65,"params"],[154,63,149,71],[154,66,150,22,"route"],[154,71,150,27],[154,72,150,28,"params"],[154,78,150,34],[154,79,150,35,"screen"],[154,85,150,41],[154,87,150,43,"toString"],[154,95,150,51],[154,96,150,52],[154,97,150,53],[154,100,151,22,"screens"],[154,107,151,29],[154,110,152,26,"Object"],[154,116,152,32],[154,117,152,33,"keys"],[154,121,152,37],[154,122,152,38,"screens"],[154,129,152,45],[154,130,152,46],[154,131,152,47],[154,132,152,48],[154,133,152,49],[154,136,153,26,"undefined"],[154,145,153,35],[155,10,154,16],[155,14,154,20,"screen"],[155,20,154,26],[155,24,154,30,"screens"],[155,31,154,37],[155,35,154,41,"currentOptions"],[155,49,154,55],[155,50,154,56,"route"],[155,55,154,61],[155,56,154,62,"name"],[155,60,154,66],[155,61,154,67],[155,62,154,68,"screens"],[155,69,154,75],[155,72,154,78,"screen"],[155,78,154,84],[155,79,154,85],[155,81,154,87],[156,12,155,20,"route"],[156,17,155,25],[156,20,155,28],[157,14,155,30],[157,17,155,33,"screens"],[157,24,155,40],[157,25,155,41,"screen"],[157,31,155,47],[157,32,155,48],[158,14,155,50,"name"],[158,18,155,54],[158,20,155,56,"screen"],[158,26,155,62],[159,14,155,64,"key"],[159,17,155,67],[159,19,155,69,"screen"],[160,12,155,76],[160,13,155,77],[161,12,156,20,"currentOptions"],[161,26,156,34],[161,29,156,37,"screens"],[161,36,156,44],[162,10,157,16],[162,11,157,17],[162,17,158,21],[163,12,159,20,"hasNext"],[163,19,159,27],[163,22,159,30],[163,27,159,35],[164,10,160,16],[165,10,161,16],[166,10,162,16],[167,8,163,12],[167,9,163,13],[167,15,164,17],[168,10,165,16,"index"],[168,15,165,21],[168,18,166,20],[168,25,166,27,"route"],[168,30,166,32],[168,31,166,33,"state"],[168,36,166,38],[168,37,166,39,"index"],[168,42,166,44],[168,47,166,49],[168,55,166,57],[168,58,166,60,"route"],[168,63,166,65],[168,64,166,66,"state"],[168,69,166,71],[168,70,166,72,"index"],[168,75,166,77],[168,78,166,80,"route"],[168,83,166,85],[168,84,166,86,"state"],[168,89,166,91],[168,90,166,92,"routes"],[168,96,166,98],[168,97,166,99,"length"],[168,103,166,105],[168,106,166,108],[168,107,166,109],[169,10,167,16],[169,14,167,22,"nextRoute"],[169,23,167,31],[169,26,167,34,"route"],[169,31,167,39],[169,32,167,40,"state"],[169,37,167,45],[169,38,167,46,"routes"],[169,44,167,52],[169,45,167,53,"index"],[169,50,167,58],[169,51,167,59],[170,10,168,16],[170,14,168,22,"nestedConfig"],[170,26,168,34],[170,29,168,37,"currentOptions"],[170,43,168,51],[170,44,168,52,"route"],[170,49,168,57],[170,50,168,58,"name"],[170,54,168,62],[170,55,168,63],[170,56,168,64,"screens"],[170,63,168,71],[171,10,169,16],[172,10,170,16],[172,14,170,20,"nestedConfig"],[172,26,170,32],[172,30,170,36,"nextRoute"],[172,39,170,45],[172,40,170,46,"name"],[172,44,170,50],[172,48,170,54,"nestedConfig"],[172,60,170,66],[172,62,170,68],[173,12,171,20,"route"],[173,17,171,25],[173,20,171,28,"nextRoute"],[173,29,171,37],[174,12,172,20,"currentOptions"],[174,26,172,34],[174,29,172,37,"nestedConfig"],[174,41,172,49],[175,10,173,16],[175,11,173,17],[175,17,174,21],[176,12,175,20],[177,12,176,20,"hasNext"],[177,19,176,27],[177,22,176,30],[177,27,176,35],[178,10,177,16],[179,8,178,12],[180,6,179,8],[181,6,180,8],[181,10,180,12,"pattern"],[181,17,180,19],[181,22,180,24,"undefined"],[181,31,180,33],[181,33,180,35],[182,8,181,12,"pattern"],[182,15,181,19],[182,18,181,22,"nestedRouteNames"],[182,34,181,38],[182,35,181,39,"join"],[182,39,181,43],[182,40,181,44],[182,43,181,47],[182,44,181,48],[183,6,182,8],[184,6,183,8],[184,10,183,12,"currentOptions"],[184,24,183,26],[184,25,183,27,"route"],[184,30,183,32],[184,31,183,33,"name"],[184,35,183,37],[184,36,183,38],[184,41,183,43,"undefined"],[184,50,183,52],[184,52,183,54],[185,8,184,12],[186,8,185,12,"path"],[186,12,185,16],[186,16,185,20,"expo"],[186,20,185,24],[186,21,185,25,"getPathWithConventionsCollapsed"],[186,52,185,56],[186,53,185,57],[187,10,186,16],[187,13,186,19,"options"],[187,20,186,26],[188,10,187,16,"pattern"],[188,17,187,23],[189,10,188,16,"route"],[189,15,188,21],[190,10,189,16,"params"],[190,16,189,22],[190,18,189,24,"allParams"],[190,27,189,33],[191,10,190,16,"initialRouteName"],[191,26,190,32],[191,28,190,34,"configs"],[191,35,190,41],[191,36,190,42,"route"],[191,41,190,47],[191,42,190,48,"name"],[191,46,190,52],[191,47,190,53],[191,49,190,55,"initialRouteName"],[192,8,191,12],[192,9,191,13],[192,10,191,14],[193,8,192,12],[194,8,193,12],[195,8,194,12],[196,8,195,12],[197,8,196,12],[198,8,197,12],[199,8,198,12],[200,8,199,12],[201,8,200,12],[202,8,201,12],[203,8,202,12],[204,8,203,12],[205,8,204,12],[206,8,205,12],[207,8,206,12],[208,8,207,12],[209,8,208,12],[210,8,209,12],[211,8,210,12],[212,8,211,12],[213,8,212,12],[214,8,213,12],[215,8,214,12],[216,8,215,12],[217,8,216,12],[218,8,217,12],[219,8,218,12],[220,6,219,8],[220,7,219,9],[220,13,220,13],[220,17,220,17],[220,18,220,18,"route"],[220,23,220,23],[220,24,220,24,"name"],[220,28,220,28],[220,29,220,29,"startsWith"],[220,39,220,39],[220,40,220,40],[220,43,220,43],[220,44,220,44],[220,46,220,46],[221,8,221,12,"path"],[221,12,221,16],[221,16,221,20,"encodeURIComponent"],[221,34,221,38],[221,35,221,39,"route"],[221,40,221,44],[221,41,221,45,"name"],[221,45,221,49],[221,46,221,50],[222,6,222,8],[223,6,223,8],[224,6,224,8],[224,10,224,12],[224,11,224,13,"focusedParams"],[224,24,224,26],[224,26,224,28],[225,8,225,12,"focusedParams"],[225,21,225,25],[225,24,225,28,"focusedRoute"],[225,36,225,40],[225,37,225,41,"params"],[225,43,225,47],[226,6,226,8],[227,6,227,8],[227,10,227,12,"route"],[227,15,227,17],[227,16,227,18,"state"],[227,21,227,23],[227,23,227,25],[228,8,228,12,"path"],[228,12,228,16],[228,16,228,20],[228,19,228,23],[229,6,229,8],[229,7,229,9],[229,13,230,13],[229,17,230,17,"focusedParams"],[229,30,230,30],[229,32,230,32],[230,8,231,12],[230,13,231,17],[230,17,231,23,"param"],[230,22,231,28],[230,26,231,32,"focusedParams"],[230,39,231,45],[230,41,231,47],[231,10,232,16],[231,14,232,20,"focusedParams"],[231,27,232,33],[231,28,232,34,"param"],[231,33,232,39],[231,34,232,40],[231,39,232,45],[231,50,232,56],[231,52,232,58],[232,12,233,20],[233,12,234,20],[233,19,234,27,"focusedParams"],[233,32,234,40],[233,33,234,41,"param"],[233,38,234,46],[233,39,234,47],[234,10,235,16],[235,8,236,12],[236,8,237,12],[237,8,238,12],[237,15,238,19,"focusedParams"],[237,28,238,32],[237,29,238,33],[237,32,238,36],[237,33,238,37],[238,8,239,12],[239,8,240,12],[239,12,240,18,"query"],[239,17,240,23],[239,20,240,26,"queryString"],[239,31,240,37],[239,32,240,38,"stringify"],[239,41,240,47],[239,42,240,48,"focusedParams"],[239,55,240,61],[239,57,240,63],[240,10,240,65,"sort"],[240,14,240,69],[240,16,240,71],[241,8,240,77],[241,9,240,78],[241,10,240,79],[242,8,241,12],[242,12,241,16,"query"],[242,17,241,21],[242,19,241,23],[243,10,242,16,"path"],[243,14,242,20],[243,18,242,24],[243,22,242,28,"query"],[243,27,242,33],[243,29,242,35],[244,8,243,12],[245,6,244,8],[246,6,245,8,"current"],[246,13,245,15],[246,16,245,18,"route"],[246,21,245,23],[246,22,245,24,"state"],[246,27,245,29],[247,4,246,4],[247,5,246,5],[248,4,97,4],[248,11,97,11,"current"],[248,18,97,18],[249,6,97,18,"_loop"],[249,11,97,18],[250,4,97,18],[251,4,247,4],[252,4,248,4,"path"],[252,8,248,8],[252,11,248,11,"path"],[252,15,248,15],[252,16,248,16,"replace"],[252,23,248,23],[252,24,248,24],[252,30,248,30],[252,32,248,32],[252,35,248,35],[252,36,248,36],[253,4,249,4,"path"],[253,8,249,8],[253,11,249,11,"path"],[253,15,249,15],[253,16,249,16,"length"],[253,22,249,22],[253,25,249,25],[253,26,249,26],[253,29,249,29,"path"],[253,33,249,33],[253,34,249,34,"replace"],[253,41,249,41],[253,42,249,42],[253,47,249,47],[253,49,249,49],[253,51,249,51],[253,52,249,52],[253,55,249,55,"path"],[253,59,249,59],[254,4,250,4],[255,4,251,4],[255,8,251,8,"options"],[255,15,251,15],[255,17,251,17,"path"],[255,21,251,21],[255,23,251,23],[256,6,252,8,"path"],[256,10,252,12],[256,13,252,15,"joinPaths"],[256,22,252,24],[256,23,252,25,"options"],[256,30,252,32],[256,31,252,33,"path"],[256,35,252,37],[256,37,252,39,"path"],[256,41,252,43],[256,42,252,44],[257,4,253,4],[258,4,254,4],[259,4,255,4,"path"],[259,8,255,8],[259,11,255,11,"expo"],[259,15,255,15],[259,16,255,16,"appendBaseUrl"],[259,29,255,29],[259,30,255,30,"path"],[259,34,255,34],[259,35,255,35],[260,4,256,4],[260,8,256,8,"allParams"],[260,17,256,17],[260,18,256,18],[260,21,256,21],[260,22,256,22],[260,24,256,24],[261,6,257,8,"path"],[261,10,257,12],[261,14,257,16],[261,18,257,20,"allParams"],[261,27,257,29],[261,28,257,30],[261,31,257,33],[261,32,257,34],[261,34,257,36],[262,4,258,4],[263,4,259,4],[264,4,260,4],[265,4,261,4],[265,11,261,11],[266,6,261,13,"path"],[266,10,261,17],[267,6,261,19,"params"],[267,12,261,25],[267,14,261,27,"allParams"],[268,4,261,37],[268,5,261,38],[269,4,262,4],[270,2,263,0],[271,2,264,0,"exports"],[271,9,264,7],[271,10,264,8,"getPathDataFromState"],[271,30,264,28],[271,33,264,31,"getPathDataFromState"],[271,53,264,51],[272,2,265,0],[273,2,266,0],[273,6,266,6,"joinPaths"],[273,15,266,15],[273,18,266,18],[273,27,266,18,"joinPaths"],[273,28,266,18],[274,4,266,18],[274,13,266,18,"_len"],[274,17,266,18],[274,20,266,18,"arguments"],[274,29,266,18],[274,30,266,18,"length"],[274,36,266,18],[274,38,266,22,"paths"],[274,43,266,27],[274,50,266,27,"Array"],[274,55,266,27],[274,56,266,27,"_len"],[274,60,266,27],[274,63,266,27,"_key"],[274,67,266,27],[274,73,266,27,"_key"],[274,77,266,27],[274,80,266,27,"_len"],[274,84,266,27],[274,86,266,27,"_key"],[274,90,266,27],[275,6,266,22,"paths"],[275,11,266,27],[275,12,266,27,"_key"],[275,16,266,27],[275,20,266,27,"arguments"],[275,29,266,27],[275,30,266,27,"_key"],[275,34,266,27],[276,4,266,27],[277,4,266,27],[277,11,266,32],[277,13,266,34],[277,14,267,5,"concat"],[277,20,267,11],[277,21,267,12],[277,24,267,15,"paths"],[277,29,267,20],[277,30,267,21,"map"],[277,33,267,24],[277,34,267,26,"p"],[277,35,267,27],[277,39,267,32,"p"],[277,40,267,33],[277,41,267,34,"split"],[277,46,267,39],[277,47,267,40],[277,50,267,43],[277,51,267,44],[277,52,267,45],[277,53,267,46],[277,54,268,5,"filter"],[277,60,268,11],[277,61,268,12,"Boolean"],[277,68,268,19],[277,69,268,20],[277,70,269,5,"join"],[277,74,269,9],[277,75,269,10],[277,78,269,13],[277,79,269,14],[278,2,269,14],[279,2,270,0],[279,6,270,6,"createConfigItem"],[279,22,270,22],[279,25,270,25,"createConfigItem"],[279,26,270,26,"config"],[279,32,270,32],[279,34,270,34,"parentPattern"],[279,47,270,47],[279,52,270,52],[280,4,271,4],[280,8,271,8],[280,15,271,15,"config"],[280,21,271,21],[280,26,271,26],[280,34,271,34],[280,36,271,36],[281,6,272,8],[282,6,273,8],[282,10,273,14,"pattern"],[282,18,273,21],[282,21,273,24,"parentPattern"],[282,34,273,37],[282,37,273,40,"joinPaths"],[282,46,273,49],[282,47,273,50,"parentPattern"],[282,60,273,63],[282,62,273,65,"config"],[282,68,273,71],[282,69,273,72],[282,72,273,75,"config"],[282,78,273,81],[283,6,274,8],[283,13,274,15],[284,8,274,17,"pattern"],[284,15,274,24],[284,17,274,17,"pattern"],[285,6,274,25],[285,7,274,26],[286,4,275,4],[287,4,276,4],[287,8,276,8,"config"],[287,14,276,14],[287,15,276,15,"exact"],[287,20,276,20],[287,24,276,24,"config"],[287,30,276,30],[287,31,276,31,"path"],[287,35,276,35],[287,40,276,40,"undefined"],[287,49,276,49],[287,51,276,51],[288,6,277,8],[288,12,277,14],[288,16,277,18,"Error"],[288,21,277,23],[288,22,277,24],[288,172,277,174],[288,173,277,175],[289,4,278,4],[290,4,279,4],[291,4,280,4],[292,4,281,4],[292,8,281,10,"pattern"],[292,15,281,17],[292,18,281,20,"config"],[292,24,281,26],[292,25,281,27,"exact"],[292,30,281,32],[292,35,281,37],[292,39,281,41],[292,42,281,44,"joinPaths"],[292,51,281,53],[292,52,281,54,"parentPattern"],[292,65,281,67],[292,69,281,71],[292,71,281,73],[292,73,281,75,"config"],[292,79,281,81],[292,80,281,82,"path"],[292,84,281,86],[292,88,281,90],[292,90,281,92],[292,91,281,93],[292,94,281,96,"config"],[292,100,281,102],[292,101,281,103,"path"],[292,105,281,107],[292,109,281,111],[292,111,281,113],[293,4,282,4],[293,8,282,10,"screens"],[293,15,282,17],[293,18,282,20,"config"],[293,24,282,26],[293,25,282,27,"screens"],[293,32,282,34],[293,35,282,37,"createNormalizedConfigs"],[293,58,282,60],[293,59,282,61,"config"],[293,65,282,67],[293,66,282,68,"screens"],[293,73,282,75],[293,75,282,77,"pattern"],[293,82,282,84],[293,83,282,85],[293,86,282,88,"undefined"],[293,95,282,97],[294,4,283,4],[294,11,283,11],[295,6,284,8],[296,6,285,8,"pattern"],[296,13,285,15],[296,15,285,17,"pattern"],[296,22,285,24],[296,24,285,26,"split"],[296,29,285,31],[296,30,285,32],[296,33,285,35],[296,34,285,36],[296,35,285,37,"filter"],[296,41,285,43],[296,42,285,44,"Boolean"],[296,49,285,51],[296,50,285,52],[296,51,285,53,"join"],[296,55,285,57],[296,56,285,58],[296,59,285,61],[296,60,285,62],[297,6,286,8,"stringify"],[297,15,286,17],[297,17,286,19,"config"],[297,23,286,25],[297,24,286,26,"stringify"],[297,33,286,35],[298,6,287,8,"screens"],[299,4,288,4],[299,5,288,5],[300,2,289,0],[300,3,289,1],[301,2,290,0],[301,6,290,6,"createNormalizedConfigs"],[301,29,290,29],[301,32,290,32,"createNormalizedConfigs"],[301,33,290,33,"options"],[301,40,290,40],[301,42,290,42,"pattern"],[301,49,290,49],[301,54,290,54,"Object"],[301,60,290,60],[301,61,290,61,"fromEntries"],[301,72,290,72],[301,73,290,73,"Object"],[301,79,290,79],[301,80,290,80,"entries"],[301,87,290,87],[301,88,290,88,"options"],[301,95,290,95],[301,96,290,96],[301,97,290,97,"map"],[301,100,290,100],[301,101,290,101,"_ref"],[301,105,290,101],[301,109,290,116],[302,4,290,116],[302,8,290,116,"_ref2"],[302,13,290,116],[302,16,290,116,"_slicedToArray"],[302,30,290,116],[302,31,290,116,"_ref"],[302,35,290,116],[303,6,290,103,"name"],[303,10,290,107],[303,13,290,107,"_ref2"],[303,18,290,107],[304,6,290,109,"c"],[304,7,290,110],[304,10,290,110,"_ref2"],[304,15,290,110],[305,4,291,4],[305,8,291,10,"result"],[305,14,291,16],[305,17,291,19,"createConfigItem"],[305,33,291,35],[305,34,291,36,"c"],[305,35,291,37],[305,37,291,39,"pattern"],[305,44,291,46],[305,45,291,47],[306,4,292,4],[306,11,292,11],[306,12,292,12,"name"],[306,16,292,16],[306,18,292,18,"result"],[306,24,292,24],[306,25,292,25],[307,2,293,0],[307,3,293,1],[307,4,293,2],[307,5,293,3],[308,2,294,0],[308,11,294,9,"appendBaseUrl"],[308,24,294,22,"appendBaseUrl"],[308,25,294,23,"path"],[308,29,294,27],[308,31,294,66],[309,4,294,66],[309,8,294,29,"baseUrl"],[309,15,294,36],[309,18,294,36,"arguments"],[309,27,294,36],[309,28,294,36,"length"],[309,34,294,36],[309,42,294,36,"arguments"],[309,51,294,36],[309,59,294,36,"undefined"],[309,68,294,36],[309,71,294,36,"arguments"],[309,80,294,36],[310,4,295,4],[310,8,295,8,"process"],[310,15,295,15],[310,16,295,16,"env"],[310,19,295,19],[310,20,295,20,"NODE_ENV"],[310,28,295,28],[310,33,295,33],[310,46,295,46],[310,48,295,48],[311,6,296,8],[311,10,296,12,"baseUrl"],[311,17,296,19],[311,19,296,21],[312,8,297,12],[312,15,297,19],[312,19,297,23,"baseUrl"],[312,26,297,30],[312,27,297,31,"replace"],[312,34,297,38],[312,35,297,39],[312,41,297,45],[312,43,297,47],[312,45,297,49],[312,46,297,50],[312,47,297,51,"replace"],[312,54,297,58],[312,55,297,59],[312,60,297,64],[312,62,297,66],[312,64,297,68],[312,65,297,69],[312,68,297,72,"path"],[312,72,297,76],[312,74,297,78],[313,6,298,8],[314,4,299,4],[315,4,300,4],[315,11,300,11,"path"],[315,15,300,15],[316,2,301,0],[317,2,302,0,"exports"],[317,9,302,7],[317,10,302,8,"appendBaseUrl"],[317,23,302,21],[317,26,302,24,"appendBaseUrl"],[317,39,302,37],[318,0,302,38],[318,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","getActiveRoute","getPathFromState","getPathDataFromState","pattern.split.filter$argument_0","pattern.split.filter.forEach$argument_0","joinPaths","paths.map$argument_0","createConfigItem","createNormalizedConfigs","Object.entries.map$argument_0","appendBaseUrl"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;kDCC;CDM;uBGM;CHQ;AIkC;CJE;AKE;gCCuD,4BD;iCEE;qBFO;CL2H;kBQG;yBCC,mBD;cRE;yBUC;CVmB;gCWC,qEC;CDG,EX;AaC;CbO"}},"type":"js/module"}]}