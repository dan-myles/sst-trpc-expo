{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":120,"column":0,"index":4109}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":120,"column":0,"index":4109}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.dataLoader = dataLoader;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  /* eslint-disable @typescript-eslint/no-non-null-assertion */ /**\n                                                                * A function that should never be called unless we messed something up.\n                                                                */var throwFatalError = () => {\n    throw new Error('Something went wrong. Please submit an issue at https://github.com/trpc/trpc/issues/new');\n  };\n  /**\n   * Dataloader that's very inspired by https://github.com/graphql/dataloader\n   * Less configuration, no caching, and allows you to cancel requests\n   * When cancelling a single fetch the whole batch will be cancelled only when _all_ items are cancelled\n   */\n  function dataLoader(batchLoader) {\n    var pendingItems = null;\n    var dispatchTimer = null;\n    var destroyTimerAndPendingItems = () => {\n      clearTimeout(dispatchTimer);\n      dispatchTimer = null;\n      pendingItems = null;\n    };\n    /**\n    * Iterate through the items and split them into groups based on the `batchLoader`'s validate function\n    */\n    function groupItems(items) {\n      var groupedItems = [[]];\n      var index = 0;\n      while (true) {\n        var item = items[index];\n        if (!item) {\n          break;\n        }\n        var lastGroup = groupedItems[groupedItems.length - 1];\n        if (item.aborted) {\n          // Item was aborted before it was dispatched\n          item.reject?.(new Error('Aborted'));\n          index++;\n          continue;\n        }\n        var isValid = batchLoader.validate(lastGroup.concat(item).map(it => it.key));\n        if (isValid) {\n          lastGroup.push(item);\n          index++;\n          continue;\n        }\n        if (lastGroup.length === 0) {\n          item.reject?.(new Error('Input is too big for a single dispatch'));\n          index++;\n          continue;\n        }\n        // Create new group, next iteration will try to add the item to that\n        groupedItems.push([]);\n      }\n      return groupedItems;\n    }\n    function dispatch() {\n      var groupedItems = groupItems(pendingItems);\n      destroyTimerAndPendingItems();\n      // Create batches for each group of items\n      var _loop = function () {\n        if (!items.length) {\n          return 1; // continue\n        }\n        var batch = {\n          items\n        };\n        for (var item of items) {\n          item.batch = batch;\n        }\n        var promise = batchLoader.fetch(batch.items.map(_item => _item.key));\n        promise.then(/*#__PURE__*/function () {\n          var _ref = (0, _asyncToGenerator2.default)(function* (result) {\n            yield Promise.all(result.map(/*#__PURE__*/function () {\n              var _ref2 = (0, _asyncToGenerator2.default)(function* (valueOrPromise, index) {\n                var item = batch.items[index];\n                try {\n                  var value = yield Promise.resolve(valueOrPromise);\n                  item.resolve?.(value);\n                } catch (cause) {\n                  item.reject?.(cause);\n                }\n                item.batch = null;\n                item.reject = null;\n                item.resolve = null;\n              });\n              return function (_x2, _x3) {\n                return _ref2.apply(this, arguments);\n              };\n            }()));\n            for (var _item2 of batch.items) {\n              _item2.reject?.(new Error('Missing result'));\n              _item2.batch = null;\n            }\n          });\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }()).catch(cause => {\n          for (var _item3 of batch.items) {\n            _item3.reject?.(cause);\n            _item3.batch = null;\n          }\n        });\n      };\n      for (var items of groupedItems) {\n        if (_loop()) continue;\n      }\n    }\n    function load(key) {\n      var item = {\n        aborted: false,\n        key,\n        batch: null,\n        resolve: throwFatalError,\n        reject: throwFatalError\n      };\n      var promise = new Promise((resolve, reject) => {\n        item.reject = reject;\n        item.resolve = resolve;\n        if (!pendingItems) {\n          pendingItems = [];\n        }\n        pendingItems.push(item);\n      });\n      if (!dispatchTimer) {\n        dispatchTimer = setTimeout(dispatch);\n      }\n      return promise;\n    }\n    return {\n      load\n    };\n  }\n});","lineCount":138,"map":[[8,2,1,0],[8,64,1,62],[9,0,2,0],[10,0,3,0],[10,66,3,4],[10,70,3,10,"throwFatalError"],[10,85,3,25],[10,88,3,28,"throwFatalError"],[10,89,3,28],[10,94,3,32],[11,4,4,4],[11,10,4,10],[11,14,4,14,"Error"],[11,19,4,19],[11,20,4,20],[11,109,4,109],[11,110,4,110],[12,2,5,0],[12,3,5,1],[13,2,6,0],[14,0,7,0],[15,0,8,0],[16,0,9,0],[17,0,10,0],[18,2,10,4],[18,11,10,13,"dataLoader"],[18,21,10,23,"dataLoader"],[18,22,10,24,"batchLoader"],[18,33,10,35],[18,35,10,37],[19,4,11,4],[19,8,11,8,"pendingItems"],[19,20,11,20],[19,23,11,23],[19,27,11,27],[20,4,12,4],[20,8,12,8,"dispatchTimer"],[20,21,12,21],[20,24,12,24],[20,28,12,28],[21,4,13,4],[21,8,13,10,"destroyTimerAndPendingItems"],[21,35,13,37],[21,38,13,40,"destroyTimerAndPendingItems"],[21,39,13,40],[21,44,13,44],[22,6,14,8,"clearTimeout"],[22,18,14,20],[22,19,14,21,"dispatchTimer"],[22,32,14,34],[22,33,14,35],[23,6,15,8,"dispatchTimer"],[23,19,15,21],[23,22,15,24],[23,26,15,28],[24,6,16,8,"pendingItems"],[24,18,16,20],[24,21,16,23],[24,25,16,27],[25,4,17,4],[25,5,17,5],[26,4,18,4],[27,0,19,0],[28,0,20,0],[29,4,20,6],[29,13,20,15,"groupItems"],[29,23,20,25,"groupItems"],[29,24,20,26,"items"],[29,29,20,31],[29,31,20,33],[30,6,21,8],[30,10,21,14,"groupedItems"],[30,22,21,26],[30,25,21,29],[30,26,22,12],[30,28,22,14],[30,29,23,9],[31,6,24,8],[31,10,24,12,"index"],[31,15,24,17],[31,18,24,20],[31,19,24,21],[32,6,25,8],[32,13,25,14],[32,17,25,18],[32,19,25,19],[33,8,26,12],[33,12,26,18,"item"],[33,16,26,22],[33,19,26,25,"items"],[33,24,26,30],[33,25,26,31,"index"],[33,30,26,36],[33,31,26,37],[34,8,27,12],[34,12,27,16],[34,13,27,17,"item"],[34,17,27,21],[34,19,27,23],[35,10,28,16],[36,8,29,12],[37,8,30,12],[37,12,30,18,"lastGroup"],[37,21,30,27],[37,24,30,30,"groupedItems"],[37,36,30,42],[37,37,30,43,"groupedItems"],[37,49,30,55],[37,50,30,56,"length"],[37,56,30,62],[37,59,30,65],[37,60,30,66],[37,61,30,67],[38,8,31,12],[38,12,31,16,"item"],[38,16,31,20],[38,17,31,21,"aborted"],[38,24,31,28],[38,26,31,30],[39,10,32,16],[40,10,33,16,"item"],[40,14,33,20],[40,15,33,21,"reject"],[40,21,33,27],[40,24,33,30],[40,28,33,34,"Error"],[40,33,33,39],[40,34,33,40],[40,43,33,49],[40,44,33,50],[40,45,33,51],[41,10,34,16,"index"],[41,15,34,21],[41,17,34,23],[42,10,35,16],[43,8,36,12],[44,8,37,12],[44,12,37,18,"isValid"],[44,19,37,25],[44,22,37,28,"batchLoader"],[44,33,37,39],[44,34,37,40,"validate"],[44,42,37,48],[44,43,37,49,"lastGroup"],[44,52,37,58],[44,53,37,59,"concat"],[44,59,37,65],[44,60,37,66,"item"],[44,64,37,70],[44,65,37,71],[44,66,37,72,"map"],[44,69,37,75],[44,70,37,77,"it"],[44,72,37,79],[44,76,37,82,"it"],[44,78,37,84],[44,79,37,85,"key"],[44,82,37,88],[44,83,37,89],[44,84,37,90],[45,8,38,12],[45,12,38,16,"isValid"],[45,19,38,23],[45,21,38,25],[46,10,39,16,"lastGroup"],[46,19,39,25],[46,20,39,26,"push"],[46,24,39,30],[46,25,39,31,"item"],[46,29,39,35],[46,30,39,36],[47,10,40,16,"index"],[47,15,40,21],[47,17,40,23],[48,10,41,16],[49,8,42,12],[50,8,43,12],[50,12,43,16,"lastGroup"],[50,21,43,25],[50,22,43,26,"length"],[50,28,43,32],[50,33,43,37],[50,34,43,38],[50,36,43,40],[51,10,44,16,"item"],[51,14,44,20],[51,15,44,21,"reject"],[51,21,44,27],[51,24,44,30],[51,28,44,34,"Error"],[51,33,44,39],[51,34,44,40],[51,74,44,80],[51,75,44,81],[51,76,44,82],[52,10,45,16,"index"],[52,15,45,21],[52,17,45,23],[53,10,46,16],[54,8,47,12],[55,8,48,12],[56,8,49,12,"groupedItems"],[56,20,49,24],[56,21,49,25,"push"],[56,25,49,29],[56,26,49,30],[56,28,49,32],[56,29,49,33],[57,6,50,8],[58,6,51,8],[58,13,51,15,"groupedItems"],[58,25,51,27],[59,4,52,4],[60,4,53,4],[60,13,53,13,"dispatch"],[60,21,53,21,"dispatch"],[60,22,53,21],[60,24,53,24],[61,6,54,8],[61,10,54,14,"groupedItems"],[61,22,54,26],[61,25,54,29,"groupItems"],[61,35,54,39],[61,36,54,40,"pendingItems"],[61,48,54,52],[61,49,54,53],[62,6,55,8,"destroyTimerAndPendingItems"],[62,33,55,35],[62,34,55,36],[62,35,55,37],[63,6,56,8],[64,6,56,8],[64,10,56,8,"_loop"],[64,15,56,8],[64,27,56,8,"_loop"],[64,28,56,8],[64,30,57,41],[65,8,58,12],[65,12,58,16],[65,13,58,17,"items"],[65,18,58,22],[65,19,58,23,"length"],[65,25,58,29],[65,27,58,31],[66,10,58,31],[67,8,60,12],[68,8,61,12],[68,12,61,18,"batch"],[68,17,61,23],[68,20,61,26],[69,10,62,16,"items"],[70,8,63,12],[70,9,63,13],[71,8,64,12],[71,13,64,17],[71,17,64,23,"item"],[71,21,64,27],[71,25,64,31,"items"],[71,30,64,36],[71,32,64,37],[72,10,65,16,"item"],[72,14,65,20],[72,15,65,21,"batch"],[72,20,65,26],[72,23,65,29,"batch"],[72,28,65,34],[73,8,66,12],[74,8,67,12],[74,12,67,18,"promise"],[74,19,67,25],[74,22,67,28,"batchLoader"],[74,33,67,39],[74,34,67,40,"fetch"],[74,39,67,45],[74,40,67,46,"batch"],[74,45,67,51],[74,46,67,52,"items"],[74,51,67,57],[74,52,67,58,"map"],[74,55,67,61],[74,56,67,63,"_item"],[74,61,67,68],[74,65,67,71,"_item"],[74,70,67,76],[74,71,67,77,"key"],[74,74,67,80],[74,75,67,81],[74,76,67,82],[75,8,68,12,"promise"],[75,15,68,19],[75,16,68,20,"then"],[75,20,68,24],[76,10,68,24],[76,14,68,24,"_ref"],[76,18,68,24],[76,25,68,24,"_asyncToGenerator2"],[76,43,68,24],[76,44,68,24,"default"],[76,51,68,24],[76,53,68,25],[76,64,68,32,"result"],[76,70,68,38],[76,72,68,41],[77,12,69,16],[77,18,69,22,"Promise"],[77,25,69,29],[77,26,69,30,"all"],[77,29,69,33],[77,30,69,34,"result"],[77,36,69,40],[77,37,69,41,"map"],[77,40,69,44],[78,14,69,44],[78,18,69,44,"_ref2"],[78,23,69,44],[78,30,69,44,"_asyncToGenerator2"],[78,48,69,44],[78,49,69,44,"default"],[78,56,69,44],[78,58,69,45],[78,69,69,52,"valueOrPromise"],[78,83,69,66],[78,85,69,68,"index"],[78,90,69,73],[78,92,69,76],[79,16,70,20],[79,20,70,26,"item"],[79,24,70,30],[79,27,70,33,"batch"],[79,32,70,38],[79,33,70,39,"items"],[79,38,70,44],[79,39,70,45,"index"],[79,44,70,50],[79,45,70,51],[80,16,71,20],[80,20,71,24],[81,18,72,24],[81,22,72,30,"value"],[81,27,72,35],[81,36,72,44,"Promise"],[81,43,72,51],[81,44,72,52,"resolve"],[81,51,72,59],[81,52,72,60,"valueOrPromise"],[81,66,72,74],[81,67,72,75],[82,18,73,24,"item"],[82,22,73,28],[82,23,73,29,"resolve"],[82,30,73,36],[82,33,73,39,"value"],[82,38,73,44],[82,39,73,45],[83,16,74,20],[83,17,74,21],[83,18,74,22],[83,25,74,29,"cause"],[83,30,74,34],[83,32,74,36],[84,18,75,24,"item"],[84,22,75,28],[84,23,75,29,"reject"],[84,29,75,35],[84,32,75,38,"cause"],[84,37,75,43],[84,38,75,44],[85,16,76,20],[86,16,77,20,"item"],[86,20,77,24],[86,21,77,25,"batch"],[86,26,77,30],[86,29,77,33],[86,33,77,37],[87,16,78,20,"item"],[87,20,78,24],[87,21,78,25,"reject"],[87,27,78,31],[87,30,78,34],[87,34,78,38],[88,16,79,20,"item"],[88,20,79,24],[88,21,79,25,"resolve"],[88,28,79,32],[88,31,79,35],[88,35,79,39],[89,14,80,16],[89,15,80,17],[90,14,80,17],[90,31,80,17,"_x2"],[90,34,80,17],[90,36,80,17,"_x3"],[90,39,80,17],[91,16,80,17],[91,23,80,17,"_ref2"],[91,28,80,17],[91,29,80,17,"apply"],[91,34,80,17],[91,41,80,17,"arguments"],[91,50,80,17],[92,14,80,17],[93,12,80,17],[93,16,80,18],[93,17,80,19],[94,12,81,16],[94,17,81,21],[94,21,81,27,"item"],[94,27,81,31],[94,31,81,35,"batch"],[94,36,81,40],[94,37,81,41,"items"],[94,42,81,46],[94,44,81,47],[95,14,82,20,"item"],[95,20,82,24],[95,21,82,25,"reject"],[95,27,82,31],[95,30,82,34],[95,34,82,38,"Error"],[95,39,82,43],[95,40,82,44],[95,56,82,60],[95,57,82,61],[95,58,82,62],[96,14,83,20,"item"],[96,20,83,24],[96,21,83,25,"batch"],[96,26,83,30],[96,29,83,33],[96,33,83,37],[97,12,84,16],[98,10,85,12],[98,11,85,13],[99,10,85,13],[99,27,85,13,"_x"],[99,29,85,13],[100,12,85,13],[100,19,85,13,"_ref"],[100,23,85,13],[100,24,85,13,"apply"],[100,29,85,13],[100,36,85,13,"arguments"],[100,45,85,13],[101,10,85,13],[102,8,85,13],[102,12,85,14],[102,13,85,15,"catch"],[102,18,85,20],[102,19,85,22,"cause"],[102,24,85,27],[102,28,85,30],[103,10,86,16],[103,15,86,21],[103,19,86,27,"item"],[103,25,86,31],[103,29,86,35,"batch"],[103,34,86,40],[103,35,86,41,"items"],[103,40,86,46],[103,42,86,47],[104,12,87,20,"item"],[104,18,87,24],[104,19,87,25,"reject"],[104,25,87,31],[104,28,87,34,"cause"],[104,33,87,39],[104,34,87,40],[105,12,88,20,"item"],[105,18,88,24],[105,19,88,25,"batch"],[105,24,88,30],[105,27,88,33],[105,31,88,37],[106,10,89,16],[107,8,90,12],[107,9,90,13],[107,10,90,14],[108,6,91,8],[108,7,91,9],[109,6,57,8],[109,11,57,13],[109,15,57,19,"items"],[109,20,57,24],[109,24,57,28,"groupedItems"],[109,36,57,40],[110,8,57,40],[110,12,57,40,"_loop"],[110,17,57,40],[110,21,59,16],[111,6,59,25],[112,4,92,4],[113,4,93,4],[113,13,93,13,"load"],[113,17,93,17,"load"],[113,18,93,18,"key"],[113,21,93,21],[113,23,93,23],[114,6,94,8],[114,10,94,14,"item"],[114,14,94,18],[114,17,94,21],[115,8,95,12,"aborted"],[115,15,95,19],[115,17,95,21],[115,22,95,26],[116,8,96,12,"key"],[116,11,96,15],[117,8,97,12,"batch"],[117,13,97,17],[117,15,97,19],[117,19,97,23],[118,8,98,12,"resolve"],[118,15,98,19],[118,17,98,21,"throwFatalError"],[118,32,98,36],[119,8,99,12,"reject"],[119,14,99,18],[119,16,99,20,"throwFatalError"],[120,6,100,8],[120,7,100,9],[121,6,101,8],[121,10,101,14,"promise"],[121,17,101,21],[121,20,101,24],[121,24,101,28,"Promise"],[121,31,101,35],[121,32,101,36],[121,33,101,37,"resolve"],[121,40,101,44],[121,42,101,46,"reject"],[121,48,101,52],[121,53,101,55],[122,8,102,12,"item"],[122,12,102,16],[122,13,102,17,"reject"],[122,19,102,23],[122,22,102,26,"reject"],[122,28,102,32],[123,8,103,12,"item"],[123,12,103,16],[123,13,103,17,"resolve"],[123,20,103,24],[123,23,103,27,"resolve"],[123,30,103,34],[124,8,104,12],[124,12,104,16],[124,13,104,17,"pendingItems"],[124,25,104,29],[124,27,104,31],[125,10,105,16,"pendingItems"],[125,22,105,28],[125,25,105,31],[125,27,105,33],[126,8,106,12],[127,8,107,12,"pendingItems"],[127,20,107,24],[127,21,107,25,"push"],[127,25,107,29],[127,26,107,30,"item"],[127,30,107,34],[127,31,107,35],[128,6,108,8],[128,7,108,9],[128,8,108,10],[129,6,109,8],[129,10,109,12],[129,11,109,13,"dispatchTimer"],[129,24,109,26],[129,26,109,28],[130,8,110,12,"dispatchTimer"],[130,21,110,25],[130,24,110,28,"setTimeout"],[130,34,110,38],[130,35,110,39,"dispatch"],[130,43,110,47],[130,44,110,48],[131,6,111,8],[132,6,112,8],[132,13,112,15,"promise"],[132,20,112,22],[133,4,113,4],[134,4,114,4],[134,11,114,11],[135,6,115,8,"load"],[136,4,116,4],[136,5,116,5],[137,2,117,0],[138,0,117,1],[138,3]],"functionMap":{"names":["<global>","throwFatalError","dataLoader","destroyTimerAndPendingItems","groupItems","lastGroup.concat.map$argument_0","dispatch","batch.items.map$argument_0","promise.then$argument_0","result.map$argument_0","promise.then._catch$argument_0","load","Promise$argument_0"],"mappings":"AAA;4BCE;CDE;IEK;wCCG;KDI;MEG;4ECiB,YD;KFe;IIC;8DCc,kBD;yBEC;6CCC;iBDW;aFK,QI;aJK;KJE;ISC;oCCQ;SDO;KTK;CFI"}},"type":"js/module"}]}